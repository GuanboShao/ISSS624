---
title: "In-class Exercise 3: Geographical Segmentation with Spatially Constrained Clustering Techniques"
execute: 
  echo: false
  warning: false
  message: false
format: html
editor: visual
---

## Overview

In this in-class exercise, there are some additional explanations and sections on top of hands-on exercise 3.

## Getting Started

The code chunk below installs and launch the R packages into R environment.

```{r}
pacman::p_load(rgdal, spdep, tmap, sf, 
               ggpubr, cluster, ClustGeo, factoextra, NbClust,
               heatmaply, corrplot, psych, tidyverse)
```

## Importing Data into R environment

### Importing geospatial data into R environment

The code chunk below uses [`st_read()`](https://cran.r-project.org/web/packages/sf/vignettes/sf2.html) of **sf** package to import Myanmar Township Boundary GIS data shapefile *myanmar_township_boundaries* into R and save as simple feature data frame called *shan_sf*.

```{r}
shan_sf <- st_read(dsn = "data/geospatial", 
                   layer = "myanmar_township_boundaries") %>%
  filter(ST %in% c("Shan (East)", "Shan (North)", "Shan (South)"))
```

### Importing aspatial data into R environment

The code chunk below uses read_csv() of readr package to import *Shan-ICT* csv file and save in R's tibble data.frame format called *ict*.

```{r}
ict <- read_csv ("data/aspatial/Shan-ICT.csv")
```

### Deriving new variables using dplyr package

The code chunk below derives the penetration rate of each ICT variable.

```{r}
ict_derived <- ict %>%
  mutate(`RADIO_PR` = `Radio`/`Total households`*1000) %>%
  mutate(`TV_PR` = `Television`/`Total households`*1000) %>%
  mutate(`LLPHONE_PR` = `Land line phone`/`Total households`*1000) %>%
  mutate(`MPHONE_PR` = `Mobile phone`/`Total households`*1000) %>%
  mutate(`COMPUTER_PR` = `Computer`/`Total households`*1000) %>%
  mutate(`INTERNET_PR` = `Internet at home`/`Total households`*1000) %>%
  rename(`DT_PCODE` =`District Pcode`,`DT`=`District Name`,
         `TS_PCODE`=`Township Pcode`, `TS`=`Township Name`,
         `TT_HOUSEHOLDS`=`Total households`,
         `RADIO`=`Radio`, `TV`=`Television`, 
         `LLPHONE`=`Land line phone`, `MPHONE`=`Mobile phone`,
         `COMPUTER`=`Computer`, `INTERNET`=`Internet at home`) #rename fields for easier reading
```

## Exploratory Data Analysis (EDA)

### EDA using statistical graphics

The code chunk below plots multiple histograms to reveal the distribution of selected variables in derived *ict* data frame called *ict_derived*.

[`ggarange()`](https://rpkgs.datanovia.com/ggpubr/reference/ggarrange.html) of **ggpubr** package is used to group the histograms together.

```{r}
radio <- ggplot(data=ict_derived, 
             aes(x= `RADIO_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")

tv <- ggplot(data=ict_derived, 
             aes(x= `TV_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")

llphone <- ggplot(data=ict_derived, 
             aes(x= `LLPHONE_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")

mphone <- ggplot(data=ict_derived, 
             aes(x= `MPHONE_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")

computer <- ggplot(data=ict_derived, 
             aes(x= `COMPUTER_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")

internet <- ggplot(data=ict_derived, 
             aes(x= `INTERNET_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")

ggarrange(radio, tv, llphone, mphone, computer, internet, 
          ncol = 3, 
          nrow = 2)
```

### EDA using choropleth map

#### Joining geospatial data with aspatial data

The code chunk below uses [`left_join()`](https://dplyr.tidyverse.org/reference/join.tbl_df.html) of **dplyr** package to combine *shan_sf* and *ict_derived* by column field "*TS_PCODE*". *shan_sf* is base data object and *ict_derived* is the join table.

```{r}
shan_sf <- left_join(shan_sf, 
                     ict_derived, 
                     by=c("TS_PCODE"="TS_PCODE")) #the sequence of data frame is important
write_rds(shan_sf, "data/rds/shan_sf.rds")
```

## Correlation Analysis

The code chunk below uses [`corrplot.mixed()`](https://cran.r-project.org/web/packages/corrplot/corrplot.pdf)of [**corrplot**](https://cran.r-project.org/web/packages/corrplot/vignettes/corrplot-intro.html) package to visualise and analyse the correlation of the input variables.

```{r}
cluster_vars.cor = cor(ict_derived[,12:17]) #only consider column 12 to 17
corrplot.mixed(cluster_vars.cor,
         lower = "ellipse", 
               upper = "number",
               tl.pos = "lt",
               diag = "l",
               tl.col = "black")
```

## Hierarchy Cluster Analysis

In this section, I learn how to perform hierarchical cluster analysis.

### Extracting clustering variables

The code chunk below extracts the clustering variables from *shan_sf*.

```{r}
cluster_vars <- shan_sf %>%
  st_set_geometry(NULL) %>% #drop the geometry column in shan_sf so can do clustering analysis
  select("TS.x", "RADIO_PR", "TV_PR", "LLPHONE_PR", "MPHONE_PR", "COMPUTER_PR") #only keep clustering variables that is going to use
head(cluster_vars,10)
```

The code chunk below uses [`row.names()`](https://stat.ethz.ch/R-manual/R-devel/library/base/html/row.names.html) to change the rows by township name instead of row number.

```{r}
row.names(cluster_vars) <- cluster_vars$"TS.x"
head(cluster_vars,10) #Comparing with the table above, field TS.x is pulled out as object ID
```

The code chunk below keeps field 2 to 6, deleting TS.x field.

```{r}
shan_ict <- select(cluster_vars, c(2:6))
head(shan_ict, 10) #now all left are clustering variables
```

### Computing proximity matrix

The code chunk below uses [`dist()`](https://stat.ethz.ch/R-manual/R-devel/library/stats/html/dist.html) of **R** to calculate distance matrix by euclidean method.

```{r}
proxmat <- dist(shan_ict, method = 'euclidean')
proxmat #similarity shorter distance value, dissimilarity larger distance
```

### Computing hierarchical clustering

The code chunk below uses [`hclust()`](https://stat.ethz.ch/R-manual/R-devel/library/stats/html/hclust.html) of **R stats** to perform hierarchical cluster analysis by ward.D method.

```{r}
hclust_ward <- hclust(proxmat, method = 'ward.D')
```

The code chunk below uses `plot()` of **R Graphics** to plot hierarchical tree.

```{r}
plot(hclust_ward, cex = 0.6) #use cex to scale down resolution so the words do not overlap in html view
```

### Selecting the optimal clustering algorithm

The code chunk below uses [`agnes()`](https://www.rdocumentation.org/packages/cluster/versions/2.1.0/topics/agnes) of [**cluster**](https://cran.r-project.org/web/packages/cluster/) package to identify stronger clustering structures when performing hierarchical analysis.

```{r}
m <- c( "average", "single", "complete", "ward") #create a new object
names(m) <- c( "average", "single", "complete", "ward")

ac <- function(x) {
  agnes(shan_ict, method = x)$ac
} #create a function to run multiple codes in one go

map_dbl(m, ac) #the one gives highest result should be the choice
```

### Determining optimal clusters using Gap Statistic Method

The code chunk below uses [`clusGap()`](https://www.rdocumentation.org/packages/cluster/versions/2.1.0/topics/clusGap) of **cluster** package to compute the gap statistic.

```{r}
set.seed(12345)
gap_stat <- clusGap(shan_ict, 
                    FUN = hcut, 
                    nstart = 25, 
                    K.max = 10, 
                    B = 50)

print(gap_stat, method = "firstmax")
```

The code chunk below uses [`fviz_gap_stat()`](https://rpkgs.datanovia.com/factoextra/reference/fviz_nbclust.html) of **factoextra** package to visualize the gap statistic.

```{r}
fviz_gap_stat(gap_stat)  #the grapgh recommends 2 clusters, but in actual application should have at least 3 clusters, so sometimes need to find local optimization by ourselves, in this case 5 or 6 clusters is the optimal choice
```

### Interpreting the dendrograms

The code chunk below uses [`rect.hclust()`](https://stat.ethz.ch/R-manual/R-devel/library/stats/html/rect.hclust.html) of **R stats** to draw the dendrogram with a border around the selected clusters. border argument is used to specify the rectangles' border colors.

```{r}
plot(hclust_ward, cex = 0.6)
rect.hclust(hclust_ward, 
            k = 6, 
            border = 2:5)
```

### Visually-driven hierarchical clustering analysis

The code chunks below performs visually-driven hiearchical clustering analysis.

The code chunk below uses `data.matrix()` to transform *shan_ict* data frame into data matrix.

```{r}
shan_ict_mat <- data.matrix(shan_ict)
```

The code chunk below uses [`heatmaply()`](https://talgalili.github.io/heatmaply/reference/heatmaply.html) of **heatmaply** package to build an interactive cluster heatmap.

```{r}
heatmaply(normalize(shan_ict_mat),
          Colv=NA,
          dist_method = "euclidean",
          hclust_method = "ward.D",
          seriate = "OLO",
          colors = Blues,
          k_row = 6,
          margins = c(NA,200,60,NA),
          fontsize_row = 4,
          fontsize_col = 5,
          main="Geographic Segmentation of Shan State by ICT indicators",
          xlab = "ICT Indicators",
          ylab = "Townships of Shan State"
          )
```

### Mapping the clusters formed

The code chunk below uses [`cutree()`](https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/cutree) of **R Base** to derive a 6-cluster model after examining the dendragram above.

```{r}
groups <- as.factor(cutree(hclust_ward, k=6))
```

The code chunk below uses [`cbind()`](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/cbind) of [**mice**](https://cran.r-project.org/web/packages/mice/mice.pdf) package to append *groups* object onto *shan_sf* simple feature object.

`as,matrix()` converts *groups* into a matrix.

`rename()` then renames *as.matrix.groups* as *CLUSTER*.

[`qtm()`](https://search.r-project.org/CRAN/refmans/tmap/html/qtm.html) of **tmap** package is used to plot a choropleth map showing the cluster formed.

```{r}
shan_sf_cluster <- cbind(shan_sf, as.matrix(groups)) %>%
  rename(`CLUSTER`=`as.matrix.groups.`)

qtm(shan_sf_cluster, "CLUSTER")
```

## Spatially Constrained Clustering - SKATER approach

In this section, I learn how to derive spatially constrained cluster.

### Converting into SpatialPolygonsDataFrame

The code chunk below uses [`as_Spatial()`](https://r-spatial.github.io/sf/reference/coerce-methods.html) of **sf** package to convert *shan_sf* into a SpatialPolygonDataFrame called *shan_sp*.

[`poly2nd()`](https://r-spatial.github.io/spdep/reference/poly2nb.html) of **spdep** package is used to compute the neighbours list from polygon list.

The neighbors list on *shan_sp* is then plotted.

```{r}
shan_sp <- as_Spatial(shan_sf)
shan.nb <- poly2nb(shan_sp)
plot(shan_sp, 
     border=grey(.5))
plot(shan.nb, 
     coordinates(shan_sp), 
     col="blue", 
     add=TRUE)
```

### Calculating edge costs

The code chunk below uses[`nbcosts()`](https://r-spatial.github.io/spdep/reference/nbcosts.html) of **spdep** package to compute the cost of each edge, which is the distance between nodes.

```{r}
lcosts <- nbcosts(shan.nb, shan_ict)
```

The code chunk below uses [`nb2listw()`](https://r-spatial.github.io/spdep/reference/nb2listw.html) of **spdep** package to convert the neighbour list to a list weights object by specifying the *lcosts* computed above as the weights. "style" argument is set as "B" to make sure the cost values are not row-standardized.

```{r}
shan.w <- nb2listw(shan.nb, 
                   lcosts, 
                   style="B")
```

### Computing minimum spanning tree

The code chunk below uses [`mstree()`](https://r-spatial.github.io/spdep/reference/mstree.html) of **spdep** package to compute minimum spanning tree.

`class()` and `dim()` check the class and dimension of *shan.mst*.

`head()` displays the content of *shan.mst*

```{r}
shan.mst <- mstree(shan.w)
class(shan.mst)
dim(shan.mst)
head(shan.mst)
```

The code chunk below plots the neighbors list on *shan_sp* and shows the observation number of the nodes.

```{r}
plot(shan_sp, border=gray(.5))
plot.mst(shan.mst, 
         coordinates(shan_sp), 
         col="blue", 
         cex.lab=0.7, 
         cex.circles=0.005, 
         add=TRUE)
```

### Computing spatially constrained clusters using SKATER method

The code chunk below uses [`skater()`](https://r-spatial.github.io/spdep/reference/skater.html) of **spdep** package to compute the spatially constrained cluster.

`str()` examines the content of *clust6*.

```{r}
clust6 <- skater(edges = shan.mst[,1:2], 
                 data = shan_ict, 
                 method = "euclidean", 
                 ncuts = 5) #6 clusters but 5 cuts, because starts from 0, 5 cuts means 6 clusters
str(clust6)
```

The code chunk below checks the cluster assignment.

```{r}
ccs6 <- clust6$groups
ccs6
table(ccs6)
```

The code chunk below plots the pruned tree that shows the five clusters on top of the township area.

```{r}
plot(shan_sp, border=gray(.5))
plot(clust6, 
     coordinates(shan_sp), 
     cex.lab=.7,
     groups.colors=c("red","green","blue", "brown", "pink"),
     cex.circles=0.005, 
     add=TRUE)
```

### Visualizing the clusters in choropleth map

The code chunk below plots the newly derived clusters by using SKATER method, and shows both the hierarchical clustering and spatially constrained hierarchical clustering maps.

```{r}
groups_mat <- as.matrix(clust6$groups)
shan_sf_spatialcluster <- cbind(shan_sf_cluster, as.factor(groups_mat)) %>%
  rename(`SP_CLUSTER`=`as.factor.groups_mat.`)

hclust.map <- qtm(shan_sf_cluster,
                  "CLUSTER") + 
  tm_borders(alpha = 0.5) 

shclust.map <- qtm(shan_sf_spatialcluster,
                   "SP_CLUSTER") + 
  tm_borders(alpha = 0.5) 

tmap_arrange(hclust.map, shclust.map,
             asp=NA, ncol=2)
```

## Spatially Constrained Clustering: ClusterGeo Method

In this section, I learn how to use **ClustGeo** package to perform non-spatially constrained hierarchical cluster analysis and spatially constrained cluster analysis.

Ward-like hierarchical clustering: ClustGeo

The code chunk below uses `hclustgeo()` of **ClustGeo** package to perform a typical Ward-like hierarchical clustering.

```{r}
nongeo_cluster <- hclustgeo(proxmat)
plot(nongeo_cluster, cex = 0.5)
rect.hclust(nongeo_cluster, 
            k = 6, 
            border = 2:5)
```

The code chunk below plots the clusters on a categorical area shaded map.

```{r}
groups <- as.factor(cutree(nongeo_cluster, k=6))
shan_sf_ngeo_cluster <- cbind(shan_sf, as.matrix(groups)) %>%
  rename(`CLUSTER` = `as.matrix.groups.`)
qtm(shan_sf_ngeo_cluster, "CLUSTER")
```

[`cbind()`](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/cbind) of [**mice**](https://cran.r-project.org/web/packages/mice/mice.pdf) package is used to append *groups* object onto *shan_sf* simple feature object.

`as,matrix()` converts *groups* into a matrix.

`rename()` then renames *as.matrix.groups* as *CLUSTER*.

[`qtm()`](https://search.r-project.org/CRAN/refmans/tmap/html/qtm.html) of **tmap** package is used to plot a choropleth map showing the cluster formed.

### Spatially constrained hierarchical clustering

The code chunk below uses [`st_distance()`](https://r-spatial.github.io/sf/reference/geos_measures.html) of **sf** package to derive a spatial distance matrix.

`as.dist()` is used to convert data frame into matrix.

```{r}
dist <- st_distance(shan_sf, shan_sf)
distmat <- as.dist(dist)
```

The code chunk below uses `choicealpha()` is used to determine a suitable value for the mixing parameter alpha.

```{r}
cr <- choicealpha(proxmat, distmat,
                  range.alpha = seq(0, 1, 0.1), #0.1 is the increment
                  K=6, graph = TRUE) #use uppercase K not k
```

The black color line refers to attribute space, the red color line refers to geographical space

At value 0 we don't look at spatial homogeneity, at value 1 we only care about spatial homogeneity.

Based on the graphs above, in `hclustgeo()` alpha is set to 3.

`cutree()` is used to derive the cluster object.

`cbind()` is used to join back the group list with *shan_sf* polygon feature data frame.

`qtm()` is used to plot the map of the newly delineated spatially constrained clusters.

```{r}
clustG <- hclustgeo(proxmat, distmat, alpha = 0.3)

groups <- as.factor(cutree(clustG, k=6))

shan_sf_Gcluster <- cbind(shan_sf, as.matrix(groups)) %>%
  rename(`CLUSTER` = `as.matrix.groups.`)

qtm(shan_sf_Gcluster, "CLUSTER")
```
