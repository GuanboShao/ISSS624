---
title: "Hands-on Exercise 1: Geospatial Data Wrangling with R"
editor: visual
---

## Overview

In this hands-on exercise, I learn how to import and wrangling geospatial data using appropriate R packages.

## Getting Started

The code chunk below installs and loads [sf](https://r-spatial.github.io/sf/) and [tidyverse](https://www.tidyverse.org/packages/) packages into R environment.

```{r}
pacman::p_load(sf, tidyverse)
```

## Importing Geospatial Data

### Importing polygon feature data

The code chunk below uses `st_read()` function to import shapefile as polygon feature data frame. `dsn` defines data path ad `layer` provides shapefile name.

```{r}
mpsz <- st_read(dsn = "data/geospatial", layer = "MP14_SUBZONE_WEB_PL")
```

### Importing polyline feature data in shapefile form

```{r}
cyclingpath = st_read(dsn = "data/geospatial", layer = "CyclingPath")
```

### Importing GIS data in kml format

```{r}
preschool = st_read("data/geospatial/pre-schools-location-kml.kml")
```

## Checking the Content of A Simple Feature Data Frame

In this section, I learn different ways to retrieve information related to the content of a simple feature data frame.

### Working with *st_geometry()*

The code chunk below uses `st_geometry()` to retrieve the geometry list-column.

```{r}
st_geometry(mpsz)
```

### Working with *glimpse()*

The `glimpse()` gives data types of each fields.

```{r}
glimpse(mpsz)
```

### Working with *head()*

The `head()` gives complete information of a feature object.

```{r}
head(mpsz, n = 5)  
```

## Plotting the Geospatial Data

The code chunk below plot the visualization of geospatial features.

```{r}
plot(mpsz)
```

The code chunk below only plots the geometry.

```{r}
plot(st_geometry(mpsz))
```

The code chunk below shows a specific attribute.

```{r}
plot(mpsz["PLN_AREA_N"])
```

## Working with Projection

### Assigning EPSG code to a simple feature data frame

The `st_crs()` shows coordinate system of `mpsz` simple feature data.

```{r}
st_crs(mpsz)
```

The code chunk below assign the correct EPSG code 3414 to data frame.

```{r}
mpsz3414 <- st_set_crs(mpsz, 3414)
```

The code chunk below checks the CRS.

```{r}
st_crs(mpsz3414)
```

### Transforming the projection of preschool from wgs84 to svy21

The code chunk below performs projection transformation.

```{r}
preschool3414 <- st_transform(preschool, crs = 3414)
```

## Importing and Converting an Aspatial Data

In this section, I learn how to import an aspatial data into R and convert it into simple feature data frame.

### Importing the aspatial data

The code chunk below imports csv file by using `read_csv()` and the output is a [tibble data frame](https://r4ds.had.co.nz/tibbles.html).

```{r}
listings <- read_csv("data/aspatial/listings.csv")
```

In this code chunk, `list()` is used instead of `glimpse()`.

```{r}
list(listings) 
```

### Creating a simple feature data frame from an aspatial data frame

The code chunk below converts listing data frame into simple feature data frame by using `st_as_sf()`.

```{r}
listings_sf <- st_as_sf(listings, coords = c("longitude", "latitude"), crs = 4326) %>%
  st_transform(crs = 3414)
```

The code chunk below checks the newly created simple feature data frame.

```{r}
glimpse(listings_sf)
```

## Geoprocessing with sf package

In this section, I learn to perform two geoprocessing functions, buffering and point in polygon count.

### Buffering

The code chunk below computes the 5-meter buffers.

```{r}
buffer_cycling <- st_buffer(cyclingpath, dist = 5, nQuadSegs = 30)
```

The code chunk below calculates the area of buffers.

```{r}
buffer_cycling$AREA <- st_area(buffer_cycling)
```

The code chunk below derives the total land involved.

```{r}
sum(buffer_cycling$AREA)
```

### Point-in-polygon count

The code chunk below identifies the pre-schools located in each PS by using `st_intersects()`. And calculates number of pre-schools in each PS by using `length()`.

```{r}
mpsz3414$`PreSch Count` <- lengths(st_intersects(mpsz3414, preschool3414))
```

The code chunk below checks the summary statistics of newly derived *PreSch Count*.

```{r}
summary(mpsz3414$`PreSch Count`)
```

The code chunk below shows the list of PS with most number of pre-school.

```{r}
top_n(mpsz3414, 1, `PreSch Count`)
```

The code chunk below derives the area of each PS.

```{r}
mpsz3414$Area <- mpsz3414 %>%
  st_area()
```

The code chunk below computes the density of pre-school.

```{r}
mpsz3414 <- mpsz3414 %>%
  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)
```

## Explorotary Data Analysis (EDA)

In this section, I learn how to use [ggplot2](https://ggplot2.tidyverse.org/) functions to create graphs for EDA purposes.

The code chunk below plot a histogram distribution.

```{r}
hist(mpsz3414$`PreSch Density`)
```

The code chunk below uses *ggplot2* functions to improve quality and customization.

```{r}
ggplot(data = mpsz3414, 
       aes(x = as.numeric(`PreSch Density`)))+
  geom_histogram(bins = 20, color = "black", fill = "light blue") +
  labs(title = "Are pre-school even distributed in Singapore?",
       subtitle = "There are many planning sub-zones with a single pre-school, on the other hand, \nthere are two planning sub-zones with at least 20 pre-schools",
      x = "Pre-school density (per km sq)", y = "Frequency")
```

The code chunk below plots a scatterplot showing the relationship between density and count.

```{r}
ggplot(data=mpsz3414, 
       aes(x = as.numeric(`PreSch Density`), y = `PreSch Count`))+
  geom_point(color = "black", fill = "light blue") +
  xlim(0, 40) +
  ylim(0, 40) +
  labs(title = "Relationship between Pre-school Density and Pre-school Count",
       x = "Pre-school density (per km sq)", y = "Pre-school count")
```
