---
title: "Hands-on Exercise 3: Geographical Segmentation with Spatially Constrained Clustering Techniques"
execute: 
  warning: false
format: html
editor: visual
---

## Overview

In this hands-on exercise, I learn how to delineate homogeneous region by using geographically referenced multivariate data. The analysis include hierarchical cluster analysis and spatially constrained cluster analysis.

## Getting Started

In this exercise, the following R packages will be used:

-   [**sf**](https://r-spatial.github.io/sf/) for importing, managing, and processing geospatial data

-   [**spdep**](https://cran.r-project.org/web/packages/spdep/spdep.pdf) for computing spatial weights, global and local spatial autocorrelation statistics

-   [**rgdal**](https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=&cad=rja&uact=8&ved=2ahUKEwjlu57Cgtv7AhVVSmwGHcpuCHsQFnoECBEQAQ&url=https%3A%2F%2Fcran.r-project.org%2Fpackage%3Drgdal&usg=AOvVaw0HmVZ05p3MPzWi8G7OW4tH) for providing bindings to the 'Geospatial' Data Abstraction Library (GDAL) and access to projection operation from the 'PROJ' library.

-   [**tidyverse**](https://www.tidyverse.org/packages/) for importing, wrangling, and visualizing data

    -   [**tidyr**](https://tidyr.tidyverse.org/) for manipulating data

    -   [**dplyr**](https://dplyr.tidyverse.org/) for transforming data

    -   [**ggplot2**](https://ggplot2.tidyverse.org/) for visualizing data

-   [**tmap**](https://cran.r-project.org/web/packages/tmap/vignettes/tmap-getstarted.html) for plotting cartographic quality choropleth map

-   [**corrplot**](https://cran.r-project.org/web/packages/corrplot/vignettes/corrplot-intro.html) for providing a visual exploratory tool on correlation matrix that supports automatic variable reordering to help detect hidden patterns among variables

-   [**ggpubr**](https://www.rdocumentation.org/packages/ggpubr/versions/0.1.1) for providing some easy-to-use functions for creating and customizing **ggplot2**

-   [**heatmaply**](https://www.rdocumentation.org/packages/heatmaply/versions/1.4.0/topics/heatmaply) for visualizing high-dimensional data, in which a table of numbers are encoded as a grid of colored cells

-   [**cluster**](https://cran.r-project.org/web/packages/cluster/index.html) and [**ClustGeo**](https://cran.r-project.org/web/packages/ClustGeo/index.html) for cluster analysis

The code chunk below installs and launch the R packages into R environment.

```{r}
pacman::p_load(rgdal, spdep, tmap, sf, 
               ggpubr, cluster, factoextra, NbClust,
               heatmaply, corrplot, psych, tidyverse)
```

## Importing Data into R environment

### Importing geospatial data into R environment

The code chunk below uses [`st_read()`](https://cran.r-project.org/web/packages/sf/vignettes/sf2.html) of **sf** package to import Myanmar Township Boundary GIS data shapefile *myanmar_township_boundaries* into R and save as simple feature data frame called *shan_sf*.

[`filter()`](https://dplyr.tidyverse.org/reference/filter.html) of **dplyr** package is used to extract records according to location.

```{r}
shan_sf <- st_read(dsn = "data/geospatial", 
                   layer = "myanmar_township_boundaries") %>%
  filter(ST %in% c("Shan (East)", "Shan (North)", "Shan (South)"))
```

The code chunk below views the content of *shan_sf* simple features data frame.

```{r}
shan_sf
```

The code chunk below uses `glimpse()` to reveal the data type of fields.

```{r}
glimpse(shan_sf)
```

### Importing aspatial data into R environment

The code chunk below uses read_csv() of readr package to import *Shan-ICT* csv file and save in R\'s tibble data.frame format called *ict*.

```{r}
ict <- read_csv ("data/aspatial/Shan-ICT.csv")
```

The code chunk below uses `summary()` to reveal the summary statistics.

```{r}
summary(ict)
```

### Deriving new variables using dplyr package

The code chunk below derives the penetration rate of each ICT variable.

```{r}
ict_derived <- ict %>%
  mutate(`RADIO_PR` = `Radio`/`Total households`*1000) %>%
  mutate(`TV_PR` = `Television`/`Total households`*1000) %>%
  mutate(`LLPHONE_PR` = `Land line phone`/`Total households`*1000) %>%
  mutate(`MPHONE_PR` = `Mobile phone`/`Total households`*1000) %>%
  mutate(`COMPUTER_PR` = `Computer`/`Total households`*1000) %>%
  mutate(`INTERNET_PR` = `Internet at home`/`Total households`*1000) %>%
  rename(`DT_PCODE` =`District Pcode`,`DT`=`District Name`,
         `TS_PCODE`=`Township Pcode`, `TS`=`Township Name`,
         `TT_HOUSEHOLDS`=`Total households`,
         `RADIO`=`Radio`, `TV`=`Television`, 
         `LLPHONE`=`Land line phone`, `MPHONE`=`Mobile phone`,
         `COMPUTER`=`Computer`, `INTERNET`=`Internet at home`) 
```

The code chunk below uses `summary()` to reveal the summary statistics.

```{r}
summary(ict_derived)
```

## Exploratory Data Analysis (EDA)

### EDA using statistical graphics

The code chunk below uses `geom_histogram()` to plot histogram to identify the overall distribution of data values.

```{r}
ggplot(data=ict_derived, 
       aes(x=`RADIO`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")
```

The code chunk below uses `geom_boxplot()` to plot boxplot to detect outliers.

```{r}
ggplot(data=ict_derived, 
       aes(x=`RADIO`)) +
  geom_boxplot(color="black", 
               fill="light blue")
```

The code chunk below uses `geom_histogram()` to plot distribution of newly derived variables (Radio penetration rate).

```{r}
ggplot(data=ict_derived, 
       aes(x=`RADIO_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")
```

The code chunk below uses `geom_boxplot()` to plot boxplot to detect outliers of newly derived variables.

```{r}
ggplot(data=ict_derived, 
       aes(x=`RADIO_PR`)) +
  geom_boxplot(color="black", 
               fill="light blue")
```

The code chunk below plots multiple histograms to reveal the distribution of selcted variables.

[`ggarange()`](https://rpkgs.datanovia.com/ggpubr/reference/ggarrange.html) of **ggpubr** package is used to group the histograms together.

```{r}
radio <- ggplot(data=ict_derived, 
             aes(x= `RADIO_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")

tv <- ggplot(data=ict_derived, 
             aes(x= `TV_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")

llphone <- ggplot(data=ict_derived, 
             aes(x= `LLPHONE_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")

mphone <- ggplot(data=ict_derived, 
             aes(x= `MPHONE_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")

computer <- ggplot(data=ict_derived, 
             aes(x= `COMPUTER_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")

internet <- ggplot(data=ict_derived, 
             aes(x= `INTERNET_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")

ggarrange(radio, tv, llphone, mphone, computer, internet, 
          ncol = 3, 
          nrow = 2)
```

### EDA using choropleth map

#### Joining geospatial data with aspatial data

The code chunk below uses [`left_join()`](https://dplyr.tidyverse.org/reference/join.tbl_df.html) of **dplyr** package to combine *shan_sf* and *ict_derived* by column field "*TS_PCODE*". *shan_sf* is base data object and *ict_derived* is the join table.

```{r}
shan_sf <- left_join(shan_sf, 
                     ict_derived, 
                     by=c("TS_PCODE"="TS_PCODE"))
```

#### Preparing a choropleth map

The code chunk below uses [`qtm()`](https://search.r-project.org/CRAN/refmans/tmap/html/qtm.html) of **tmap** package to plot a choropleth map showing the distribution of Radio penetration rate of Shan State at township level.

```{r}
qtm(shan_sf, "RADIO_PR")
```

The code chunk below plots two choropleth maps, one for the total number of households (i.e.Â TT_HOUSEHOLDS.map) and one for the total number of household with Radio (RADIO.map).

```{r}
TT_HOUSEHOLDS.map <- tm_shape(shan_sf) + 
  tm_fill(col = "TT_HOUSEHOLDS",
          n = 5,
          style = "jenks", 
          title = "Total households") + 
  tm_borders(alpha = 0.5) 

RADIO.map <- tm_shape(shan_sf) + 
  tm_fill(col = "RADIO",
          n = 5,
          style = "jenks",
          title = "Number Radio ") + 
  tm_borders(alpha = 0.5) 

tmap_arrange(TT_HOUSEHOLDS.map, RADIO.map,
             asp=NA, ncol=2)
```

The code chunk below plots the choropleth maps showing the dsitribution of total number of households and Radio penetration rate.

```{r}
tm_shape(shan_sf) +
    tm_polygons(c("TT_HOUSEHOLDS", "RADIO_PR"),
                style="jenks") +
    tm_facets(sync = TRUE, ncol = 2) +
  tm_legend(legend.position = c("right", "bottom"))+
  tm_layout(outer.margins=0, asp=0)
```

## Correlation Analysis

The code chunk below uses [`corrplot.mixed()`](https://cran.r-project.org/web/packages/corrplot/corrplot.pdf)of [**corrplot**](https://cran.r-project.org/web/packages/corrplot/vignettes/corrplot-intro.html) package to visualise and analyse the correlation of the input variables.

```{r}
cluster_vars.cor = cor(ict_derived[,12:17])
corrplot.mixed(cluster_vars.cor,
         lower = "ellipse", 
               upper = "number",
               tl.pos = "lt",
               diag = "l",
               tl.col = "black")
```

## Hierarchy Cluster Analysis

In this section, I learn how to perform hierarchical cluster analysis.

### Extracting clustering variables

The code chunk below extracts the clustering variables from *shan_sf*.

```{r}
cluster_vars <- shan_sf %>%
  st_set_geometry(NULL) %>%
  select("TS.x", "RADIO_PR", "TV_PR", "LLPHONE_PR", "MPHONE_PR", "COMPUTER_PR")
head(cluster_vars,10)
```

The code chunk below uses [`row.names()`](https://stat.ethz.ch/R-manual/R-devel/library/base/html/row.names.html) to change the rows by township name instead of row number.

```{r}
row.names(cluster_vars) <- cluster_vars$"TS.x"
head(cluster_vars,10)
```

The code chunk below keeps field 2 to 6, deleting TS.x field.

```{r}
shan_ict <- select(cluster_vars, c(2:6))
head(shan_ict, 10)
```

### Min-Max standardization

The code chunk below uses [`normalize()`](https://www.rdocumentation.org/packages/BBmisc/versions/1.10/topics/normalize) of **heatmaply** package to standardize the clustering variables by Min-Max method.

```{r}
shan_ict.std <- normalize(shan_ict)
summary(shan_ict.std)
```

### Z-score standardization

The code chunk below uses [`scale()`](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/scale) of **Base R** to standardize the clustering variables by Z-score method.

[`describe()`](https://www.rdocumentation.org/packages/Hmisc/versions/4.4-0/topics/describe) of [**psych**](https://cran.r-project.org/web/packages/psych/) package is used to provide standard deviation.

```{r}
shan_ict.z <- scale(shan_ict)
describe(shan_ict.z)
```

### Visualizing the standardized clustering variables

The code chunk below plot the scaled *Radio_PR* field.

```{r}
r <- ggplot(data=ict_derived, 
             aes(x= `RADIO_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")

shan_ict_s_df <- as.data.frame(shan_ict.std)
s <- ggplot(data=shan_ict_s_df, 
       aes(x=`RADIO_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  ggtitle("Min-Max Standardisation")

shan_ict_z_df <- as.data.frame(shan_ict.z)
z <- ggplot(data=shan_ict_z_df, 
       aes(x=`RADIO_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  ggtitle("Z-score Standardisation")

ggarrange(r, s, z,
          ncol = 3,
          nrow = 1)
```

### Computing proximity matrix

The code chunk below uses [`dist()`](https://stat.ethz.ch/R-manual/R-devel/library/stats/html/dist.html) of **R** to calculate distance matrix by euclidean method.

```{r}
proxmat <- dist(shan_ict, method = 'euclidean')
proxmat
```

### Computing hierarchical clustering 

The code chunk below uses [`hclust()`](https://stat.ethz.ch/R-manual/R-devel/library/stats/html/hclust.html) of **R stats** to perform hierarchical cluster analysis by ward.D method.

```{r}
hclust_ward <- hclust(proxmat, method = 'ward.D')
```

The code chunk below uses `plot()` of **R Graphics** to plot hierarchical tree.

```{r}
plot(hclust_ward, cex = 0.6)
```

### Selecting the optimal clustering algorithm

The code chunk below uses [`agnes()`](https://www.rdocumentation.org/packages/cluster/versions/2.1.0/topics/agnes) of [**cluster**](https://cran.r-project.org/web/packages/cluster/) package to identify stronger clustering structures when performing hierarchical analysis.

```{r}
m <- c( "average", "single", "complete", "ward")
names(m) <- c( "average", "single", "complete", "ward")

ac <- function(x) {
  agnes(shan_ict, method = x)$ac
}

map_dbl(m, ac)
```

### Determining optimal clusters using Gap Statistic Method

The code chunk below uses [`clusGap()`](https://www.rdocumentation.org/packages/cluster/versions/2.1.0/topics/clusGap) of **cluster** package to compute the gap statistic.

```{r}
set.seed(12345)
gap_stat <- clusGap(shan_ict, 
                    FUN = hcut, 
                    nstart = 25, 
                    K.max = 10, 
                    B = 50)

print(gap_stat, method = "firstmax")
```

The code chunk below uses [`fviz_gap_stat()`](https://rpkgs.datanovia.com/factoextra/reference/fviz_nbclust.html) of **factoextra** package to visualize the gap statistic.

```{r}
fviz_gap_stat(gap_stat)
```

### Interpreting the dendrograms

The code chunk below uses [`rect.hclust()`](https://stat.ethz.ch/R-manual/R-devel/library/stats/html/rect.hclust.html) of **R stats** to draw the dendrogram with a border around the selected clusters. border argument is used to specify the rectangles' border colors.

```{r}
plot(hclust_ward, cex = 0.6)
rect.hclust(hclust_ward, 
            k = 6, 
            border = 2:5)
```

### Visually-driven hierarchical clustering analysis

The code chunks below performs visually-driven hiearchical clustering analysis.

The code chunk below uses `data.matrix()` to transform *shan_ict* data frame into data matrix.

```{r}
shan_ict_mat <- data.matrix(shan_ict)
```

The code chunk below uses [`heatmaply()`](https://talgalili.github.io/heatmaply/reference/heatmaply.html) of **heatmaply** package to build an interactive cluster heatmap.

```{r}
heatmaply(normalize(shan_ict_mat),
          Colv=NA,
          dist_method = "euclidean",
          hclust_method = "ward.D",
          seriate = "OLO",
          colors = Blues,
          k_row = 6,
          margins = c(NA,200,60,NA),
          fontsize_row = 4,
          fontsize_col = 5,
          main="Geographic Segmentation of Shan State by ICT indicators",
          xlab = "ICT Indicators",
          ylab = "Townships of Shan State"
          )
```

### Mapping the clusters formed

The code chunk below uses cutree() of R Base to derive a 6-cluster model after examining the dendragram above.

```{r}
groups <- as.factor(cutree(hclust_ward, k=6))
```

The code chunk below uses [`cbind()`](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/cbind) of [**mice**](https://cran.r-project.org/web/packages/mice/mice.pdf) package to append *groups* object onto *shan_sf* simple feature object.

`as,matrix()` converts groups into a matrix. `rename()` then renames *as.matrix.groups* as *CLUSTER*.

[`qtm()`](https://search.r-project.org/CRAN/refmans/tmap/html/qtm.html) of **tmap** package is used to plot a choropleth map showing the cluster formed.

```{r}
shan_sf_cluster <- cbind(shan_sf, as.matrix(groups)) %>%
  rename(`CLUSTER`=`as.matrix.groups.`)

qtm(shan_sf_cluster, "CLUSTER")
```

## Spatially Constrained Clustering - SKATER approach

In this section, I learn how to derive spatially constrained cluster.

### Converting into SpatialPolygonsDataFrame

The code chunk below uses [`as_Spatial()`](https://r-spatial.github.io/sf/reference/coerce-methods.html) of **sf** package to convert *shan_sf* into a SpatialPolygonDataFrame called *shan_sp*.

```{r}
shan_sp <- as_Spatial(shan_sf)
```

The code chunk below uses [`poly2nd()`](https://r-spatial.github.io/spdep/reference/poly2nb.html) of **spdep** package to compute the neighbours list from polygon list.

```{r}
shan.nb <- poly2nb(shan_sp)
summary(shan.nb)
```

The code chunk below plots the neighbors list on *shan_sp*.

```{r}
plot(shan_sp, 
     border=grey(.5))
plot(shan.nb, 
     coordinates(shan_sp), 
     col="blue", 
     add=TRUE)
```

### Calculating edge costs

The code chunk below uses[`nbcosts()`](https://r-spatial.github.io/spdep/reference/nbcosts.html) of **spdep** package to compute the cost of each edge, which is the distance between nodes.

```{r}
lcosts <- nbcosts(shan.nb, shan_ict)
```

The code chunk below uses [`nb2listw()`](https://r-spatial.github.io/spdep/reference/nb2listw.html) of **spdep** package to convert the neighbour list to a list weights object by specifying the *lcosts* computed above as the weights. "style" argument is set as "B" to make sure the cost values are not row-standardized.

```{r}
shan.w <- nb2listw(shan.nb, 
                   lcosts, 
                   style="B")
summary(shan.w)
```

### Computing minimum spanning tree

The code chunk below uses [`mstree()`](https://r-spatial.github.io/spdep/reference/mstree.html) of **spdep** package to compute minimum spanning tree.

`class()` and `dim()` check the class and dimension of *shan.mst*.

`head()` displays the content of *shan.mst*

```{r}
shan.mst <- mstree(shan.w)
class(shan.mst)
dim(shan.mst)
head(shan.mst)
```

The code chunk below plots the neighbors list on *shan_sp* and shows the observation number of the nodes.

```{r}
plot(shan_sp, border=gray(.5))
plot.mst(shan.mst, 
         coordinates(shan_sp), 
         col="blue", 
         cex.lab=0.7, 
         cex.circles=0.005, 
         add=TRUE)
```

### Computing spatially constrained clusters using SKATER method

The code chunk below uses [`skater()`](https://r-spatial.github.io/spdep/reference/skater.html) of **spdep** package to compute the spatially constrained cluster.

`str()` examines the content of *clust6*.

```{r}
clust6 <- skater(edges = shan.mst[,1:2], 
                 data = shan_ict, 
                 method = "euclidean", 
                 ncuts = 5)
str(clust6)
```

The code chunk below checks the cluster assignment.

```{r}
ccs6 <- clust6$groups
ccs6
table(ccs6)
```

The code chunk below plots the pruned tree that shows the five clusters on top of the townshop area.

```{r}
plot(shan_sp, border=gray(.5))
plot(clust6, 
     coordinates(shan_sp), 
     cex.lab=.7,
     groups.colors=c("red","green","blue", "brown", "pink"),
     cex.circles=0.005, 
     add=TRUE)
```

### Visualizing the clusters in choropleth map

The code chunk below plots the newly derived clusters by using SKATER method, and shows both the hierarchical clustering and spatially constrained hierarchical clustering maps.

```{r}
groups_mat <- as.matrix(clust6$groups)
shan_sf_spatialcluster <- cbind(shan_sf_cluster, as.factor(groups_mat)) %>%
  rename(`SP_CLUSTER`=`as.factor.groups_mat.`)

hclust.map <- qtm(shan_sf_cluster,
                  "CLUSTER") + 
  tm_borders(alpha = 0.5) 

shclust.map <- qtm(shan_sf_spatialcluster,
                   "SP_CLUSTER") + 
  tm_borders(alpha = 0.5) 

tmap_arrange(hclust.map, shclust.map,
             asp=NA, ncol=2)
```
