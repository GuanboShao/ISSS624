[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS624",
    "section": "",
    "text": "In this webpage, I am going to share with you my learning journey of geospatial analytics."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This website is intended for the presentation of ISSS614 Exercises. All contents are properties of SMU."
  },
  {
    "objectID": "Hands-on_Ex1.html",
    "href": "Hands-on_Ex1.html",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "This is the overview paragraph."
  },
  {
    "objectID": "Hands-on_Ex1.html#getting-started",
    "href": "Hands-on_Ex1.html#getting-started",
    "title": "Hands-on Exercise 1",
    "section": "Getting Started",
    "text": "Getting Started\nThis is the getting started paragraph."
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1.html",
    "href": "Hands-on_Ex1/Hands-on_Ex1.html",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "",
    "text": "In this hands-on exercise, I learn how to import and wrangling geospatial data using appropriate R packages."
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1.html#getting-started",
    "href": "Hands-on_Ex1/Hands-on_Ex1.html#getting-started",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "Getting Started",
    "text": "Getting Started\nThe code chunk below installs and loads sf and tidyverse packages into R environment.\n\npacman::p_load(sf, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1.html#importing-geospatial-data",
    "href": "Hands-on_Ex1/Hands-on_Ex1.html#importing-geospatial-data",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "Importing Geospatial Data",
    "text": "Importing Geospatial Data\n\nImporting polygon feature data\nThe code chunk below uses st_read() function to import shapefile as polygon feature data frame. dsn defines data path ad layer provides shapefile name.\n\nmpsz <- st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `D:\\GuanboShao\\ISSS624\\Hands-on_Ex1\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\n\nImporting polyline feature data in shapefile form\n\ncyclingpath = st_read(dsn = \"data/geospatial\", layer = \"CyclingPath\")\n\nReading layer `CyclingPath' from data source \n  `D:\\GuanboShao\\ISSS624\\Hands-on_Ex1\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 1625 features and 2 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: 12711.19 ymin: 28711.33 xmax: 42626.09 ymax: 48948.15\nProjected CRS: SVY21\n\n\n\n\nImporting GIS data in kml format\n\npreschool = st_read(\"data/geospatial/pre-schools-location-kml.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `D:\\GuanboShao\\ISSS624\\Hands-on_Ex1\\data\\geospatial\\pre-schools-location-kml.kml' \n  using driver `KML'\nSimple feature collection with 1359 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.248403 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1.html#checking-the-content-of-a-simple-feature-data-frame",
    "href": "Hands-on_Ex1/Hands-on_Ex1.html#checking-the-content-of-a-simple-feature-data-frame",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "Checking the Content of A Simple Feature Data Frame",
    "text": "Checking the Content of A Simple Feature Data Frame\nIn this section, I learn different ways to retrieve information related to the content of a simple feature data frame.\n\nWorking with st_geometry()\nThe code chunk below uses st_geometry() to retrieve the geometry list-column.\n\nst_geometry(mpsz)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\nMULTIPOLYGON (((31495.56 30140.01, 31980.96 296...\n\n\nMULTIPOLYGON (((29092.28 30021.89, 29119.64 300...\n\n\nMULTIPOLYGON (((29932.33 29879.12, 29947.32 298...\n\n\nMULTIPOLYGON (((27131.28 30059.73, 27088.33 297...\n\n\nMULTIPOLYGON (((26451.03 30396.46, 26440.47 303...\n\n\n\n\nWorking with glimpse()\nThe glimpse() gives data types of each fields.\n\nglimpse(mpsz)\n\nRows: 323\nColumns: 16\n$ OBJECTID   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO <int> 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  <chr> \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  <chr> \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     <chr> \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N <chr> \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C <chr> \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   <chr> \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   <chr> \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    <chr> \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D <date> 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     <dbl> 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     <dbl> 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng <dbl> 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area <dbl> 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n\n\n\n\nWorking with head()\nThe head() gives complete information of a feature object.\n\nhead(mpsz, n = 5)  \n\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30..."
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1.html#plotting-the-geospatial-data",
    "href": "Hands-on_Ex1/Hands-on_Ex1.html#plotting-the-geospatial-data",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "Plotting the Geospatial Data",
    "text": "Plotting the Geospatial Data\nThe code chunk below plot the visualization of geospatial features.\n\nplot(mpsz)\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\nThe code chunk below only plots the geometry.\n\nplot(st_geometry(mpsz))\n\n\n\n\nThe code chunk below shows a specific attribute.\n\nplot(mpsz[\"PLN_AREA_N\"])"
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1.html#working-with-projection",
    "href": "Hands-on_Ex1/Hands-on_Ex1.html#working-with-projection",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "Working with Projection",
    "text": "Working with Projection\n\nAssigning EPSG code to a simple feature data frame\nThe st_crs() shows coordinate system of mpsz simple feature data.\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nThe code chunk below assign the correct EPSG code 3414 to data frame.\n\nmpsz3414 <- st_set_crs(mpsz, 3414)\n\nWarning: st_crs<- : replacing crs does not reproject data; use st_transform for\nthat\n\n\nThe code chunk below checks the CRS.\n\nst_crs(mpsz3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\n\nTransforming the projection of preschool from wgs84 to svy21\nThe code chunk below performs projection transformation.\n\npreschool3414 <- st_transform(preschool, crs = 3414)"
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1.html#importing-and-converting-an-aspatial-data",
    "href": "Hands-on_Ex1/Hands-on_Ex1.html#importing-and-converting-an-aspatial-data",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "Importing and Converting an Aspatial Data",
    "text": "Importing and Converting an Aspatial Data\nIn this section, I learn how to import an aspatial data into R and convert it into simple feature data frame.\n\nImporting the aspatial data\nThe code chunk below imports csv file by using read_csv() and the output is a tibble data frame.\n\nlistings <- read_csv(\"data/aspatial/listings.csv\")\n\nRows: 4252 Columns: 16\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (5): name, host_name, neighbourhood_group, neighbourhood, room_type\ndbl  (10): id, host_id, latitude, longitude, price, minimum_nights, number_o...\ndate  (1): last_review\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nIn this code chunk, list() is used instead of glimpse().\n\nlist(listings) \n\n[[1]]\n# A tibble: 4,252 × 16\n       id name     host_id host_…¹ neigh…² neigh…³ latit…⁴ longi…⁵ room_…⁶ price\n    <dbl> <chr>      <dbl> <chr>   <chr>   <chr>     <dbl>   <dbl> <chr>   <dbl>\n 1  50646 Pleasan…  227796 Sujatha Centra… Bukit …    1.33    104. Privat…    80\n 2  71609 Ensuite…  367042 Belinda East R… Tampin…    1.35    104. Privat…   178\n 3  71896 B&B  Ro…  367042 Belinda East R… Tampin…    1.35    104. Privat…    81\n 4  71903 Room 2-…  367042 Belinda East R… Tampin…    1.35    104. Privat…    81\n 5 275343 Conveni… 1439258 Joyce   Centra… Bukit …    1.29    104. Privat…    52\n 6 275344 15 mins… 1439258 Joyce   Centra… Bukit …    1.29    104. Privat…    40\n 7 294281 5 mins … 1521514 Elizab… Centra… Newton     1.31    104. Privat…    72\n 8 301247 Nice ro… 1552002 Rahul   Centra… Geylang    1.32    104. Privat…    41\n 9 324945 20 Mins… 1439258 Joyce   Centra… Bukit …    1.29    104. Privat…    49\n10 330089 Accomo@… 1439258 Joyce   Centra… Bukit …    1.29    104. Privat…    49\n# … with 4,242 more rows, 6 more variables: minimum_nights <dbl>,\n#   number_of_reviews <dbl>, last_review <date>, reviews_per_month <dbl>,\n#   calculated_host_listings_count <dbl>, availability_365 <dbl>, and\n#   abbreviated variable names ¹​host_name, ²​neighbourhood_group,\n#   ³​neighbourhood, ⁴​latitude, ⁵​longitude, ⁶​room_type\n\n\n\n\nCreating a simple feature data frame from an aspatial data frame\nThe code chunk below converts listing data frame into simple feature data frame by using st_as_sf().\n\nlistings_sf <- st_as_sf(listings, coords = c(\"longitude\", \"latitude\"), crs = 4326) %>%\n  st_transform(crs = 3414)\n\nThe code chunk below checks the newly created simple feature data frame.\n\nglimpse(listings_sf)\n\nRows: 4,252\nColumns: 15\n$ id                             <dbl> 50646, 71609, 71896, 71903, 275343, 275…\n$ name                           <chr> \"Pleasant Room along Bukit Timah\", \"Ens…\n$ host_id                        <dbl> 227796, 367042, 367042, 367042, 1439258…\n$ host_name                      <chr> \"Sujatha\", \"Belinda\", \"Belinda\", \"Belin…\n$ neighbourhood_group            <chr> \"Central Region\", \"East Region\", \"East …\n$ neighbourhood                  <chr> \"Bukit Timah\", \"Tampines\", \"Tampines\", …\n$ room_type                      <chr> \"Private room\", \"Private room\", \"Privat…\n$ price                          <dbl> 80, 178, 81, 81, 52, 40, 72, 41, 49, 49…\n$ minimum_nights                 <dbl> 90, 90, 90, 90, 14, 14, 90, 8, 14, 14, …\n$ number_of_reviews              <dbl> 18, 20, 24, 48, 20, 13, 133, 105, 14, 1…\n$ last_review                    <date> 2014-07-08, 2019-12-28, 2014-12-10, 20…\n$ reviews_per_month              <dbl> 0.22, 0.28, 0.33, 0.67, 0.20, 0.16, 1.2…\n$ calculated_host_listings_count <dbl> 1, 4, 4, 4, 50, 50, 7, 1, 50, 50, 50, 4…\n$ availability_365               <dbl> 365, 365, 365, 365, 353, 364, 365, 90, …\n$ geometry                       <POINT [m]> POINT (22646.02 35167.9), POINT (…"
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1.html#geoprocessing-with-sf-package",
    "href": "Hands-on_Ex1/Hands-on_Ex1.html#geoprocessing-with-sf-package",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "Geoprocessing with sf Package",
    "text": "Geoprocessing with sf Package\nIn this section, I learn to perform two geoprocessing functions, buffering and point in polygon count.\n\nBuffering\nThe code chunk below computes the 5-meter buffers.\n\nbuffer_cycling <- st_buffer(cyclingpath, dist = 5, nQuadSegs = 30)\n\nThe code chunk below calculates the area of buffers.\n\nbuffer_cycling$AREA <- st_area(buffer_cycling)\n\nThe code chunk below derives the total land involved.\n\nsum(buffer_cycling$AREA)\n\n773143.9 [m^2]\n\n\n\n\nPoint-in-polygon count\nThe code chunk below identifies the pre-schools located in each PS by using st_intersects(). And calculates number of pre-schools in each PS by using length().\n\nmpsz3414$`PreSch Count` <- lengths(st_intersects(mpsz3414, preschool3414))\n\nThe code chunk below checks the summary statistics of newly derived PreSch Count.\n\nsummary(mpsz3414$`PreSch Count`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  0.000   0.000   2.000   4.207   6.000  37.000 \n\n\nThe code chunk below shows the list of PS with most number of pre-school.\n\ntop_n(mpsz3414, 1, `PreSch Count`)\n\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 23449.05 ymin: 46001.23 xmax: 25594.22 ymax: 47996.47\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      290          3 WOODLANDS EAST    WDSZ03      N  WOODLANDS         WD\n      REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR\n1 NORTH REGION       NR C90769E43EE6B0F2 2014-12-05 24506.64 46991.63\n  SHAPE_Leng SHAPE_Area                       geometry PreSch Count\n1   6603.608    2553464 MULTIPOLYGON (((24786.75 46...           37\n\n\nThe code chunk below derives the area of each PS.\n\nmpsz3414$Area <- mpsz3414 %>%\n  st_area()\n\nThe code chunk below computes the density of pre-school.\n\nmpsz3414 <- mpsz3414 %>%\n  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)"
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1.html#exploratary-data-analysis-eda",
    "href": "Hands-on_Ex1/Hands-on_Ex1.html#exploratary-data-analysis-eda",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "Exploratary Data Analysis (EDA)",
    "text": "Exploratary Data Analysis (EDA)\n\nhist(mpsz3414$`PreSch Density`)\n\n\n\n\n\nggplot(data = mpsz3414, \n       aes(x = as.numeric(`PreSch Density`)))+\n  geom_histogram(bins = 20, \n                 color = \"black\", \n                 fill = \"light blue\") +\n  labs(title = \"Are pre-school even distributed in Singapore?\",\n       subtitle = \"There are many planning sub-zones with a single pre-school, on the other hand, \\nthere are two planning sub-zones with at least 20 pre-schools\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Frequency\")"
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1_2.html",
    "href": "Hands-on_Ex1/Hands-on_Ex1_2.html",
    "title": "Hands-on Exercise 1: Choropleth Mapping with R",
    "section": "",
    "text": "In this hands-on exercise, I learn how to import and create choropleth mapping using appropriate R packages."
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1_2.html#getting-started",
    "href": "Hands-on_Ex1/Hands-on_Ex1_2.html#getting-started",
    "title": "Hands-on Exercise 1: Choropleth Mapping with R",
    "section": "Getting Started",
    "text": "Getting Started\nThe code chunk below install and load tmap, tidyverse and sf packages into R environment.\n\npacman::p_load(sf, tmap, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1_2.html#importing-data-into-r",
    "href": "Hands-on_Ex1/Hands-on_Ex1_2.html#importing-data-into-r",
    "title": "Hands-on Exercise 1: Choropleth Mapping with R",
    "section": "Importing Data into R",
    "text": "Importing Data into R\n\nImporting Geospatial Data into R\nThe code chunk below uses st_read() function to import shapefile as simple feature data frame.\n\nmpsz <- st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `D:\\GuanboShao\\ISSS624\\Hands-on_Ex1\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nThe code chunk below shows the content.\n\nmpsz\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n\n\n\n\nImporting Attribute Data into R\nThe code chunk below imports csv file.\n\npopdata <- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")\n\nRows: 984656 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, TOD\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nData Preparation\nIn this section, I load year 2020 PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY variables.\n\nData wrangling\nThe code chunk below uses data wrangling and transformation functions.\n\npopdata2020 <- popdata %>%\n  filter(Time == 2020) %>%\n  group_by(PA, SZ, AG) %>%\n  summarise(`POP` = sum(`Pop`)) %>%\n  ungroup()%>%\n  pivot_wider(names_from=AG, values_from=POP) %>%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %>%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11]) +\nrowSums(.[13:15]))%>%\nmutate(`AGED`=rowSums(.[16:21])) %>%\nmutate(`TOTAL`=rowSums(.[3:21])) %>%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %>%\n  select(`PA`, `SZ`, `YOUNG`, `ECONOMY ACTIVE`, `AGED`, `TOTAL`, `DEPENDENCY`)\n\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n\n\n\n\nJoining the attribute data and geospatial data\nThe code chunk below converts values in PA and SZ fields to uppercase.\n\npopdata2020 <- popdata2020 %>%\n  mutate_at(.vars = vars(PA, SZ), .funs = funs(toupper)) %>%\n  filter(`ECONOMY ACTIVE` > 0)\n\nWarning: `funs()` was deprecated in dplyr 0.8.0.\nℹ Please use a list of either functions or lambdas:\n\n# Simple named list: list(mean = mean, median = median)\n\n# Auto named with `tibble::lst()`: tibble::lst(mean, median)\n\n# Using lambdas list(~ mean(., trim = .2), ~ median(., na.rm = TRUE))\n\n\nThe code chunk below uses left_join() to join geographical data and attribute table. Simple feature data frame is used as left data table.\n\nmpsz_pop2020 <- left_join(mpsz, popdata2020, by = c(\"SUBZONE_N\" = \"SZ\"))\n\n\nwrite_rds(mpsz_pop2020, \"data/rds/mpszpop2020.rds\")"
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1_2.html#choropleth-mapping-geospatial-data-using-tmap",
    "href": "Hands-on_Ex1/Hands-on_Ex1_2.html#choropleth-mapping-geospatial-data-using-tmap",
    "title": "Hands-on Exercise 1: Choropleth Mapping with R",
    "section": "Choropleth Mapping Geospatial Data Using tmap",
    "text": "Choropleth Mapping Geospatial Data Using tmap\nIn this section, I learn how to plot thematic map using qtm() and tmap elements.\n\nPlotting a choropleth map quickly using qtm()\nThe code chunk below draws a standard choropleth map. tmap_mode() with “plot” produces a static map, with “view” produces a interactive map.\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nqtm(mpsz_pop2020, fill = \"DEPENDENCY\")\n\n\n\n\n\n\nCreating a choropleth map using tmap’s elements\nIn the code chunk below, tmap elements draws a high quality cartographic choropleth map.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", style = \"quantile\", palette = \"Blues\", title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\", main.title.position = \"center\", main.title.size = 1.2, legend.height = 0.45, legend.width = 0.35, frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type =\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", position = c(\"left\", \"bottom\"))\n\n\n\n\n\nDrawing a base map\nIn the code chunk below, tm_shape() defines input data, tm_polygons() draws polygons.\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons()\n\n\n\n\n\n\nDrawing a choropleth map using tm_polygons()\nThe code chunk below assigns “DEPENDENCY” as the target variables.\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons(\"DEPENDENCY\")\n\n\n\n\n\n\nDrawing a choropleth map using tm_fill() and tm_border()\nThe code chunk below draws choropleth map using tm_fill().\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\")\n\n\n\n\nThe code chunk below adds boundary.\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders(lwd = 0.1, alpha = 1)\n\n\n\n\n\n\n\nData classification methods of tmap\n\nPlotting choropleth maps with built-in classification methods\nThe code chunk below shows a quantile data classification using 5 classes.\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\", n = 5, style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\", n = 2, style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\", n = 10, style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\", n = 20, style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nThe code chunk below uses equal data classification method.\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\", n = 5, style = \"equal\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nThe code chunk below uses quantile data classification method.\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\", n = 5, style = \"quantile\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nThe code chunk below uses kmeans data classification method.\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\", n = 5, style = \"kmeans\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nThe code chunk below uses hclust data classification method.\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\", n = 5, style = \"hclust\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nThe code chunk below uses fisher data classification method.\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\", n = 5, style = \"fisher\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\nPlotting choropleth map with custom break\nThe code chunk below displays the descriptive statistics of DEPENDENCY field.\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.0000  0.6519  0.7025  0.7742  0.7645 19.0000      92 \n\n\nThe code chunk below plots choropleth map with breaks vector.\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\", breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\n  tm_borders(alpha = 0.5)\n\nWarning: Values have found that are higher than the highest break\n\n\n\n\n\n\n\n\nColor Scheme\n\nUsing ColorBrewer palette\nThe code chunk below changes color.\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\", n = 6, style = \"quantile\", palette = \"Blues\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nTo reverse color shading, add “-” prefix.\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\", style = \"quantile\", palette = \"-Greens\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\nMap Layouts\n\nMap Legend\nThe code chunk below changes the placement, format, and appearance of the legend.\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\", style = \"jenks\", palette = \"Blues\", \n          legend.hist = TRUE, legend.is.portrait = TRUE, legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\", main.title.position = \"center\", main.title.size = 1,\n            legend.height = 0.45, legend.width = 0.35,\n            legend.outside = FALSE, legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\nMap style\nThe code chunk below shows classic style.\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\", style = \"quantile\", palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n\ntmap style set to \"classic\"\n\n\nother available styles are: \"white\", \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"watercolor\" \n\n\n\n\n\n\n\nCartographic Furniture\nThe code chunk below adds compass, scale bar and grid lines.\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\", style = \"quantile\", palette = \"Blues\",\n          title = \"No. of persons\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\", main.title.size = 1.2,\n            legend.height = 0.45, legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type = \"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\nThe code chunk below resets the default style.\n\ntmap_style(\"white\")\n\ntmap style set to \"white\"\n\n\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\n\n\n\nDrawing Small Multiple Choropleth Maps\nIn this section, I learn how to plot facet maps, which composed of many small maps.\n\nBy assigning multiple values to at least one of the aesthetic arguments\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(c(\"YOUNG\", \"AGED\"), style = \"equal\", palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n\ntmap style set to \"white\"\n\n\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\n\n\n\n\ntm_shape(mpsz_pop2020) + \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"), style = c(\"equal\", \"quantile\"), palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n\n\n\n\n\n\nBy defining a group-by variable in tm_facets()\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\", style = \"quantile\", palette = \"Blues\", thres.poly = 0) + \n  tm_facets(by = \"REGION_N\", free.coords = TRUE, drop.shapes = TRUE) +\n  tm_layout(legend.show = FALSE, title.position = c(\"center\", \"center\"), title.size = 20) +\n  tm_borders(alpha = 0.5)\n\nWarning: The argument drop.shapes has been renamed to drop.units, and is\ntherefore deprecated\n\n\n\n\n\n\n\nBy creating multiple stand-alone maps with tmap_arrange()\n\nyoungmap <- tm_shape(mpsz_pop2020) + \n  tm_polygons(\"YOUNG\", style = \"quantile\", palette = \"Blues\")\n\nagedmap <- tm_shape(mpsz_pop2020) + \n  tm_polygons(\"AGED\", style = \"quantile\", palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp = 1, ncol = 2)\n\n\n\n\n\n\n\nMapping Spatial Object Meeting a Selection Criterion\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N == \"CENTRAL REGION\", ]) +\n  tm_fill(\"DEPENDENCY\", style = \"quantile\", palette = \"Blues\", \n          legend.hist = TRUE, legend.is.portrait = TRUE, legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE, legend.height = 0.45,\n            legend.width = 5.0, legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\nWarning in pre_process_gt(x, interactive = interactive, orig_crs =\ngm$shape.orig_crs): legend.width controls the width of the legend within a map.\nPlease use legend.outside.size to control the width of the outside legend"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex1/In-class_Ex1.html",
    "href": "In-class_Ex/In-class_Ex1/In-class_Ex1.html",
    "title": "In-class Exercise 1",
    "section": "",
    "text": "In this in-class exercise, I learn how to import data, perform relational join, compute spatial weights, and calculate spatially lagged variables."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#getting-started",
    "href": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#getting-started",
    "title": "In-class Exercise 1",
    "section": "Getting Started",
    "text": "Getting Started\nThe code chunk below will install and load spdep, sf, tmap and tidyverse packages.\n\npacman::p_load(spdep, sf, tmap, tidyverse)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#importing-geospatial-data",
    "href": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#importing-geospatial-data",
    "title": "In-class Exercise 1",
    "section": "Importing Geospatial Data",
    "text": "Importing Geospatial Data\n\nImporting shapefile into R\nThis code chunk imports Hunan shapefile into R by using st_read().\n\nhunan <- st_read(dsn = \"data/geospatial\", layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `D:\\GuanboShao\\ISSS624\\In-class_Ex\\In-class_Ex1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\nImporting csv file into R\n\nhunan2012 <- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nPerforming relational join\nThe code chunk below updates the attribute table of hunan’s spatial polygons data frame with the attribute fields of hunan2012 data frame.\n\nhunan <- left_join(hunan, hunan2012)\n\nJoining, by = \"County\""
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1.html#explorotary-data-analysis-eda",
    "href": "Hands-on_Ex1/Hands-on_Ex1.html#explorotary-data-analysis-eda",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "Explorotary Data Analysis (EDA)",
    "text": "Explorotary Data Analysis (EDA)\nIn this section, I learn how to use ggplot2 functions to create graphs for EDA purposes.\nThe code chunk below plot a histogram distribution.\n\nhist(mpsz3414$`PreSch Density`)\n\n\n\n\nThe code chunk below uses ggplot2 functions to improve quality and customization.\n\nggplot(data = mpsz3414, \n       aes(x = as.numeric(`PreSch Density`)))+\n  geom_histogram(bins = 20, color = \"black\", fill = \"light blue\") +\n  labs(title = \"Are pre-school even distributed in Singapore?\",\n       subtitle = \"There are many planning sub-zones with a single pre-school, on the other hand, \\nthere are two planning sub-zones with at least 20 pre-schools\",\n      x = \"Pre-school density (per km sq)\", y = \"Frequency\")\n\n\n\n\nThe code chunk below plots a scatterplot showing the relationship between density and count.\n\nggplot(data=mpsz3414, \n       aes(x = as.numeric(`PreSch Density`), y = `PreSch Count`))+\n  geom_point(color = \"black\", fill = \"light blue\") +\n  xlim(0, 40) +\n  ylim(0, 40) +\n  labs(title = \"Relationship between Pre-school Density and Pre-school Count\",\n       x = \"Pre-school density (per km sq)\", y = \"Pre-school count\")"
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1.html#exploratory-data-analysis-eda",
    "href": "Hands-on_Ex1/Hands-on_Ex1.html#exploratory-data-analysis-eda",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "Exploratory Data Analysis (EDA)",
    "text": "Exploratory Data Analysis (EDA)\nIn this section, I learn how to use ggplot2 functions to create graphs for EDA purposes.\nThe code chunk below plot a histogram distribution.\n\nhist(mpsz3414$`PreSch Density`)\n\n\n\n\nThe code chunk below uses ggplot2 functions to improve quality and customization.\n\nggplot(data = mpsz3414, \n       aes(x = as.numeric(`PreSch Density`)))+\n  geom_histogram(bins = 20, color = \"black\", fill = \"light blue\") +\n  labs(title = \"Are pre-school even distributed in Singapore?\",\n       subtitle = \"There are many planning sub-zones with a single pre-school, on the other hand, \\nthere are two planning sub-zones with at least 20 pre-schools\",\n      x = \"Pre-school density (per km sq)\", y = \"Frequency\")\n\n\n\n\nThe code chunk below plots a scatterplot showing the relationship between density and count.\n\nggplot(data=mpsz3414, \n       aes(x = as.numeric(`PreSch Density`), y = `PreSch Count`))+\n  geom_point(color = \"black\", fill = \"light blue\") +\n  xlim(0, 40) +\n  ylim(0, 40) +\n  labs(title = \"Relationship between Pre-school Density and Pre-school Count\",\n       x = \"Pre-school density (per km sq)\", y = \"Pre-school count\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#visualizing-regional-development-indicator",
    "href": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#visualizing-regional-development-indicator",
    "title": "In-class Exercise 1",
    "section": "Visualizing Regional Development Indicator",
    "text": "Visualizing Regional Development Indicator\nThe code chunk below prepares a basemap and a choropleth map showing distribution of GDPPC 2012.\n\nbasemap <- tm_shape(hunan) +\n  tm_polygons() +\n  tm_text(\"NAME_3\", size = 0.5)\n\ngdppc <- qtm(hunan, \"GDPPC\")\ntmap_arrange(basemap, gdppc, asp = 1, ncol = 2)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#computing-contiguity-spatial-weights",
    "href": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#computing-contiguity-spatial-weights",
    "title": "In-class Exercise 1",
    "section": "Computing Contiguity Spatial Weights",
    "text": "Computing Contiguity Spatial Weights\nIn this section, I learn how to use poly2nb() to compute contiguity weight matrices. This function builds a neighbors list based on regions with contiguous boundaries.\n\nComputing (QUEEN) contiguity based neighbors\nThe code chunk below calculates Queen contiguity weight matrix.\n\nwm_q <- poly2nb(hunan, queen = TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nThe code chunk below shows the neighbors for the first polygon.\n\nwm_q[[1]]\n\n[1]  2  3  4 57 85\n\n\nThe code chunk below retrieves the country name of polygon ID=1.\n\nhunan$County[1]\n\n[1] \"Anxiang\"\n\n\nThe code chunk below shows the country names of the 5 neighboring polygons.\n\nhunan$NAME_3[c(2, 3, 4, 57, 85)]\n\n[1] \"Hanshou\" \"Jinshi\"  \"Li\"      \"Nan\"     \"Taoyuan\"\n\n\nThe code chunk below retrieves the GDPPC of the 5 countries.\n\nnb1 <- wm_q[[1]]\nnb1 <- hunan$GDPPC[nb1]\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\nThe code chunk below displays the complete weight matrix by using str().\n\nstr(wm_q)\n\nList of 88\n $ : int [1:5] 2 3 4 57 85\n $ : int [1:5] 1 57 58 78 85\n $ : int [1:4] 1 4 5 85\n $ : int [1:4] 1 3 5 6\n $ : int [1:4] 3 4 6 85\n $ : int [1:5] 4 5 69 75 85\n $ : int [1:4] 67 71 74 84\n $ : int [1:7] 9 46 47 56 78 80 86\n $ : int [1:6] 8 66 68 78 84 86\n $ : int [1:8] 16 17 19 20 22 70 72 73\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:3] 11 15 17\n $ : int [1:4] 13 14 17 83\n $ : int [1:5] 10 17 22 72 83\n $ : int [1:7] 10 11 14 15 16 72 83\n $ : int [1:5] 20 22 23 77 83\n $ : int [1:6] 10 20 21 73 74 86\n $ : int [1:7] 10 18 19 21 22 23 82\n $ : int [1:5] 19 20 35 82 86\n $ : int [1:5] 10 16 18 20 83\n $ : int [1:7] 18 20 38 41 77 79 82\n $ : int [1:5] 25 28 31 32 54\n $ : int [1:5] 24 28 31 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:3] 26 29 42\n $ : int [1:5] 24 25 33 49 54\n $ : int [1:3] 27 37 42\n $ : int 33\n $ : int [1:8] 24 25 32 36 39 40 56 81\n $ : int [1:8] 24 31 50 54 55 56 75 85\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 47 80 82 86\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:4] 29 42 43 44\n $ : int [1:4] 23 44 77 79\n $ : int [1:5] 31 40 42 43 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:7] 26 27 29 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:4] 37 38 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:3] 8 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:5] 32 48 52 54 55\n $ : int [1:3] 48 49 52\n $ : int [1:5] 48 49 50 51 54\n $ : int [1:3] 48 55 75\n $ : int [1:6] 24 28 32 49 50 52\n $ : int [1:5] 32 48 50 53 75\n $ : int [1:7] 8 31 32 36 78 80 85\n $ : int [1:6] 1 2 58 64 76 85\n $ : int [1:5] 2 57 68 76 78\n $ : int [1:4] 60 61 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:7] 12 59 60 62 63 77 87\n $ : int [1:3] 61 77 87\n $ : int [1:4] 12 61 77 83\n $ : int [1:2] 57 76\n $ : int 76\n $ : int [1:5] 9 67 68 76 84\n $ : int [1:4] 7 66 76 84\n $ : int [1:5] 9 58 66 76 78\n $ : int [1:3] 6 75 85\n $ : int [1:3] 10 72 73\n $ : int [1:3] 7 73 74\n $ : int [1:5] 10 11 16 17 70\n $ : int [1:5] 10 19 70 71 74\n $ : int [1:6] 7 19 71 73 84 86\n $ : int [1:6] 6 32 53 55 69 85\n $ : int [1:7] 57 58 64 65 66 67 68\n $ : int [1:7] 18 23 38 61 62 63 83\n $ : int [1:7] 2 8 9 56 58 68 85\n $ : int [1:7] 23 38 40 41 43 44 45\n $ : int [1:8] 8 34 35 36 41 45 47 56\n $ : int [1:6] 25 26 31 33 39 42\n $ : int [1:5] 20 21 23 35 41\n $ : int [1:9] 12 13 15 16 17 18 22 63 77\n $ : int [1:6] 7 9 66 67 74 86\n $ : int [1:11] 1 2 3 5 6 32 56 57 69 75 ...\n $ : int [1:9] 8 9 19 21 35 46 47 74 84\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language poly2nb(pl = hunan, queen = TRUE)\n - attr(*, \"type\")= chr \"queen\"\n - attr(*, \"sym\")= logi TRUE\n\n\n\n\nCreating (ROOK) contiguity based neighbors\nThe code chunk below calculates Rook contiguity weight matrix.\n\nwm_r <- poly2nb(hunan, queen = FALSE)\nsummary(wm_r)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 440 \nPercentage nonzero weights: 5.681818 \nAverage number of links: 5 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 \n 2  2 12 20 21 14 11  3  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 10 links\n\n\n\n\nVisualizing contiguity weights\nIn this section, I learn how to use polygon centroids and get latitude and longitude of centroids.\nThe code chunks below give longitude and latitude.\n\nlongitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n\n\nlatitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\nThe code chunk below puts longitude and latitude into the same object using cbind.\n\ncoords <- cbind(longitude, latitude)\n\nThe code chunk below checks first few observations.\n\nhead(coords)\n\n     longitude latitude\n[1,]  112.1531 29.44362\n[2,]  112.0372 28.86489\n[3,]  111.8917 29.47107\n[4,]  111.7031 29.74499\n[5,]  111.6138 29.49258\n[6,]  111.0341 29.79863\n\n\n\nPlotting Queen contiguity based neighbor map\n\nplot(hunan$geometry, border = \"lightgrey\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")\n\n\n\n\n\n\nPlotting Rook contiguity based neighbor map\n\nplot(hunan$geometry, border = \"lightgrey\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")\n\n\n\n\n\n\nPlotting both Queen and Rook contiguity based neighbor map\n\npar(mfrow = c(1,2))\n\nplot(hunan$geometry, border = \"lightgrey\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\", main = \"Queen Contiguity\")\n\nplot(hunan$geometry, border = \"lightgrey\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\", main = \"Rook Contiguity\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#computing-distance-based-neighbors",
    "href": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#computing-distance-based-neighbors",
    "title": "In-class Exercise 1",
    "section": "Computing Distance Based Neighbors",
    "text": "Computing Distance Based Neighbors\nIn this section, I learn how to derive distance-based weight matrices by using dnearneigh().\n\nDetermine the cut-off distance\nSteps to determine upper limit for distance band:\n\nReturn a matrix with the indices of points using knearneigh().\nConvert the knn object into a neighbors list of class nb with a list of integer vectors using knn2nb().\nReturn the length of neighbor relationship edges using nbdists().\nRemove the list structure using unlist().\n\n\n#coords <- coordinates(hunan)\nk1 <- knn2nb(knearneigh(coords))\nk1dists <- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\n\n\nComputing fixed distance weight matrix\nThe code chunk below computes the distance weight matrix.\n\nwm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\nThe code chunk below shows the content.\n\nstr(wm_d62)\n\nList of 88\n $ : int [1:5] 3 4 5 57 64\n $ : int [1:4] 57 58 78 85\n $ : int [1:4] 1 4 5 57\n $ : int [1:3] 1 3 5\n $ : int [1:4] 1 3 4 85\n $ : int 69\n $ : int [1:2] 67 84\n $ : int [1:4] 9 46 47 78\n $ : int [1:4] 8 46 68 84\n $ : int [1:4] 16 22 70 72\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:2] 11 17\n $ : int 13\n $ : int [1:4] 10 17 22 83\n $ : int [1:3] 11 14 16\n $ : int [1:3] 20 22 63\n $ : int [1:5] 20 21 73 74 82\n $ : int [1:5] 18 19 21 22 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:4] 10 16 18 20\n $ : int [1:3] 41 77 82\n $ : int [1:4] 25 28 31 54\n $ : int [1:4] 24 28 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:2] 26 29\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:2] 27 37\n $ : int 33\n $ : int [1:2] 24 36\n $ : int 50\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:5] 31 34 45 56 80\n $ : int [1:2] 29 42\n $ : int [1:3] 44 77 79\n $ : int [1:4] 40 42 43 81\n $ : int [1:3] 39 45 79\n $ : int [1:5] 23 35 45 79 82\n $ : int [1:5] 26 37 39 43 81\n $ : int [1:3] 39 42 44\n $ : int [1:2] 38 43\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:5] 8 9 35 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:4] 48 49 50 52\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:2] 48 55\n $ : int [1:5] 24 28 49 50 52\n $ : int [1:4] 48 50 53 75\n $ : int 36\n $ : int [1:5] 1 2 3 58 64\n $ : int [1:5] 2 57 64 66 68\n $ : int [1:3] 60 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:5] 12 60 62 63 87\n $ : int [1:4] 61 63 77 87\n $ : int [1:5] 12 18 61 62 83\n $ : int [1:4] 1 57 58 76\n $ : int 76\n $ : int [1:5] 58 67 68 76 84\n $ : int [1:2] 7 66\n $ : int [1:4] 9 58 66 84\n $ : int [1:2] 6 75\n $ : int [1:3] 10 72 73\n $ : int [1:2] 73 74\n $ : int [1:3] 10 11 70\n $ : int [1:4] 19 70 71 74\n $ : int [1:5] 19 21 71 73 86\n $ : int [1:2] 55 69\n $ : int [1:3] 64 65 66\n $ : int [1:3] 23 38 62\n $ : int [1:2] 2 8\n $ : int [1:4] 38 40 41 45\n $ : int [1:5] 34 35 36 45 47\n $ : int [1:5] 25 26 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:4] 12 13 16 63\n $ : int [1:4] 7 9 66 68\n $ : int [1:2] 2 5\n $ : int [1:4] 21 46 47 74\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language dnearneigh(x = coords, d1 = 0, d2 = 62, longlat = TRUE)\n - attr(*, \"dnn\")= num [1:2] 0 62\n - attr(*, \"bounds\")= chr [1:2] \"GE\" \"LE\"\n - attr(*, \"nbtype\")= chr \"distance\"\n - attr(*, \"sym\")= logi TRUE\n\n\nThe code chunk below displays the structure of weight matrix.\n\ntable(hunan$County, card(wm_d62))\n\n               \n                1 2 3 4 5 6\n  Anhua         1 0 0 0 0 0\n  Anren         0 0 0 1 0 0\n  Anxiang       0 0 0 0 1 0\n  Baojing       0 0 0 0 1 0\n  Chaling       0 0 1 0 0 0\n  Changning     0 0 1 0 0 0\n  Changsha      0 0 0 1 0 0\n  Chengbu       0 1 0 0 0 0\n  Chenxi        0 0 0 1 0 0\n  Cili          0 1 0 0 0 0\n  Dao           0 0 0 1 0 0\n  Dongan        0 0 1 0 0 0\n  Dongkou       0 0 0 1 0 0\n  Fenghuang     0 0 0 1 0 0\n  Guidong       0 0 1 0 0 0\n  Guiyang       0 0 0 1 0 0\n  Guzhang       0 0 0 0 0 1\n  Hanshou       0 0 0 1 0 0\n  Hengdong      0 0 0 0 1 0\n  Hengnan       0 0 0 0 1 0\n  Hengshan      0 0 0 0 0 1\n  Hengyang      0 0 0 0 0 1\n  Hongjiang     0 0 0 0 1 0\n  Huarong       0 0 0 1 0 0\n  Huayuan       0 0 0 1 0 0\n  Huitong       0 0 0 1 0 0\n  Jiahe         0 0 0 0 1 0\n  Jianghua      0 0 1 0 0 0\n  Jiangyong     0 1 0 0 0 0\n  Jingzhou      0 1 0 0 0 0\n  Jinshi        0 0 0 1 0 0\n  Jishou        0 0 0 0 0 1\n  Lanshan       0 0 0 1 0 0\n  Leiyang       0 0 0 1 0 0\n  Lengshuijiang 0 0 1 0 0 0\n  Li            0 0 1 0 0 0\n  Lianyuan      0 0 0 0 1 0\n  Liling        0 1 0 0 0 0\n  Linli         0 0 0 1 0 0\n  Linwu         0 0 0 1 0 0\n  Linxiang      1 0 0 0 0 0\n  Liuyang       0 1 0 0 0 0\n  Longhui       0 0 1 0 0 0\n  Longshan      0 1 0 0 0 0\n  Luxi          0 0 0 0 1 0\n  Mayang        0 0 0 0 0 1\n  Miluo         0 0 0 0 1 0\n  Nan           0 0 0 0 1 0\n  Ningxiang     0 0 0 1 0 0\n  Ningyuan      0 0 0 0 1 0\n  Pingjiang     0 1 0 0 0 0\n  Qidong        0 0 1 0 0 0\n  Qiyang        0 0 1 0 0 0\n  Rucheng       0 1 0 0 0 0\n  Sangzhi       0 1 0 0 0 0\n  Shaodong      0 0 0 0 1 0\n  Shaoshan      0 0 0 0 1 0\n  Shaoyang      0 0 0 1 0 0\n  Shimen        1 0 0 0 0 0\n  Shuangfeng    0 0 0 0 0 1\n  Shuangpai     0 0 0 1 0 0\n  Suining       0 0 0 0 1 0\n  Taojiang      0 1 0 0 0 0\n  Taoyuan       0 1 0 0 0 0\n  Tongdao       0 1 0 0 0 0\n  Wangcheng     0 0 0 1 0 0\n  Wugang        0 0 1 0 0 0\n  Xiangtan      0 0 0 1 0 0\n  Xiangxiang    0 0 0 0 1 0\n  Xiangyin      0 0 0 1 0 0\n  Xinhua        0 0 0 0 1 0\n  Xinhuang      1 0 0 0 0 0\n  Xinning       0 1 0 0 0 0\n  Xinshao       0 0 0 0 0 1\n  Xintian       0 0 0 0 1 0\n  Xupu          0 1 0 0 0 0\n  Yanling       0 0 1 0 0 0\n  Yizhang       1 0 0 0 0 0\n  Yongshun      0 0 0 1 0 0\n  Yongxing      0 0 0 1 0 0\n  You           0 0 0 1 0 0\n  Yuanjiang     0 0 0 0 1 0\n  Yuanling      1 0 0 0 0 0\n  Yueyang       0 0 1 0 0 0\n  Zhijiang      0 0 0 0 1 0\n  Zhongfang     0 0 0 1 0 0\n  Zhuzhou       0 0 0 0 1 0\n  Zixing        0 0 1 0 0 0\n\n\n\nn_comp <- n.comp.nb(wm_d62)\nn_comp$nc\n\n[1] 1\n\n\n\ntable(n_comp$comp.id)\n\n\n 1 \n88 \n\n\n\nPlotting fixed distance weight matrix\nThe code chunk below plots the distance weight matrix.\n\nplot(hunan$geometry, border = \"lightgrey\")\nplot(wm_d62, coords, add = TRUE)\nplot(k1, coords, add = TRUE, col = \"red\", length = 0.08)\n\n\n\n\nThe code chunk below plots 1st nearest neighbors and links of neighbors within cut-off distance of 62km separately.\n\npar(mfrow = c(1,2))\n\nplot(hunan$geometry, border = \"lightgrey\")\nplot(k1, coords, add = TRUE, col = \"red\", length = 0.08, main = \"1st nearest neighbours\")\n\nplot(hunan$geometry, border = \"lightgrey\")\nplot(wm_d62, coords, add = TRUE, pch = 19, cex = 0.6, main = \"Distance link\")\n\n\n\n\n\n\n\nComputing adaptive distance weight matrix\nThe code chunk below controls the number of neighbors using k-nearest neighbors.\n\nknn6 <- knn2nb(knearneigh(coords, k = 6))\nknn6\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 528 \nPercentage nonzero weights: 6.818182 \nAverage number of links: 6 \nNon-symmetric neighbours list\n\n\nThe code chunk below shows the content.\n\nstr(knn6)\n\nList of 88\n $ : int [1:6] 2 3 4 5 57 64\n $ : int [1:6] 1 3 57 58 78 85\n $ : int [1:6] 1 2 4 5 57 85\n $ : int [1:6] 1 3 5 6 69 85\n $ : int [1:6] 1 3 4 6 69 85\n $ : int [1:6] 3 4 5 69 75 85\n $ : int [1:6] 9 66 67 71 74 84\n $ : int [1:6] 9 46 47 78 80 86\n $ : int [1:6] 8 46 66 68 84 86\n $ : int [1:6] 16 19 22 70 72 73\n $ : int [1:6] 10 14 16 17 70 72\n $ : int [1:6] 13 15 60 61 63 83\n $ : int [1:6] 12 15 60 61 63 83\n $ : int [1:6] 11 15 16 17 72 83\n $ : int [1:6] 12 13 14 17 60 83\n $ : int [1:6] 10 11 17 22 72 83\n $ : int [1:6] 10 11 14 16 72 83\n $ : int [1:6] 20 22 23 63 77 83\n $ : int [1:6] 10 20 21 73 74 82\n $ : int [1:6] 18 19 21 22 23 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:6] 10 16 18 19 20 83\n $ : int [1:6] 18 20 41 77 79 82\n $ : int [1:6] 25 28 31 52 54 81\n $ : int [1:6] 24 28 31 33 54 81\n $ : int [1:6] 25 27 29 33 42 81\n $ : int [1:6] 26 29 30 37 42 81\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:6] 26 27 37 42 43 81\n $ : int [1:6] 26 27 28 33 49 81\n $ : int [1:6] 24 25 36 39 40 54\n $ : int [1:6] 24 31 50 54 55 56\n $ : int [1:6] 25 26 28 30 49 81\n $ : int [1:6] 36 40 41 45 56 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:6] 26 27 29 42 43 44\n $ : int [1:6] 23 43 44 62 77 79\n $ : int [1:6] 25 40 42 43 44 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:6] 26 27 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:6] 37 38 39 42 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:6] 8 9 35 47 78 86\n $ : int [1:6] 8 21 35 46 80 86\n $ : int [1:6] 49 50 51 52 53 55\n $ : int [1:6] 28 33 48 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:6] 28 48 49 50 52 54\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:6] 48 50 51 52 55 75\n $ : int [1:6] 24 28 49 50 51 52\n $ : int [1:6] 32 48 50 52 53 75\n $ : int [1:6] 32 34 36 78 80 85\n $ : int [1:6] 1 2 3 58 64 68\n $ : int [1:6] 2 57 64 66 68 78\n $ : int [1:6] 12 13 60 61 87 88\n $ : int [1:6] 12 13 59 61 63 87\n $ : int [1:6] 12 13 60 62 63 87\n $ : int [1:6] 12 38 61 63 77 87\n $ : int [1:6] 12 18 60 61 62 83\n $ : int [1:6] 1 3 57 58 68 76\n $ : int [1:6] 58 64 66 67 68 76\n $ : int [1:6] 9 58 67 68 76 84\n $ : int [1:6] 7 65 66 68 76 84\n $ : int [1:6] 9 57 58 66 78 84\n $ : int [1:6] 4 5 6 32 75 85\n $ : int [1:6] 10 16 19 22 72 73\n $ : int [1:6] 7 19 73 74 84 86\n $ : int [1:6] 10 11 14 16 17 70\n $ : int [1:6] 10 19 21 70 71 74\n $ : int [1:6] 19 21 71 73 84 86\n $ : int [1:6] 6 32 50 53 55 69\n $ : int [1:6] 58 64 65 66 67 68\n $ : int [1:6] 18 23 38 61 62 63\n $ : int [1:6] 2 8 9 46 58 68\n $ : int [1:6] 38 40 41 43 44 45\n $ : int [1:6] 34 35 36 41 45 47\n $ : int [1:6] 25 26 28 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:6] 12 13 15 16 22 63\n $ : int [1:6] 7 9 66 68 71 74\n $ : int [1:6] 2 3 4 5 56 69\n $ : int [1:6] 8 9 21 46 47 74\n $ : int [1:6] 59 60 61 62 63 88\n $ : int [1:6] 59 60 61 62 63 87\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language knearneigh(x = coords, k = 6)\n - attr(*, \"sym\")= logi FALSE\n - attr(*, \"type\")= chr \"knn\"\n - attr(*, \"knn-k\")= num 6\n - attr(*, \"class\")= chr \"nb\"\n\n\n\nPlotting distance based neighbors\nThe code chunk below plots the weight matrix.\n\nplot(hunan$geometry, border = \"lightgrey\")\nplot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#weight-based-on-idw",
    "href": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#weight-based-on-idw",
    "title": "In-class Exercise 1",
    "section": "Weight Based on IDW",
    "text": "Weight Based on IDW\nIn this section, I learn how to derive a spatial weight matrix based on Inversed Distance method.\nThe code chunk below computes the distances between areas using nbdists().\n\ndist <- nbdists(wm_q, coords, longlat = TRUE)\nids <- lapply(dist, function(x) 1/(x))\nids\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n[[2]]\n[1] 0.01535405 0.01764308 0.01925924 0.02323898 0.01719350\n\n[[3]]\n[1] 0.03916350 0.02822040 0.03695795 0.01395765\n\n[[4]]\n[1] 0.01820896 0.02822040 0.03414741 0.01539065\n\n[[5]]\n[1] 0.03695795 0.03414741 0.01524598 0.01618354\n\n[[6]]\n[1] 0.015390649 0.015245977 0.021748129 0.011883901 0.009810297\n\n[[7]]\n[1] 0.01708612 0.01473997 0.01150924 0.01872915\n\n[[8]]\n[1] 0.02022144 0.03453056 0.02529256 0.01036340 0.02284457 0.01500600 0.01515314\n\n[[9]]\n[1] 0.02022144 0.01574888 0.02109502 0.01508028 0.02902705 0.01502980\n\n[[10]]\n[1] 0.02281552 0.01387777 0.01538326 0.01346650 0.02100510 0.02631658 0.01874863\n[8] 0.01500046\n\n[[11]]\n[1] 0.01882869 0.02243492 0.02247473\n\n[[12]]\n[1] 0.02779227 0.02419652 0.02333385 0.02986130 0.02335429\n\n[[13]]\n[1] 0.02779227 0.02650020 0.02670323 0.01714243\n\n[[14]]\n[1] 0.01882869 0.01233868 0.02098555\n\n[[15]]\n[1] 0.02650020 0.01233868 0.01096284 0.01562226\n\n[[16]]\n[1] 0.02281552 0.02466962 0.02765018 0.01476814 0.01671430\n\n[[17]]\n[1] 0.01387777 0.02243492 0.02098555 0.01096284 0.02466962 0.01593341 0.01437996\n\n[[18]]\n[1] 0.02039779 0.02032767 0.01481665 0.01473691 0.01459380\n\n[[19]]\n[1] 0.01538326 0.01926323 0.02668415 0.02140253 0.01613589 0.01412874\n\n[[20]]\n[1] 0.01346650 0.02039779 0.01926323 0.01723025 0.02153130 0.01469240 0.02327034\n\n[[21]]\n[1] 0.02668415 0.01723025 0.01766299 0.02644986 0.02163800\n\n[[22]]\n[1] 0.02100510 0.02765018 0.02032767 0.02153130 0.01489296\n\n[[23]]\n[1] 0.01481665 0.01469240 0.01401432 0.02246233 0.01880425 0.01530458 0.01849605\n\n[[24]]\n[1] 0.02354598 0.01837201 0.02607264 0.01220154 0.02514180\n\n[[25]]\n[1] 0.02354598 0.02188032 0.01577283 0.01949232 0.02947957\n\n[[26]]\n[1] 0.02155798 0.01745522 0.02212108 0.02220532\n\n[[27]]\n[1] 0.02155798 0.02490625 0.01562326\n\n[[28]]\n[1] 0.01837201 0.02188032 0.02229549 0.03076171 0.02039506\n\n[[29]]\n[1] 0.02490625 0.01686587 0.01395022\n\n[[30]]\n[1] 0.02090587\n\n[[31]]\n[1] 0.02607264 0.01577283 0.01219005 0.01724850 0.01229012 0.01609781 0.01139438\n[8] 0.01150130\n\n[[32]]\n[1] 0.01220154 0.01219005 0.01712515 0.01340413 0.01280928 0.01198216 0.01053374\n[8] 0.01065655\n\n[[33]]\n[1] 0.01949232 0.01745522 0.02229549 0.02090587 0.01979045\n\n[[34]]\n[1] 0.03113041 0.03589551 0.02882915\n\n[[35]]\n[1] 0.01766299 0.02185795 0.02616766 0.02111721 0.02108253 0.01509020\n\n[[36]]\n[1] 0.01724850 0.03113041 0.01571707 0.01860991 0.02073549 0.01680129\n\n[[37]]\n[1] 0.01686587 0.02234793 0.01510990 0.01550676\n\n[[38]]\n[1] 0.01401432 0.02407426 0.02276151 0.01719415\n\n[[39]]\n[1] 0.01229012 0.02172543 0.01711924 0.02629732 0.01896385\n\n[[40]]\n[1] 0.01609781 0.01571707 0.02172543 0.01506473 0.01987922 0.01894207\n\n[[41]]\n[1] 0.02246233 0.02185795 0.02205991 0.01912542 0.01601083 0.01742892\n\n[[42]]\n[1] 0.02212108 0.01562326 0.01395022 0.02234793 0.01711924 0.01836831 0.01683518\n\n[[43]]\n[1] 0.01510990 0.02629732 0.01506473 0.01836831 0.03112027 0.01530782\n\n[[44]]\n[1] 0.01550676 0.02407426 0.03112027 0.01486508\n\n[[45]]\n[1] 0.03589551 0.01860991 0.01987922 0.02205991 0.02107101 0.01982700\n\n[[46]]\n[1] 0.03453056 0.04033752 0.02689769\n\n[[47]]\n[1] 0.02529256 0.02616766 0.04033752 0.01949145 0.02181458\n\n[[48]]\n[1] 0.02313819 0.03370576 0.02289485 0.01630057 0.01818085\n\n[[49]]\n[1] 0.03076171 0.02138091 0.02394529 0.01990000\n\n[[50]]\n[1] 0.01712515 0.02313819 0.02551427 0.02051530 0.02187179\n\n[[51]]\n[1] 0.03370576 0.02138091 0.02873854\n\n[[52]]\n[1] 0.02289485 0.02394529 0.02551427 0.02873854 0.03516672\n\n[[53]]\n[1] 0.01630057 0.01979945 0.01253977\n\n[[54]]\n[1] 0.02514180 0.02039506 0.01340413 0.01990000 0.02051530 0.03516672\n\n[[55]]\n[1] 0.01280928 0.01818085 0.02187179 0.01979945 0.01882298\n\n[[56]]\n[1] 0.01036340 0.01139438 0.01198216 0.02073549 0.01214479 0.01362855 0.01341697\n\n[[57]]\n[1] 0.028079221 0.017643082 0.031423501 0.029114131 0.013520292 0.009903702\n\n[[58]]\n[1] 0.01925924 0.03142350 0.02722997 0.01434859 0.01567192\n\n[[59]]\n[1] 0.01696711 0.01265572 0.01667105 0.01785036\n\n[[60]]\n[1] 0.02419652 0.02670323 0.01696711 0.02343040\n\n[[61]]\n[1] 0.02333385 0.01265572 0.02343040 0.02514093 0.02790764 0.01219751 0.02362452\n\n[[62]]\n[1] 0.02514093 0.02002219 0.02110260\n\n[[63]]\n[1] 0.02986130 0.02790764 0.01407043 0.01805987\n\n[[64]]\n[1] 0.02911413 0.01689892\n\n[[65]]\n[1] 0.02471705\n\n[[66]]\n[1] 0.01574888 0.01726461 0.03068853 0.01954805 0.01810569\n\n[[67]]\n[1] 0.01708612 0.01726461 0.01349843 0.01361172\n\n[[68]]\n[1] 0.02109502 0.02722997 0.03068853 0.01406357 0.01546511\n\n[[69]]\n[1] 0.02174813 0.01645838 0.01419926\n\n[[70]]\n[1] 0.02631658 0.01963168 0.02278487\n\n[[71]]\n[1] 0.01473997 0.01838483 0.03197403\n\n[[72]]\n[1] 0.01874863 0.02247473 0.01476814 0.01593341 0.01963168\n\n[[73]]\n[1] 0.01500046 0.02140253 0.02278487 0.01838483 0.01652709\n\n[[74]]\n[1] 0.01150924 0.01613589 0.03197403 0.01652709 0.01342099 0.02864567\n\n[[75]]\n[1] 0.011883901 0.010533736 0.012539774 0.018822977 0.016458383 0.008217581\n\n[[76]]\n[1] 0.01352029 0.01434859 0.01689892 0.02471705 0.01954805 0.01349843 0.01406357\n\n[[77]]\n[1] 0.014736909 0.018804247 0.022761507 0.012197506 0.020022195 0.014070428\n[7] 0.008440896\n\n[[78]]\n[1] 0.02323898 0.02284457 0.01508028 0.01214479 0.01567192 0.01546511 0.01140779\n\n[[79]]\n[1] 0.01530458 0.01719415 0.01894207 0.01912542 0.01530782 0.01486508 0.02107101\n\n[[80]]\n[1] 0.01500600 0.02882915 0.02111721 0.01680129 0.01601083 0.01982700 0.01949145\n[8] 0.01362855\n\n[[81]]\n[1] 0.02947957 0.02220532 0.01150130 0.01979045 0.01896385 0.01683518\n\n[[82]]\n[1] 0.02327034 0.02644986 0.01849605 0.02108253 0.01742892\n\n[[83]]\n[1] 0.023354289 0.017142433 0.015622258 0.016714303 0.014379961 0.014593799\n[7] 0.014892965 0.018059871 0.008440896\n\n[[84]]\n[1] 0.01872915 0.02902705 0.01810569 0.01361172 0.01342099 0.01297994\n\n[[85]]\n [1] 0.011451133 0.017193502 0.013957649 0.016183544 0.009810297 0.010656545\n [7] 0.013416965 0.009903702 0.014199260 0.008217581 0.011407794\n\n[[86]]\n[1] 0.01515314 0.01502980 0.01412874 0.02163800 0.01509020 0.02689769 0.02181458\n[8] 0.02864567 0.01297994\n\n[[87]]\n[1] 0.01667105 0.02362452 0.02110260 0.02058034\n\n[[88]]\n[1] 0.01785036 0.02058034\n\n\n\nRow-standardized weights matrix\nThe code chunk below assigns weights to each neighboring polygon.\n\nrswm_q <- nb2listw(wm_q, style = \"W\", zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\nThe code chunk below shows the weight of the first polygon’s four neighbors type.\n\nrswm_q$weights[10]\n\n[[1]]\n[1] 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125\n\n\nThe code chunk below derives a row standardized distance weight matrix.\n\nrswm_ids <- nb2listw(wm_q, glist = ids, style = \"B\", zero.policy = TRUE)\nrswm_ids\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn       S0        S1     S2\nB 88 7744 8.786867 0.3776535 3.8137\n\n\n\nrswm_ids$weights[1]\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n\n\nsummary(unlist(rswm_ids$weights))\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n0.008218 0.015088 0.018739 0.019614 0.022823 0.040338"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#application-of-spatial-weight-matrix",
    "href": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#application-of-spatial-weight-matrix",
    "title": "In-class Exercise 1",
    "section": "Application of Spatial Weight Matrix",
    "text": "Application of Spatial Weight Matrix\nIn this section, I learn how to create 4 different spatial lagged variables.\n\nSpatial lag with row-standardized weights\nThe code chunk below computes the average neighbor GDPPC value for each polygon, which referred to as spatially lagged values.\n\nGDPPC.lag <- lag.listw(rswm_q, hunan$GDPPC)\nGDPPC.lag\n\n [1] 24847.20 22724.80 24143.25 27737.50 27270.25 21248.80 43747.00 33582.71\n [9] 45651.17 32027.62 32671.00 20810.00 25711.50 30672.33 33457.75 31689.20\n[17] 20269.00 23901.60 25126.17 21903.43 22718.60 25918.80 20307.00 20023.80\n[25] 16576.80 18667.00 14394.67 19848.80 15516.33 20518.00 17572.00 15200.12\n[33] 18413.80 14419.33 24094.50 22019.83 12923.50 14756.00 13869.80 12296.67\n[41] 15775.17 14382.86 11566.33 13199.50 23412.00 39541.00 36186.60 16559.60\n[49] 20772.50 19471.20 19827.33 15466.80 12925.67 18577.17 14943.00 24913.00\n[57] 25093.00 24428.80 17003.00 21143.75 20435.00 17131.33 24569.75 23835.50\n[65] 26360.00 47383.40 55157.75 37058.00 21546.67 23348.67 42323.67 28938.60\n[73] 25880.80 47345.67 18711.33 29087.29 20748.29 35933.71 15439.71 29787.50\n[81] 18145.00 21617.00 29203.89 41363.67 22259.09 44939.56 16902.00 16930.00\n\n\nThe code chunk below retrieves the 5 countries’ GDPPC.\n\nnb1 <- wm_q[[1]]\nnb1 <- hunan$GDPPC[nb1]\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\nThe code chunk below appends the spatially lag GDPPC values onto hunan sf data.\n\nlag.list <- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))\nlag.res <- as.data.frame(lag.list)\ncolnames(lag.res) <- c(\"NAME_3\", \"lag GDPPC\")\nhunan <- left_join(hunan,lag.res)\n\nJoining, by = \"NAME_3\"\n\n\nThe code chunk below shows the average neighboring income values for each country.\n\nhead(hunan)\n\nSimple feature collection with 6 features and 36 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 110.4922 ymin: 28.61762 xmax: 112.3013 ymax: 30.12812\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3   ENGTYPE_3 Shape_Leng Shape_Area  County    City\n1 Changde 21098 Anxiang      County   1.869074 0.10056190 Anxiang Changde\n2 Changde 21100 Hanshou      County   2.360691 0.19978745 Hanshou Changde\n3 Changde 21101  Jinshi County City   1.425620 0.05302413  Jinshi Changde\n4 Changde 21102      Li      County   3.474325 0.18908121      Li Changde\n5 Changde 21103   Linli      County   2.289506 0.11450357   Linli Changde\n6 Changde 21104  Shimen      County   4.171918 0.37194707  Shimen Changde\n  avg_wage deposite     FAI Gov_Rev Gov_Exp     GDP GDPPC     GIO   Loan  NIPCR\n1    31935   5517.2  3541.0  243.64  1779.5 12482.0 23667  5108.9 2806.9 7693.7\n2    32265   7979.0  8665.0  386.13  2062.4 15788.0 20981 13491.0 4550.0 8269.9\n3    28692   4581.7  4777.0  373.31  1148.4  8706.9 34592 10935.0 2242.0 8169.9\n4    32541  13487.0 16066.0  709.61  2459.5 20322.0 24473 18402.0 6748.0 8377.0\n5    32667    564.1  7781.2  336.86  1538.7 10355.0 25554  8214.0  358.0 8143.1\n6    33261   8334.4 10531.0  548.33  2178.8 16293.0 27137 17795.0 6026.5 6156.0\n   Bed    Emp  EmpR EmpRT Pri_Stu Sec_Stu Household Household_R NOIP Pop_R\n1 1931 336.39 270.5 205.9  19.584  17.819     148.1       135.4   53 346.0\n2 2560 456.78 388.8 246.7  42.097  33.029     240.2       208.7   95 553.2\n3  848 122.78  82.1  61.7   8.723   7.592      81.9        43.7   77  92.4\n4 2038 513.44 426.8 227.1  38.975  33.938     268.5       256.0   96 539.7\n5 1440 307.36 272.2 100.8  23.286  18.943     129.1       157.2   99 246.6\n6 2502 392.05 329.6 193.8  29.245  26.104     190.6       184.7  122 399.2\n    RSCG Pop_T    Agri Service Disp_Inc      RORP    ROREmp lag GDPPC\n1 3957.9 528.3 4524.41   14100    16610 0.6549309 0.8041262  24847.20\n2 4460.5 804.6 6545.35   17727    18925 0.6875466 0.8511756  22724.80\n3 3683.0 251.8 2562.46    7525    19498 0.3669579 0.6686757  24143.25\n4 7110.2 832.5 7562.34   53160    18985 0.6482883 0.8312558  27737.50\n5 3604.9 409.3 3583.91    7031    18604 0.6024921 0.8856065  27270.25\n6 6490.7 600.5 5266.51    6981    19275 0.6647794 0.8407091  21248.80\n                        geometry\n1 POLYGON ((112.0625 29.75523...\n2 POLYGON ((112.2288 29.11684...\n3 POLYGON ((111.8927 29.6013,...\n4 POLYGON ((111.3731 29.94649...\n5 POLYGON ((111.6324 29.76288...\n6 POLYGON ((110.8825 30.11675...\n\n\nThe code chunk below plots both GDPPC and spatial lag GDPPC.\n\ngdppc <- qtm(hunan, \"GDPPC\")\nlag_gdppc <- qtm(hunan, \"lag GDPPC\")\ntmap_arrange(gdppc, lag_gdppc, asp = 1, ncol = 2)\n\n\n\n\n\n\nSpatial lag as a sum of neighboring values\nThe code chunk below assigns a value of 1 per each neighbor.\n\nb_weights <- lapply(wm_q, function(x) 0*x + 1)\nb_weights2 <- nb2listw(wm_q, glist = b_weights, style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1    S2\nB 88 7744 448 896 10224\n\n\nThe code chunk below computes a lag variable from weight and GDPPC.\n\nlag_sum <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nlag.res <- as.data.frame(lag_sum)\ncolnames(lag.res) <- c(\"NAME_3\", \"lag_sum GDPPC\")\n\n\nlag_sum\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 124236 113624  96573 110950 109081 106244 174988 235079 273907 256221\n[11]  98013 104050 102846  92017 133831 158446 141883 119508 150757 153324\n[21] 113593 129594 142149 100119  82884  74668  43184  99244  46549  20518\n[31] 140576 121601  92069  43258 144567 132119  51694  59024  69349  73780\n[41]  94651 100680  69398  52798 140472 118623 180933  82798  83090  97356\n[51]  59482  77334  38777 111463  74715 174391 150558 122144  68012  84575\n[61] 143045  51394  98279  47671  26360 236917 220631 185290  64640  70046\n[71] 126971 144693 129404 284074 112268 203611 145238 251536 108078 238300\n[81] 108870 108085 262835 248182 244850 404456  67608  33860\n\n\nThe code chunk below appends the lag_sum GDPPC field into hunan sf data.\n\nhunan <- left_join(hunan, lag.res)\n\nJoining, by = \"NAME_3\"\n\n\nThe code chunk below plots GDPPC and spatial lag sum GDPPC.\n\ngdppc <- qtm(hunan, \"GDPPC\")\nlag_sum_gdppc <- qtm(hunan, \"lag_sum GDPPC\")\ntmap_arrange(gdppc, lag_sum_gdppc, asp = 1, ncol = 2)\n\n\n\n\n\n\nSpatial window average\nThe code chunk assigns k6 to a new variable.\n\nwm_q1 <- wm_q\n\nThe code chunk below adds diagonal element to the neighboring list.\n\ninclude.self(wm_q1)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\n\nThe code chunk below obtains weight.\n\nwm_q1 <- nb2listw(wm_q1)\nwm_q1\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\nThe code chunk below creates the lag variable from weight structure and GDPPC variable.\n\nlag_w_avg_gpdpc <- lag.listw(wm_q1, hunan$GDPPC)\nlag_w_avg_gpdpc\n\n [1] 24847.20 22724.80 24143.25 27737.50 27270.25 21248.80 43747.00 33582.71\n [9] 45651.17 32027.62 32671.00 20810.00 25711.50 30672.33 33457.75 31689.20\n[17] 20269.00 23901.60 25126.17 21903.43 22718.60 25918.80 20307.00 20023.80\n[25] 16576.80 18667.00 14394.67 19848.80 15516.33 20518.00 17572.00 15200.12\n[33] 18413.80 14419.33 24094.50 22019.83 12923.50 14756.00 13869.80 12296.67\n[41] 15775.17 14382.86 11566.33 13199.50 23412.00 39541.00 36186.60 16559.60\n[49] 20772.50 19471.20 19827.33 15466.80 12925.67 18577.17 14943.00 24913.00\n[57] 25093.00 24428.80 17003.00 21143.75 20435.00 17131.33 24569.75 23835.50\n[65] 26360.00 47383.40 55157.75 37058.00 21546.67 23348.67 42323.67 28938.60\n[73] 25880.80 47345.67 18711.33 29087.29 20748.29 35933.71 15439.71 29787.50\n[81] 18145.00 21617.00 29203.89 41363.67 22259.09 44939.56 16902.00 16930.00\n\n\nThe code chunk below converts lag variable listw object into data frame using as.data.frame().\n\nlag.list.wm_q1 <- list(hunan$NAME_3, lag.listw(wm_q1, hunan$GDPPC))\nlag_wm_q1.res <- as.data.frame(lag.list.wm_q1)\ncolnames(lag_wm_q1.res) <- c(\"NAME_3\", \"lag_window_avg GDPPC\")\n\nThe code chunk below appends lag_window_avg GDPPC values onto hunan sf data frame.\n\nhunan <- left_join(hunan, lag_wm_q1.res)\n\nJoining, by = \"NAME_3\"\n\n\nThe code chunk below plots GDPPC and lag_window_avg GDPPC map.\n\ngdppc <- qtm(hunan, \"GDPPC\")\nw_avg_gdppc <- qtm(hunan, \"lag_window_avg GDPPC\")\ntmap_arrange(gdppc, w_avg_gdppc, asp = 1, ncol = 2)\n\n\n\n\n\n\nSpatial window sum\n\nwm_q1 <- wm_q\n\n\ninclude.self(wm_q1)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\n\n\nwm_q1\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\n\nThe code chunk below assigns binary weights to the neighbor structure that includes diagonal element.\n\nb_weights <- lapply(wm_q1, function(x) 0*x + 1)\nb_weights[1]\n\n[[1]]\n[1] 1 1 1 1 1\n\n\nThe code chunk below assigns weight values using nb2listw() and glist().\n\nb_weights2 <- nb2listw(wm_q1, glist = b_weights, style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1    S2\nB 88 7744 448 896 10224\n\n\nThe code chunk below computes lag variable with lag.listw().\n\nw_sum_gdppc <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nw_sum_gdppc\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 124236 113624  96573 110950 109081 106244 174988 235079 273907 256221\n[11]  98013 104050 102846  92017 133831 158446 141883 119508 150757 153324\n[21] 113593 129594 142149 100119  82884  74668  43184  99244  46549  20518\n[31] 140576 121601  92069  43258 144567 132119  51694  59024  69349  73780\n[41]  94651 100680  69398  52798 140472 118623 180933  82798  83090  97356\n[51]  59482  77334  38777 111463  74715 174391 150558 122144  68012  84575\n[61] 143045  51394  98279  47671  26360 236917 220631 185290  64640  70046\n[71] 126971 144693 129404 284074 112268 203611 145238 251536 108078 238300\n[81] 108870 108085 262835 248182 244850 404456  67608  33860\n\n\nThe code chunk below converts lag variable listw object into data frame using as.data.frame().\n\nw_sum_gdppc.res <- as.data.frame(w_sum_gdppc)\ncolnames(w_sum_gdppc.res) <- c(\"NAME_3\", \"w_sum GDPPC\")\n\nThe code chunk below appends w_sum GDPPC values onto hunan sf data frame.\n\nhunan <- left_join(hunan, w_sum_gdppc.res)\n\nJoining, by = \"NAME_3\"\n\n\nThe code chunk below plots GDPPC and lag_sum GDPPC map.\n\ngdppc <- qtm(hunan, \"GDPPC\")\nw_sum_gdppc <- qtm(hunan, \"w_sum GDPPC\")\ntmap_arrange(gdppc, w_sum_gdppc, asp = 1, ncol = 2)"
  },
  {
    "objectID": "In-class_Ex1/In-class_Ex1.html",
    "href": "In-class_Ex1/In-class_Ex1.html",
    "title": "In-class Exercise 1: Spatial Weights and Applications",
    "section": "",
    "text": "In this in-class exercise, I learn how to import data, perform relational join, compute spatial weights, and calculate spatially lagged variables."
  },
  {
    "objectID": "In-class_Ex1/In-class_Ex1.html#getting-started",
    "href": "In-class_Ex1/In-class_Ex1.html#getting-started",
    "title": "In-class Exercise 1: Spatial Weights and Applications",
    "section": "Getting Started",
    "text": "Getting Started\nThe code chunk below will install and load spdep, sf, tmap and tidyverse packages.\n\npacman::p_load(spdep, sf, tmap, tidyverse)"
  },
  {
    "objectID": "In-class_Ex1/In-class_Ex1.html#importing-geospatial-data",
    "href": "In-class_Ex1/In-class_Ex1.html#importing-geospatial-data",
    "title": "In-class Exercise 1: Spatial Weights and Applications",
    "section": "Importing Geospatial Data",
    "text": "Importing Geospatial Data\n\nImporting shapefile into R\nThis code chunk imports Hunan shapefile into R by using st_read().\n\nhunan <- st_read(dsn = \"data/geospatial\", layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `D:\\GuanboShao\\ISSS624\\In-class_Ex1\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\nImporting csv file into R\n\nhunan2012 <- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nPerforming relational join\nThe code chunk below updates the attribute table of hunan’s spatial polygons data frame with the attribute fields of hunan2012 data frame.\n\nhunan <- left_join(hunan, hunan2012)\n\nJoining, by = \"County\""
  },
  {
    "objectID": "In-class_Ex1/In-class_Ex1.html#visualizing-regional-development-indicator",
    "href": "In-class_Ex1/In-class_Ex1.html#visualizing-regional-development-indicator",
    "title": "In-class Exercise 1: Spatial Weights and Applications",
    "section": "Visualizing Regional Development Indicator",
    "text": "Visualizing Regional Development Indicator\nThe code chunk below prepares a basemap and a choropleth map showing distribution of GDPPC 2012.\n\nbasemap <- tm_shape(hunan) +\n  tm_polygons() +\n  tm_text(\"NAME_3\", size = 0.5)\n\ngdppc <- qtm(hunan, \"GDPPC\")\ntmap_arrange(basemap, gdppc, asp = 1, ncol = 2)"
  },
  {
    "objectID": "In-class_Ex1/In-class_Ex1.html#computing-contiguity-spatial-weights",
    "href": "In-class_Ex1/In-class_Ex1.html#computing-contiguity-spatial-weights",
    "title": "In-class Exercise 1: Spatial Weights and Applications",
    "section": "Computing Contiguity Spatial Weights",
    "text": "Computing Contiguity Spatial Weights\nIn this section, I learn how to use poly2nb() to compute contiguity weight matrices. This function builds a neighbors list based on regions with contiguous boundaries.\n\nComputing (QUEEN) contiguity based neighbors\nThe code chunk below calculates Queen contiguity weight matrix.\n\nwm_q <- poly2nb(hunan, queen = TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nThe code chunk below shows the neighbors for the first polygon.\n\nwm_q[[1]]\n\n[1]  2  3  4 57 85\n\n\nThe code chunk below retrieves the country name of polygon ID=1.\n\nhunan$County[1]\n\n[1] \"Anxiang\"\n\n\nThe code chunk below shows the country names of the 5 neighboring polygons.\n\nhunan$NAME_3[c(2, 3, 4, 57, 85)]\n\n[1] \"Hanshou\" \"Jinshi\"  \"Li\"      \"Nan\"     \"Taoyuan\"\n\n\nThe code chunk below retrieves the GDPPC of the 5 countries.\n\nnb1 <- wm_q[[1]]\nnb1 <- hunan$GDPPC[nb1]\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\nThe code chunk below displays the complete weight matrix by using str().\n\nstr(wm_q)\n\nList of 88\n $ : int [1:5] 2 3 4 57 85\n $ : int [1:5] 1 57 58 78 85\n $ : int [1:4] 1 4 5 85\n $ : int [1:4] 1 3 5 6\n $ : int [1:4] 3 4 6 85\n $ : int [1:5] 4 5 69 75 85\n $ : int [1:4] 67 71 74 84\n $ : int [1:7] 9 46 47 56 78 80 86\n $ : int [1:6] 8 66 68 78 84 86\n $ : int [1:8] 16 17 19 20 22 70 72 73\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:3] 11 15 17\n $ : int [1:4] 13 14 17 83\n $ : int [1:5] 10 17 22 72 83\n $ : int [1:7] 10 11 14 15 16 72 83\n $ : int [1:5] 20 22 23 77 83\n $ : int [1:6] 10 20 21 73 74 86\n $ : int [1:7] 10 18 19 21 22 23 82\n $ : int [1:5] 19 20 35 82 86\n $ : int [1:5] 10 16 18 20 83\n $ : int [1:7] 18 20 38 41 77 79 82\n $ : int [1:5] 25 28 31 32 54\n $ : int [1:5] 24 28 31 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:3] 26 29 42\n $ : int [1:5] 24 25 33 49 54\n $ : int [1:3] 27 37 42\n $ : int 33\n $ : int [1:8] 24 25 32 36 39 40 56 81\n $ : int [1:8] 24 31 50 54 55 56 75 85\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 47 80 82 86\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:4] 29 42 43 44\n $ : int [1:4] 23 44 77 79\n $ : int [1:5] 31 40 42 43 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:7] 26 27 29 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:4] 37 38 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:3] 8 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:5] 32 48 52 54 55\n $ : int [1:3] 48 49 52\n $ : int [1:5] 48 49 50 51 54\n $ : int [1:3] 48 55 75\n $ : int [1:6] 24 28 32 49 50 52\n $ : int [1:5] 32 48 50 53 75\n $ : int [1:7] 8 31 32 36 78 80 85\n $ : int [1:6] 1 2 58 64 76 85\n $ : int [1:5] 2 57 68 76 78\n $ : int [1:4] 60 61 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:7] 12 59 60 62 63 77 87\n $ : int [1:3] 61 77 87\n $ : int [1:4] 12 61 77 83\n $ : int [1:2] 57 76\n $ : int 76\n $ : int [1:5] 9 67 68 76 84\n $ : int [1:4] 7 66 76 84\n $ : int [1:5] 9 58 66 76 78\n $ : int [1:3] 6 75 85\n $ : int [1:3] 10 72 73\n $ : int [1:3] 7 73 74\n $ : int [1:5] 10 11 16 17 70\n $ : int [1:5] 10 19 70 71 74\n $ : int [1:6] 7 19 71 73 84 86\n $ : int [1:6] 6 32 53 55 69 85\n $ : int [1:7] 57 58 64 65 66 67 68\n $ : int [1:7] 18 23 38 61 62 63 83\n $ : int [1:7] 2 8 9 56 58 68 85\n $ : int [1:7] 23 38 40 41 43 44 45\n $ : int [1:8] 8 34 35 36 41 45 47 56\n $ : int [1:6] 25 26 31 33 39 42\n $ : int [1:5] 20 21 23 35 41\n $ : int [1:9] 12 13 15 16 17 18 22 63 77\n $ : int [1:6] 7 9 66 67 74 86\n $ : int [1:11] 1 2 3 5 6 32 56 57 69 75 ...\n $ : int [1:9] 8 9 19 21 35 46 47 74 84\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language poly2nb(pl = hunan, queen = TRUE)\n - attr(*, \"type\")= chr \"queen\"\n - attr(*, \"sym\")= logi TRUE\n\n\n\n\nCreating (ROOK) contiguity based neighbors\nThe code chunk below calculates Rook contiguity weight matrix.\n\nwm_r <- poly2nb(hunan, queen = FALSE)\nsummary(wm_r)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 440 \nPercentage nonzero weights: 5.681818 \nAverage number of links: 5 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 \n 2  2 12 20 21 14 11  3  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 10 links\n\n\n\n\nVisualizing contiguity weights\nIn this section, I learn how to use polygon centroids and get latitude and longitude of centroids.\nThe code chunks below give longitude and latitude.\n\nlongitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n\n\nlatitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\nThe code chunk below puts longitude and latitude into the same object using cbind.\n\ncoords <- cbind(longitude, latitude)\n\nThe code chunk below checks first few observations.\n\nhead(coords)\n\n     longitude latitude\n[1,]  112.1531 29.44362\n[2,]  112.0372 28.86489\n[3,]  111.8917 29.47107\n[4,]  111.7031 29.74499\n[5,]  111.6138 29.49258\n[6,]  111.0341 29.79863\n\n\n\nPlotting Queen contiguity based neighbor map\n\nplot(hunan$geometry, border = \"lightgrey\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")\n\n\n\n\n\n\nPlotting Rook contiguity based neighbor map\n\nplot(hunan$geometry, border = \"lightgrey\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")\n\n\n\n\n\n\nPlotting both Queen and Rook contiguity based neighbor map\n\npar(mfrow = c(1,2))\n\nplot(hunan$geometry, border = \"lightgrey\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\", main = \"Queen Contiguity\")\n\nplot(hunan$geometry, border = \"lightgrey\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\", main = \"Rook Contiguity\")"
  },
  {
    "objectID": "In-class_Ex1/In-class_Ex1.html#computing-distance-based-neighbors",
    "href": "In-class_Ex1/In-class_Ex1.html#computing-distance-based-neighbors",
    "title": "In-class Exercise 1: Spatial Weights and Applications",
    "section": "Computing Distance Based Neighbors",
    "text": "Computing Distance Based Neighbors\nIn this section, I learn how to derive distance-based weight matrices by using dnearneigh().\n\nDetermine the cut-off distance\nSteps to determine upper limit for distance band:\n\nReturn a matrix with the indices of points using knearneigh().\nConvert the knn object into a neighbors list of class nb with a list of integer vectors using knn2nb().\nReturn the length of neighbor relationship edges using nbdists().\nRemove the list structure using unlist().\n\n\n#coords <- coordinates(hunan)\nk1 <- knn2nb(knearneigh(coords))\nk1dists <- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\n\n\nComputing fixed distance weight matrix\nThe code chunk below computes the distance weight matrix.\n\nwm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\nThe code chunk below shows the content.\n\nstr(wm_d62)\n\nList of 88\n $ : int [1:5] 3 4 5 57 64\n $ : int [1:4] 57 58 78 85\n $ : int [1:4] 1 4 5 57\n $ : int [1:3] 1 3 5\n $ : int [1:4] 1 3 4 85\n $ : int 69\n $ : int [1:2] 67 84\n $ : int [1:4] 9 46 47 78\n $ : int [1:4] 8 46 68 84\n $ : int [1:4] 16 22 70 72\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:2] 11 17\n $ : int 13\n $ : int [1:4] 10 17 22 83\n $ : int [1:3] 11 14 16\n $ : int [1:3] 20 22 63\n $ : int [1:5] 20 21 73 74 82\n $ : int [1:5] 18 19 21 22 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:4] 10 16 18 20\n $ : int [1:3] 41 77 82\n $ : int [1:4] 25 28 31 54\n $ : int [1:4] 24 28 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:2] 26 29\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:2] 27 37\n $ : int 33\n $ : int [1:2] 24 36\n $ : int 50\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:5] 31 34 45 56 80\n $ : int [1:2] 29 42\n $ : int [1:3] 44 77 79\n $ : int [1:4] 40 42 43 81\n $ : int [1:3] 39 45 79\n $ : int [1:5] 23 35 45 79 82\n $ : int [1:5] 26 37 39 43 81\n $ : int [1:3] 39 42 44\n $ : int [1:2] 38 43\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:5] 8 9 35 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:4] 48 49 50 52\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:2] 48 55\n $ : int [1:5] 24 28 49 50 52\n $ : int [1:4] 48 50 53 75\n $ : int 36\n $ : int [1:5] 1 2 3 58 64\n $ : int [1:5] 2 57 64 66 68\n $ : int [1:3] 60 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:5] 12 60 62 63 87\n $ : int [1:4] 61 63 77 87\n $ : int [1:5] 12 18 61 62 83\n $ : int [1:4] 1 57 58 76\n $ : int 76\n $ : int [1:5] 58 67 68 76 84\n $ : int [1:2] 7 66\n $ : int [1:4] 9 58 66 84\n $ : int [1:2] 6 75\n $ : int [1:3] 10 72 73\n $ : int [1:2] 73 74\n $ : int [1:3] 10 11 70\n $ : int [1:4] 19 70 71 74\n $ : int [1:5] 19 21 71 73 86\n $ : int [1:2] 55 69\n $ : int [1:3] 64 65 66\n $ : int [1:3] 23 38 62\n $ : int [1:2] 2 8\n $ : int [1:4] 38 40 41 45\n $ : int [1:5] 34 35 36 45 47\n $ : int [1:5] 25 26 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:4] 12 13 16 63\n $ : int [1:4] 7 9 66 68\n $ : int [1:2] 2 5\n $ : int [1:4] 21 46 47 74\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language dnearneigh(x = coords, d1 = 0, d2 = 62, longlat = TRUE)\n - attr(*, \"dnn\")= num [1:2] 0 62\n - attr(*, \"bounds\")= chr [1:2] \"GE\" \"LE\"\n - attr(*, \"nbtype\")= chr \"distance\"\n - attr(*, \"sym\")= logi TRUE\n\n\nThe code chunk below displays the structure of weight matrix.\n\ntable(hunan$County, card(wm_d62))\n\n               \n                1 2 3 4 5 6\n  Anhua         1 0 0 0 0 0\n  Anren         0 0 0 1 0 0\n  Anxiang       0 0 0 0 1 0\n  Baojing       0 0 0 0 1 0\n  Chaling       0 0 1 0 0 0\n  Changning     0 0 1 0 0 0\n  Changsha      0 0 0 1 0 0\n  Chengbu       0 1 0 0 0 0\n  Chenxi        0 0 0 1 0 0\n  Cili          0 1 0 0 0 0\n  Dao           0 0 0 1 0 0\n  Dongan        0 0 1 0 0 0\n  Dongkou       0 0 0 1 0 0\n  Fenghuang     0 0 0 1 0 0\n  Guidong       0 0 1 0 0 0\n  Guiyang       0 0 0 1 0 0\n  Guzhang       0 0 0 0 0 1\n  Hanshou       0 0 0 1 0 0\n  Hengdong      0 0 0 0 1 0\n  Hengnan       0 0 0 0 1 0\n  Hengshan      0 0 0 0 0 1\n  Hengyang      0 0 0 0 0 1\n  Hongjiang     0 0 0 0 1 0\n  Huarong       0 0 0 1 0 0\n  Huayuan       0 0 0 1 0 0\n  Huitong       0 0 0 1 0 0\n  Jiahe         0 0 0 0 1 0\n  Jianghua      0 0 1 0 0 0\n  Jiangyong     0 1 0 0 0 0\n  Jingzhou      0 1 0 0 0 0\n  Jinshi        0 0 0 1 0 0\n  Jishou        0 0 0 0 0 1\n  Lanshan       0 0 0 1 0 0\n  Leiyang       0 0 0 1 0 0\n  Lengshuijiang 0 0 1 0 0 0\n  Li            0 0 1 0 0 0\n  Lianyuan      0 0 0 0 1 0\n  Liling        0 1 0 0 0 0\n  Linli         0 0 0 1 0 0\n  Linwu         0 0 0 1 0 0\n  Linxiang      1 0 0 0 0 0\n  Liuyang       0 1 0 0 0 0\n  Longhui       0 0 1 0 0 0\n  Longshan      0 1 0 0 0 0\n  Luxi          0 0 0 0 1 0\n  Mayang        0 0 0 0 0 1\n  Miluo         0 0 0 0 1 0\n  Nan           0 0 0 0 1 0\n  Ningxiang     0 0 0 1 0 0\n  Ningyuan      0 0 0 0 1 0\n  Pingjiang     0 1 0 0 0 0\n  Qidong        0 0 1 0 0 0\n  Qiyang        0 0 1 0 0 0\n  Rucheng       0 1 0 0 0 0\n  Sangzhi       0 1 0 0 0 0\n  Shaodong      0 0 0 0 1 0\n  Shaoshan      0 0 0 0 1 0\n  Shaoyang      0 0 0 1 0 0\n  Shimen        1 0 0 0 0 0\n  Shuangfeng    0 0 0 0 0 1\n  Shuangpai     0 0 0 1 0 0\n  Suining       0 0 0 0 1 0\n  Taojiang      0 1 0 0 0 0\n  Taoyuan       0 1 0 0 0 0\n  Tongdao       0 1 0 0 0 0\n  Wangcheng     0 0 0 1 0 0\n  Wugang        0 0 1 0 0 0\n  Xiangtan      0 0 0 1 0 0\n  Xiangxiang    0 0 0 0 1 0\n  Xiangyin      0 0 0 1 0 0\n  Xinhua        0 0 0 0 1 0\n  Xinhuang      1 0 0 0 0 0\n  Xinning       0 1 0 0 0 0\n  Xinshao       0 0 0 0 0 1\n  Xintian       0 0 0 0 1 0\n  Xupu          0 1 0 0 0 0\n  Yanling       0 0 1 0 0 0\n  Yizhang       1 0 0 0 0 0\n  Yongshun      0 0 0 1 0 0\n  Yongxing      0 0 0 1 0 0\n  You           0 0 0 1 0 0\n  Yuanjiang     0 0 0 0 1 0\n  Yuanling      1 0 0 0 0 0\n  Yueyang       0 0 1 0 0 0\n  Zhijiang      0 0 0 0 1 0\n  Zhongfang     0 0 0 1 0 0\n  Zhuzhou       0 0 0 0 1 0\n  Zixing        0 0 1 0 0 0\n\n\n\nn_comp <- n.comp.nb(wm_d62)\nn_comp$nc\n\n[1] 1\n\n\n\ntable(n_comp$comp.id)\n\n\n 1 \n88 \n\n\n\nPlotting fixed distance weight matrix\nThe code chunk below plots the distance weight matrix.\n\nplot(hunan$geometry, border = \"lightgrey\")\nplot(wm_d62, coords, add = TRUE)\nplot(k1, coords, add = TRUE, col = \"red\", length = 0.08)\n\n\n\n\nThe code chunk below plots 1st nearest neighbors and links of neighbors within cut-off distance of 62km separately.\n\npar(mfrow = c(1,2))\n\nplot(hunan$geometry, border = \"lightgrey\")\nplot(k1, coords, add = TRUE, col = \"red\", length = 0.08, main = \"1st nearest neighbours\")\n\nplot(hunan$geometry, border = \"lightgrey\")\nplot(wm_d62, coords, add = TRUE, pch = 19, cex = 0.6, main = \"Distance link\")\n\n\n\n\n\n\n\nComputing adaptive distance weight matrix\nThe code chunk below controls the number of neighbors using k-nearest neighbors.\n\nknn6 <- knn2nb(knearneigh(coords, k = 6))\nknn6\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 528 \nPercentage nonzero weights: 6.818182 \nAverage number of links: 6 \nNon-symmetric neighbours list\n\n\nThe code chunk below shows the content.\n\nstr(knn6)\n\nList of 88\n $ : int [1:6] 2 3 4 5 57 64\n $ : int [1:6] 1 3 57 58 78 85\n $ : int [1:6] 1 2 4 5 57 85\n $ : int [1:6] 1 3 5 6 69 85\n $ : int [1:6] 1 3 4 6 69 85\n $ : int [1:6] 3 4 5 69 75 85\n $ : int [1:6] 9 66 67 71 74 84\n $ : int [1:6] 9 46 47 78 80 86\n $ : int [1:6] 8 46 66 68 84 86\n $ : int [1:6] 16 19 22 70 72 73\n $ : int [1:6] 10 14 16 17 70 72\n $ : int [1:6] 13 15 60 61 63 83\n $ : int [1:6] 12 15 60 61 63 83\n $ : int [1:6] 11 15 16 17 72 83\n $ : int [1:6] 12 13 14 17 60 83\n $ : int [1:6] 10 11 17 22 72 83\n $ : int [1:6] 10 11 14 16 72 83\n $ : int [1:6] 20 22 23 63 77 83\n $ : int [1:6] 10 20 21 73 74 82\n $ : int [1:6] 18 19 21 22 23 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:6] 10 16 18 19 20 83\n $ : int [1:6] 18 20 41 77 79 82\n $ : int [1:6] 25 28 31 52 54 81\n $ : int [1:6] 24 28 31 33 54 81\n $ : int [1:6] 25 27 29 33 42 81\n $ : int [1:6] 26 29 30 37 42 81\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:6] 26 27 37 42 43 81\n $ : int [1:6] 26 27 28 33 49 81\n $ : int [1:6] 24 25 36 39 40 54\n $ : int [1:6] 24 31 50 54 55 56\n $ : int [1:6] 25 26 28 30 49 81\n $ : int [1:6] 36 40 41 45 56 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:6] 26 27 29 42 43 44\n $ : int [1:6] 23 43 44 62 77 79\n $ : int [1:6] 25 40 42 43 44 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:6] 26 27 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:6] 37 38 39 42 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:6] 8 9 35 47 78 86\n $ : int [1:6] 8 21 35 46 80 86\n $ : int [1:6] 49 50 51 52 53 55\n $ : int [1:6] 28 33 48 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:6] 28 48 49 50 52 54\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:6] 48 50 51 52 55 75\n $ : int [1:6] 24 28 49 50 51 52\n $ : int [1:6] 32 48 50 52 53 75\n $ : int [1:6] 32 34 36 78 80 85\n $ : int [1:6] 1 2 3 58 64 68\n $ : int [1:6] 2 57 64 66 68 78\n $ : int [1:6] 12 13 60 61 87 88\n $ : int [1:6] 12 13 59 61 63 87\n $ : int [1:6] 12 13 60 62 63 87\n $ : int [1:6] 12 38 61 63 77 87\n $ : int [1:6] 12 18 60 61 62 83\n $ : int [1:6] 1 3 57 58 68 76\n $ : int [1:6] 58 64 66 67 68 76\n $ : int [1:6] 9 58 67 68 76 84\n $ : int [1:6] 7 65 66 68 76 84\n $ : int [1:6] 9 57 58 66 78 84\n $ : int [1:6] 4 5 6 32 75 85\n $ : int [1:6] 10 16 19 22 72 73\n $ : int [1:6] 7 19 73 74 84 86\n $ : int [1:6] 10 11 14 16 17 70\n $ : int [1:6] 10 19 21 70 71 74\n $ : int [1:6] 19 21 71 73 84 86\n $ : int [1:6] 6 32 50 53 55 69\n $ : int [1:6] 58 64 65 66 67 68\n $ : int [1:6] 18 23 38 61 62 63\n $ : int [1:6] 2 8 9 46 58 68\n $ : int [1:6] 38 40 41 43 44 45\n $ : int [1:6] 34 35 36 41 45 47\n $ : int [1:6] 25 26 28 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:6] 12 13 15 16 22 63\n $ : int [1:6] 7 9 66 68 71 74\n $ : int [1:6] 2 3 4 5 56 69\n $ : int [1:6] 8 9 21 46 47 74\n $ : int [1:6] 59 60 61 62 63 88\n $ : int [1:6] 59 60 61 62 63 87\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language knearneigh(x = coords, k = 6)\n - attr(*, \"sym\")= logi FALSE\n - attr(*, \"type\")= chr \"knn\"\n - attr(*, \"knn-k\")= num 6\n - attr(*, \"class\")= chr \"nb\"\n\n\n\nPlotting distance based neighbors\nThe code chunk below plots the weight matrix.\n\nplot(hunan$geometry, border = \"lightgrey\")\nplot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")"
  },
  {
    "objectID": "In-class_Ex1/In-class_Ex1.html#weight-based-on-idw",
    "href": "In-class_Ex1/In-class_Ex1.html#weight-based-on-idw",
    "title": "In-class Exercise 1: Spatial Weights and Applications",
    "section": "Weight Based on IDW",
    "text": "Weight Based on IDW\nIn this section, I learn how to derive a spatial weight matrix based on Inversed Distance method.\nThe code chunk below computes the distances between areas using nbdists().\n\ndist <- nbdists(wm_q, coords, longlat = TRUE)\nids <- lapply(dist, function(x) 1/(x))\nids\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n[[2]]\n[1] 0.01535405 0.01764308 0.01925924 0.02323898 0.01719350\n\n[[3]]\n[1] 0.03916350 0.02822040 0.03695795 0.01395765\n\n[[4]]\n[1] 0.01820896 0.02822040 0.03414741 0.01539065\n\n[[5]]\n[1] 0.03695795 0.03414741 0.01524598 0.01618354\n\n[[6]]\n[1] 0.015390649 0.015245977 0.021748129 0.011883901 0.009810297\n\n[[7]]\n[1] 0.01708612 0.01473997 0.01150924 0.01872915\n\n[[8]]\n[1] 0.02022144 0.03453056 0.02529256 0.01036340 0.02284457 0.01500600 0.01515314\n\n[[9]]\n[1] 0.02022144 0.01574888 0.02109502 0.01508028 0.02902705 0.01502980\n\n[[10]]\n[1] 0.02281552 0.01387777 0.01538326 0.01346650 0.02100510 0.02631658 0.01874863\n[8] 0.01500046\n\n[[11]]\n[1] 0.01882869 0.02243492 0.02247473\n\n[[12]]\n[1] 0.02779227 0.02419652 0.02333385 0.02986130 0.02335429\n\n[[13]]\n[1] 0.02779227 0.02650020 0.02670323 0.01714243\n\n[[14]]\n[1] 0.01882869 0.01233868 0.02098555\n\n[[15]]\n[1] 0.02650020 0.01233868 0.01096284 0.01562226\n\n[[16]]\n[1] 0.02281552 0.02466962 0.02765018 0.01476814 0.01671430\n\n[[17]]\n[1] 0.01387777 0.02243492 0.02098555 0.01096284 0.02466962 0.01593341 0.01437996\n\n[[18]]\n[1] 0.02039779 0.02032767 0.01481665 0.01473691 0.01459380\n\n[[19]]\n[1] 0.01538326 0.01926323 0.02668415 0.02140253 0.01613589 0.01412874\n\n[[20]]\n[1] 0.01346650 0.02039779 0.01926323 0.01723025 0.02153130 0.01469240 0.02327034\n\n[[21]]\n[1] 0.02668415 0.01723025 0.01766299 0.02644986 0.02163800\n\n[[22]]\n[1] 0.02100510 0.02765018 0.02032767 0.02153130 0.01489296\n\n[[23]]\n[1] 0.01481665 0.01469240 0.01401432 0.02246233 0.01880425 0.01530458 0.01849605\n\n[[24]]\n[1] 0.02354598 0.01837201 0.02607264 0.01220154 0.02514180\n\n[[25]]\n[1] 0.02354598 0.02188032 0.01577283 0.01949232 0.02947957\n\n[[26]]\n[1] 0.02155798 0.01745522 0.02212108 0.02220532\n\n[[27]]\n[1] 0.02155798 0.02490625 0.01562326\n\n[[28]]\n[1] 0.01837201 0.02188032 0.02229549 0.03076171 0.02039506\n\n[[29]]\n[1] 0.02490625 0.01686587 0.01395022\n\n[[30]]\n[1] 0.02090587\n\n[[31]]\n[1] 0.02607264 0.01577283 0.01219005 0.01724850 0.01229012 0.01609781 0.01139438\n[8] 0.01150130\n\n[[32]]\n[1] 0.01220154 0.01219005 0.01712515 0.01340413 0.01280928 0.01198216 0.01053374\n[8] 0.01065655\n\n[[33]]\n[1] 0.01949232 0.01745522 0.02229549 0.02090587 0.01979045\n\n[[34]]\n[1] 0.03113041 0.03589551 0.02882915\n\n[[35]]\n[1] 0.01766299 0.02185795 0.02616766 0.02111721 0.02108253 0.01509020\n\n[[36]]\n[1] 0.01724850 0.03113041 0.01571707 0.01860991 0.02073549 0.01680129\n\n[[37]]\n[1] 0.01686587 0.02234793 0.01510990 0.01550676\n\n[[38]]\n[1] 0.01401432 0.02407426 0.02276151 0.01719415\n\n[[39]]\n[1] 0.01229012 0.02172543 0.01711924 0.02629732 0.01896385\n\n[[40]]\n[1] 0.01609781 0.01571707 0.02172543 0.01506473 0.01987922 0.01894207\n\n[[41]]\n[1] 0.02246233 0.02185795 0.02205991 0.01912542 0.01601083 0.01742892\n\n[[42]]\n[1] 0.02212108 0.01562326 0.01395022 0.02234793 0.01711924 0.01836831 0.01683518\n\n[[43]]\n[1] 0.01510990 0.02629732 0.01506473 0.01836831 0.03112027 0.01530782\n\n[[44]]\n[1] 0.01550676 0.02407426 0.03112027 0.01486508\n\n[[45]]\n[1] 0.03589551 0.01860991 0.01987922 0.02205991 0.02107101 0.01982700\n\n[[46]]\n[1] 0.03453056 0.04033752 0.02689769\n\n[[47]]\n[1] 0.02529256 0.02616766 0.04033752 0.01949145 0.02181458\n\n[[48]]\n[1] 0.02313819 0.03370576 0.02289485 0.01630057 0.01818085\n\n[[49]]\n[1] 0.03076171 0.02138091 0.02394529 0.01990000\n\n[[50]]\n[1] 0.01712515 0.02313819 0.02551427 0.02051530 0.02187179\n\n[[51]]\n[1] 0.03370576 0.02138091 0.02873854\n\n[[52]]\n[1] 0.02289485 0.02394529 0.02551427 0.02873854 0.03516672\n\n[[53]]\n[1] 0.01630057 0.01979945 0.01253977\n\n[[54]]\n[1] 0.02514180 0.02039506 0.01340413 0.01990000 0.02051530 0.03516672\n\n[[55]]\n[1] 0.01280928 0.01818085 0.02187179 0.01979945 0.01882298\n\n[[56]]\n[1] 0.01036340 0.01139438 0.01198216 0.02073549 0.01214479 0.01362855 0.01341697\n\n[[57]]\n[1] 0.028079221 0.017643082 0.031423501 0.029114131 0.013520292 0.009903702\n\n[[58]]\n[1] 0.01925924 0.03142350 0.02722997 0.01434859 0.01567192\n\n[[59]]\n[1] 0.01696711 0.01265572 0.01667105 0.01785036\n\n[[60]]\n[1] 0.02419652 0.02670323 0.01696711 0.02343040\n\n[[61]]\n[1] 0.02333385 0.01265572 0.02343040 0.02514093 0.02790764 0.01219751 0.02362452\n\n[[62]]\n[1] 0.02514093 0.02002219 0.02110260\n\n[[63]]\n[1] 0.02986130 0.02790764 0.01407043 0.01805987\n\n[[64]]\n[1] 0.02911413 0.01689892\n\n[[65]]\n[1] 0.02471705\n\n[[66]]\n[1] 0.01574888 0.01726461 0.03068853 0.01954805 0.01810569\n\n[[67]]\n[1] 0.01708612 0.01726461 0.01349843 0.01361172\n\n[[68]]\n[1] 0.02109502 0.02722997 0.03068853 0.01406357 0.01546511\n\n[[69]]\n[1] 0.02174813 0.01645838 0.01419926\n\n[[70]]\n[1] 0.02631658 0.01963168 0.02278487\n\n[[71]]\n[1] 0.01473997 0.01838483 0.03197403\n\n[[72]]\n[1] 0.01874863 0.02247473 0.01476814 0.01593341 0.01963168\n\n[[73]]\n[1] 0.01500046 0.02140253 0.02278487 0.01838483 0.01652709\n\n[[74]]\n[1] 0.01150924 0.01613589 0.03197403 0.01652709 0.01342099 0.02864567\n\n[[75]]\n[1] 0.011883901 0.010533736 0.012539774 0.018822977 0.016458383 0.008217581\n\n[[76]]\n[1] 0.01352029 0.01434859 0.01689892 0.02471705 0.01954805 0.01349843 0.01406357\n\n[[77]]\n[1] 0.014736909 0.018804247 0.022761507 0.012197506 0.020022195 0.014070428\n[7] 0.008440896\n\n[[78]]\n[1] 0.02323898 0.02284457 0.01508028 0.01214479 0.01567192 0.01546511 0.01140779\n\n[[79]]\n[1] 0.01530458 0.01719415 0.01894207 0.01912542 0.01530782 0.01486508 0.02107101\n\n[[80]]\n[1] 0.01500600 0.02882915 0.02111721 0.01680129 0.01601083 0.01982700 0.01949145\n[8] 0.01362855\n\n[[81]]\n[1] 0.02947957 0.02220532 0.01150130 0.01979045 0.01896385 0.01683518\n\n[[82]]\n[1] 0.02327034 0.02644986 0.01849605 0.02108253 0.01742892\n\n[[83]]\n[1] 0.023354289 0.017142433 0.015622258 0.016714303 0.014379961 0.014593799\n[7] 0.014892965 0.018059871 0.008440896\n\n[[84]]\n[1] 0.01872915 0.02902705 0.01810569 0.01361172 0.01342099 0.01297994\n\n[[85]]\n [1] 0.011451133 0.017193502 0.013957649 0.016183544 0.009810297 0.010656545\n [7] 0.013416965 0.009903702 0.014199260 0.008217581 0.011407794\n\n[[86]]\n[1] 0.01515314 0.01502980 0.01412874 0.02163800 0.01509020 0.02689769 0.02181458\n[8] 0.02864567 0.01297994\n\n[[87]]\n[1] 0.01667105 0.02362452 0.02110260 0.02058034\n\n[[88]]\n[1] 0.01785036 0.02058034\n\n\n\nRow-standardized weights matrix\nThe code chunk below assigns weights to each neighboring polygon.\n\nrswm_q <- nb2listw(wm_q, style = \"W\", zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\nThe code chunk below shows the weight of the first polygon’s four neighbors type.\n\nrswm_q$weights[10]\n\n[[1]]\n[1] 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125\n\n\nThe code chunk below derives a row standardized distance weight matrix.\n\nrswm_ids <- nb2listw(wm_q, glist = ids, style = \"B\", zero.policy = TRUE)\nrswm_ids\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn       S0        S1     S2\nB 88 7744 8.786867 0.3776535 3.8137\n\n\n\nrswm_ids$weights[1]\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n\n\nsummary(unlist(rswm_ids$weights))\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n0.008218 0.015088 0.018739 0.019614 0.022823 0.040338"
  },
  {
    "objectID": "In-class_Ex1/In-class_Ex1.html#application-of-spatial-weight-matrix",
    "href": "In-class_Ex1/In-class_Ex1.html#application-of-spatial-weight-matrix",
    "title": "In-class Exercise 1: Spatial Weights and Applications",
    "section": "Application of Spatial Weight Matrix",
    "text": "Application of Spatial Weight Matrix\nIn this section, I learn how to create 4 different spatial lagged variables.\n\nSpatial lag with row-standardized weights\nThe code chunk below computes the average neighbor GDPPC value for each polygon, which referred to as spatially lagged values.\n\nGDPPC.lag <- lag.listw(rswm_q, hunan$GDPPC)\nGDPPC.lag\n\n [1] 24847.20 22724.80 24143.25 27737.50 27270.25 21248.80 43747.00 33582.71\n [9] 45651.17 32027.62 32671.00 20810.00 25711.50 30672.33 33457.75 31689.20\n[17] 20269.00 23901.60 25126.17 21903.43 22718.60 25918.80 20307.00 20023.80\n[25] 16576.80 18667.00 14394.67 19848.80 15516.33 20518.00 17572.00 15200.12\n[33] 18413.80 14419.33 24094.50 22019.83 12923.50 14756.00 13869.80 12296.67\n[41] 15775.17 14382.86 11566.33 13199.50 23412.00 39541.00 36186.60 16559.60\n[49] 20772.50 19471.20 19827.33 15466.80 12925.67 18577.17 14943.00 24913.00\n[57] 25093.00 24428.80 17003.00 21143.75 20435.00 17131.33 24569.75 23835.50\n[65] 26360.00 47383.40 55157.75 37058.00 21546.67 23348.67 42323.67 28938.60\n[73] 25880.80 47345.67 18711.33 29087.29 20748.29 35933.71 15439.71 29787.50\n[81] 18145.00 21617.00 29203.89 41363.67 22259.09 44939.56 16902.00 16930.00\n\n\nThe code chunk below retrieves the 5 countries’ GDPPC.\n\nnb1 <- wm_q[[1]]\nnb1 <- hunan$GDPPC[nb1]\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\nThe code chunk below appends the spatially lag GDPPC values onto hunan sf data.\n\nlag.list <- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))\nlag.res <- as.data.frame(lag.list)\ncolnames(lag.res) <- c(\"NAME_3\", \"lag GDPPC\")\nhunan <- left_join(hunan,lag.res)\n\nJoining, by = \"NAME_3\"\n\n\nThe code chunk below shows the average neighboring income values for each country.\n\nhead(hunan)\n\nSimple feature collection with 6 features and 36 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 110.4922 ymin: 28.61762 xmax: 112.3013 ymax: 30.12812\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3   ENGTYPE_3 Shape_Leng Shape_Area  County    City\n1 Changde 21098 Anxiang      County   1.869074 0.10056190 Anxiang Changde\n2 Changde 21100 Hanshou      County   2.360691 0.19978745 Hanshou Changde\n3 Changde 21101  Jinshi County City   1.425620 0.05302413  Jinshi Changde\n4 Changde 21102      Li      County   3.474325 0.18908121      Li Changde\n5 Changde 21103   Linli      County   2.289506 0.11450357   Linli Changde\n6 Changde 21104  Shimen      County   4.171918 0.37194707  Shimen Changde\n  avg_wage deposite     FAI Gov_Rev Gov_Exp     GDP GDPPC     GIO   Loan  NIPCR\n1    31935   5517.2  3541.0  243.64  1779.5 12482.0 23667  5108.9 2806.9 7693.7\n2    32265   7979.0  8665.0  386.13  2062.4 15788.0 20981 13491.0 4550.0 8269.9\n3    28692   4581.7  4777.0  373.31  1148.4  8706.9 34592 10935.0 2242.0 8169.9\n4    32541  13487.0 16066.0  709.61  2459.5 20322.0 24473 18402.0 6748.0 8377.0\n5    32667    564.1  7781.2  336.86  1538.7 10355.0 25554  8214.0  358.0 8143.1\n6    33261   8334.4 10531.0  548.33  2178.8 16293.0 27137 17795.0 6026.5 6156.0\n   Bed    Emp  EmpR EmpRT Pri_Stu Sec_Stu Household Household_R NOIP Pop_R\n1 1931 336.39 270.5 205.9  19.584  17.819     148.1       135.4   53 346.0\n2 2560 456.78 388.8 246.7  42.097  33.029     240.2       208.7   95 553.2\n3  848 122.78  82.1  61.7   8.723   7.592      81.9        43.7   77  92.4\n4 2038 513.44 426.8 227.1  38.975  33.938     268.5       256.0   96 539.7\n5 1440 307.36 272.2 100.8  23.286  18.943     129.1       157.2   99 246.6\n6 2502 392.05 329.6 193.8  29.245  26.104     190.6       184.7  122 399.2\n    RSCG Pop_T    Agri Service Disp_Inc      RORP    ROREmp lag GDPPC\n1 3957.9 528.3 4524.41   14100    16610 0.6549309 0.8041262  24847.20\n2 4460.5 804.6 6545.35   17727    18925 0.6875466 0.8511756  22724.80\n3 3683.0 251.8 2562.46    7525    19498 0.3669579 0.6686757  24143.25\n4 7110.2 832.5 7562.34   53160    18985 0.6482883 0.8312558  27737.50\n5 3604.9 409.3 3583.91    7031    18604 0.6024921 0.8856065  27270.25\n6 6490.7 600.5 5266.51    6981    19275 0.6647794 0.8407091  21248.80\n                        geometry\n1 POLYGON ((112.0625 29.75523...\n2 POLYGON ((112.2288 29.11684...\n3 POLYGON ((111.8927 29.6013,...\n4 POLYGON ((111.3731 29.94649...\n5 POLYGON ((111.6324 29.76288...\n6 POLYGON ((110.8825 30.11675...\n\n\nThe code chunk below plots both GDPPC and spatial lag GDPPC.\n\ngdppc <- qtm(hunan, \"GDPPC\")\nlag_gdppc <- qtm(hunan, \"lag GDPPC\")\ntmap_arrange(gdppc, lag_gdppc, asp = 1, ncol = 2)\n\n\n\n\n\n\nSpatial lag as a sum of neighboring values\nThe code chunk below assigns a value of 1 per each neighbor.\n\nb_weights <- lapply(wm_q, function(x) 0*x + 1)\nb_weights2 <- nb2listw(wm_q, glist = b_weights, style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1    S2\nB 88 7744 448 896 10224\n\n\nThe code chunk below computes a lag variable from weight and GDPPC.\n\nlag_sum <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nlag.res <- as.data.frame(lag_sum)\ncolnames(lag.res) <- c(\"NAME_3\", \"lag_sum GDPPC\")\n\n\nlag_sum\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 124236 113624  96573 110950 109081 106244 174988 235079 273907 256221\n[11]  98013 104050 102846  92017 133831 158446 141883 119508 150757 153324\n[21] 113593 129594 142149 100119  82884  74668  43184  99244  46549  20518\n[31] 140576 121601  92069  43258 144567 132119  51694  59024  69349  73780\n[41]  94651 100680  69398  52798 140472 118623 180933  82798  83090  97356\n[51]  59482  77334  38777 111463  74715 174391 150558 122144  68012  84575\n[61] 143045  51394  98279  47671  26360 236917 220631 185290  64640  70046\n[71] 126971 144693 129404 284074 112268 203611 145238 251536 108078 238300\n[81] 108870 108085 262835 248182 244850 404456  67608  33860\n\n\nThe code chunk below appends the lag_sum GDPPC field into hunan sf data.\n\nhunan <- left_join(hunan, lag.res)\n\nJoining, by = \"NAME_3\"\n\n\nThe code chunk below plots GDPPC and spatial lag sum GDPPC.\n\ngdppc <- qtm(hunan, \"GDPPC\")\nlag_sum_gdppc <- qtm(hunan, \"lag_sum GDPPC\")\ntmap_arrange(gdppc, lag_sum_gdppc, asp = 1, ncol = 2)\n\n\n\n\n\n\nSpatial window average\nThe code chunk assigns k6 to a new variable.\n\nwm_q1 <- wm_q\n\nThe code chunk below adds diagonal element to the neighboring list.\n\ninclude.self(wm_q1)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\n\nThe code chunk below obtains weight.\n\nwm_q1 <- nb2listw(wm_q1)\nwm_q1\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\nThe code chunk below creates the lag variable from weight structure and GDPPC variable.\n\nlag_w_avg_gpdpc <- lag.listw(wm_q1, hunan$GDPPC)\nlag_w_avg_gpdpc\n\n [1] 24847.20 22724.80 24143.25 27737.50 27270.25 21248.80 43747.00 33582.71\n [9] 45651.17 32027.62 32671.00 20810.00 25711.50 30672.33 33457.75 31689.20\n[17] 20269.00 23901.60 25126.17 21903.43 22718.60 25918.80 20307.00 20023.80\n[25] 16576.80 18667.00 14394.67 19848.80 15516.33 20518.00 17572.00 15200.12\n[33] 18413.80 14419.33 24094.50 22019.83 12923.50 14756.00 13869.80 12296.67\n[41] 15775.17 14382.86 11566.33 13199.50 23412.00 39541.00 36186.60 16559.60\n[49] 20772.50 19471.20 19827.33 15466.80 12925.67 18577.17 14943.00 24913.00\n[57] 25093.00 24428.80 17003.00 21143.75 20435.00 17131.33 24569.75 23835.50\n[65] 26360.00 47383.40 55157.75 37058.00 21546.67 23348.67 42323.67 28938.60\n[73] 25880.80 47345.67 18711.33 29087.29 20748.29 35933.71 15439.71 29787.50\n[81] 18145.00 21617.00 29203.89 41363.67 22259.09 44939.56 16902.00 16930.00\n\n\nThe code chunk below converts lag variable listw object into data frame using as.data.frame().\n\nlag.list.wm_q1 <- list(hunan$NAME_3, lag.listw(wm_q1, hunan$GDPPC))\nlag_wm_q1.res <- as.data.frame(lag.list.wm_q1)\ncolnames(lag_wm_q1.res) <- c(\"NAME_3\", \"lag_window_avg GDPPC\")\n\nThe code chunk below appends lag_window_avg GDPPC values onto hunan sf data frame.\n\nhunan <- left_join(hunan, lag_wm_q1.res)\n\nJoining, by = \"NAME_3\"\n\n\nThe code chunk below plots GDPPC and lag_window_avg GDPPC map.\n\ngdppc <- qtm(hunan, \"GDPPC\")\nw_avg_gdppc <- qtm(hunan, \"lag_window_avg GDPPC\")\ntmap_arrange(gdppc, w_avg_gdppc, asp = 1, ncol = 2)\n\n\n\n\n\n\nSpatial window sum\n\nwm_q1 <- wm_q\n\n\ninclude.self(wm_q1)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\n\n\nwm_q1\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\n\nThe code chunk below assigns binary weights to the neighbor structure that includes diagonal element.\n\nb_weights <- lapply(wm_q1, function(x) 0*x + 1)\nb_weights[1]\n\n[[1]]\n[1] 1 1 1 1 1\n\n\nThe code chunk below assigns weight values using nb2listw() and glist().\n\nb_weights2 <- nb2listw(wm_q1, glist = b_weights, style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1    S2\nB 88 7744 448 896 10224\n\n\nThe code chunk below computes lag variable with lag.listw().\n\nw_sum_gdppc <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nw_sum_gdppc\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 124236 113624  96573 110950 109081 106244 174988 235079 273907 256221\n[11]  98013 104050 102846  92017 133831 158446 141883 119508 150757 153324\n[21] 113593 129594 142149 100119  82884  74668  43184  99244  46549  20518\n[31] 140576 121601  92069  43258 144567 132119  51694  59024  69349  73780\n[41]  94651 100680  69398  52798 140472 118623 180933  82798  83090  97356\n[51]  59482  77334  38777 111463  74715 174391 150558 122144  68012  84575\n[61] 143045  51394  98279  47671  26360 236917 220631 185290  64640  70046\n[71] 126971 144693 129404 284074 112268 203611 145238 251536 108078 238300\n[81] 108870 108085 262835 248182 244850 404456  67608  33860\n\n\nThe code chunk below converts lag variable listw object into data frame using as.data.frame().\n\nw_sum_gdppc.res <- as.data.frame(w_sum_gdppc)\ncolnames(w_sum_gdppc.res) <- c(\"NAME_3\", \"w_sum GDPPC\")\n\nThe code chunk below appends w_sum GDPPC values onto hunan sf data frame.\n\nhunan <- left_join(hunan, w_sum_gdppc.res)\n\nJoining, by = \"NAME_3\"\n\n\nThe code chunk below plots GDPPC and lag_sum GDPPC map.\n\ngdppc <- qtm(hunan, \"GDPPC\")\nw_sum_gdppc <- qtm(hunan, \"w_sum GDPPC\")\ntmap_arrange(gdppc, w_sum_gdppc, asp = 1, ncol = 2)"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2.html",
    "href": "Hands-on_Ex2/Hands-on_Ex2.html",
    "title": "Hands-on Exercise 2: Global and Local Measures of Spatial Autocorrelation",
    "section": "",
    "text": "In this hands-on exercise, I learn how to compute Global and Local Measure of Spatial Autocorrelation (GLSA)."
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2.html#getting-started",
    "href": "Hands-on_Ex2/Hands-on_Ex2.html#getting-started",
    "title": "Hands-on Exercise 2: Global and Local Measures of Spatial Autocorrelation",
    "section": "Getting Started",
    "text": "Getting Started\nThe code chunk below will install and load spdep, sf, tmap and tidyverse packages.\n\npacman::p_load(sf, spdep, tmap, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2.html#importing-data-into-r",
    "href": "Hands-on_Ex2/Hands-on_Ex2.html#importing-data-into-r",
    "title": "Hands-on Exercise 2: Global and Local Measures of Spatial Autocorrelation",
    "section": "Importing Data into R",
    "text": "Importing Data into R\n\nImporting shapefile into R\nThe code chunk below uses st_read() function to import shapefile as simple feature data frame.\n\nhunan <- st_read(dsn = \"data/geospatial\", layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `D:\\GuanboShao\\ISSS624\\Hands-on_Ex2\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\nThe code chunk below imports csv file into R as data frame.\n\nhunan2012 <- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nPerforming relational join\nThe code chunk below updates the attribute table of hunan’s spatial polygons data frame with the attribute fields of hunan2012 data frame.\n\nhunan <- left_join(hunan, hunan2012)\n\nJoining, by = \"County\"\n\n\n\n\nVisualizing Regional Development Indicator\nThe code chunk below prepares a basemap and a choropleth map showing distribution of GDPPC 2012.\n\nequal <- tm_shape(hunan) +\n  tm_fill(\"GDPPC\", n = 5, style = \"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal interval classification\")\n\nquantile <- tm_shape(hunan) +\n  tm_fill(\"GDPPC\", n = 5, style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal quantile classification\")\n\ntmap_arrange(equal, quantile, asp = 1, ncol = 2)"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2.html#global-spatial-autocorrelation",
    "href": "Hands-on_Ex2/Hands-on_Ex2.html#global-spatial-autocorrelation",
    "title": "Hands-on Exercise 2: Global and Local Measures of Spatial Autocorrelation",
    "section": "Global Spatial Autocorrelation",
    "text": "Global Spatial Autocorrelation\nIn this section, I learn how to compute global spatial autocorrelation statistics and to perform spatial complete randomness test.\n\nComputing contiguity spatial weights\nThe code chunk below calculates Queen contiguity weight matrix.\n\nwm_q <- poly2nb(hunan, queen = TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\n\n\nRow-standardized weights matrix\nThe code chunk below assigns weights to each neighboring polygon.\n\nrswm_q <- nb2listw(wm_q, style = \"W\", zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\n\n\nGlobal Spatial Autocorrelation: Moran’s I\nIn this section, I learn how to perform Moran’s I statistics testing by using moran.test().\n\nMoran’s I test\nThe code chunk below performs Moran’s I testing.\n\nmoran.test(hunan$GDPPC, listw = rswm_q, zero.policy = TRUE, na.action = na.omit)\n\n\n    Moran I test under randomisation\n\ndata:  hunan$GDPPC  \nweights: rswm_q    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\n\n\nComputing Monte Carlo Moran’s I\nThe code chunk below performs permutation test for Moran’s I statistics by using moran.mc().\n\nset.seed(1234)\nbperm = moran.mc(hunan$GDPPC, listw = rswm_q, nsim = 999, zero.policy = TRUE, na.action = na.omit)\nbperm\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  hunan$GDPPC \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.30075, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\n\n\nVisualizing Monte Carlo Moran’s I\nThe code chunks below plot the distribution of statistical values as a histogram.\n\nmean(bperm$res[1:999])\n\n[1] -0.01504572\n\n\n\nvar(bperm$res[1:999])\n\n[1] 0.004371574\n\n\n\nsummary(bperm$res[1:999])\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-0.18339 -0.06168 -0.02125 -0.01505  0.02611  0.27593 \n\n\n\nhist(bperm$res, freq = TRUE, breaks = 20, xlab = \"Simulated Moran's I\")\nabline(v = 0, col = \"red\") \n\n\n\n\n\n# df = data.frame(bperm$res)\n# ggplot(data = df,\n#        aes(x = as.numeric(`res`)))+\n#   geom_histogram(bins = 20, color = \"black\", fill = \"light blue\") +\n#   labs(title = \"Histogram of bperm$res\",\n#       x = \"Simulated Moran's I\", y = \"Frequency\")\n\n\n\n\nGlobal Spatial Autocorrelation: Geary’s\nIn this section, I learn how to perform Geary’s c statistics testing.\n\nGeary’s C test\nThe code chunk below performs Geary’s C test by using geary.test().\n\ngeary.test(hunan$GDPPC, listw = rswm_q)\n\n\n    Geary C test under randomisation\n\ndata:  hunan$GDPPC \nweights: rswm_q \n\nGeary C statistic standard deviate = 3.6108, p-value = 0.0001526\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n        0.6907223         1.0000000         0.0073364 \n\n\n\n\nComputing Monte Carlo Geary’s C\nThe code chunk below performs permutation test for Geary’s C statistics by using geary.mc().\n\nset.seed(1234)\nbperm = geary.mc(hunan$GDPPC, listw = rswm_q, nsim = 999)\nbperm\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  hunan$GDPPC \nweights: rswm_q \nnumber of simulations + 1: 1000 \n\nstatistic = 0.69072, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n\n\n\nVisualizing the Monte Carlo Geary’s C\nThe code chunks below plot the distribution of simulated values as a histogram.\n\nmean(bperm$res[1:999])\n\n[1] 1.004402\n\n\n\nvar(bperm$res[1:999])\n\n[1] 0.007436493\n\n\n\nsummary(bperm$res[1:999])\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.7142  0.9502  1.0052  1.0044  1.0595  1.2722 \n\n\n\nhist(bperm$res, freq = TRUE, breaks = 20, xlab = \"Simulated Geary c\")\nabline(v = 1, col = \"red\")"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2.html#spatial-correlogram",
    "href": "Hands-on_Ex2/Hands-on_Ex2.html#spatial-correlogram",
    "title": "Hands-on Exercise 2: Global and Local Measures of Spatial Autocorrelation",
    "section": "Spatial Correlogram",
    "text": "Spatial Correlogram\n\nCompute Moran’s I correlogram\nThe code chunk below computes a 6-lag spatial correlogram of GDPPC by using sp.correlogram().\n\nMI_corr <- sp.correlogram(wm_q, hunan$GDPPC, order=6, method=\"I\", style=\"W\")\nplot(MI_corr)\n\n\n\n\nThe code chunk below shows the full analysis report.\n\nprint(MI_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Moran's I\n         estimate expectation   variance standard deviate Pr(I) two sided    \n1 (88)  0.3007500  -0.0114943  0.0043484           4.7351       2.189e-06 ***\n2 (88)  0.2060084  -0.0114943  0.0020962           4.7505       2.029e-06 ***\n3 (88)  0.0668273  -0.0114943  0.0014602           2.0496        0.040400 *  \n4 (88)  0.0299470  -0.0114943  0.0011717           1.2107        0.226015    \n5 (88) -0.1530471  -0.0114943  0.0012440          -4.0134       5.984e-05 ***\n6 (88) -0.1187070  -0.0114943  0.0016791          -2.6164        0.008886 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\n\n\nCompute Geary’s C correlogram and plot\nThe code chunk below computes a 6-lag spatial correlogram of GDPPC by using sp.correlogram().\n\nGC_corr <- sp.correlogram(wm_q, hunan$GDPPC, order=6, method=\"C\", style=\"W\")\nplot(GC_corr)\n\n\n\n\n\nprint(GC_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Geary's C\n        estimate expectation  variance standard deviate Pr(I) two sided    \n1 (88) 0.6907223   1.0000000 0.0073364          -3.6108       0.0003052 ***\n2 (88) 0.7630197   1.0000000 0.0049126          -3.3811       0.0007220 ***\n3 (88) 0.9397299   1.0000000 0.0049005          -0.8610       0.3892612    \n4 (88) 1.0098462   1.0000000 0.0039631           0.1564       0.8757128    \n5 (88) 1.2008204   1.0000000 0.0035568           3.3673       0.0007592 ***\n6 (88) 1.0773386   1.0000000 0.0058042           1.0151       0.3100407    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2.html#cluster-and-outlier-analysis",
    "href": "Hands-on_Ex2/Hands-on_Ex2.html#cluster-and-outlier-analysis",
    "title": "Hands-on Exercise 2: Global and Local Measures of Spatial Autocorrelation",
    "section": "Cluster and Outlier Analysis",
    "text": "Cluster and Outlier Analysis\nIn this section, I learn how to use appropriate Local Indicators for Spatial Association (LISA).\n\nComputing local Moran’s I\nThe code chunk below computes local Moran’s I of GDPPC2012 at country level by using localmoran().\n\nfips <- order(hunan$County)\nlocalMI <- localmoran(hunan$GDPPC, rswm_q)\nhead(localMI)\n\n            Ii          E.Ii       Var.Ii        Z.Ii Pr(z != E(Ii))\n1 -0.001468468 -2.815006e-05 4.723841e-04 -0.06626904      0.9471636\n2  0.025878173 -6.061953e-04 1.016664e-02  0.26266425      0.7928094\n3 -0.011987646 -5.366648e-03 1.133362e-01 -0.01966705      0.9843090\n4  0.001022468 -2.404783e-07 5.105969e-06  0.45259801      0.6508382\n5  0.014814881 -6.829362e-05 1.449949e-03  0.39085814      0.6959021\n6 -0.038793829 -3.860263e-04 6.475559e-03 -0.47728835      0.6331568\n\n\nThe code chunk below lists the content of the local Moran matrix by using printCoefmat().\n\nprintCoefmat(data.frame(localMI[fips,], row.names = hunan$County[fips]), check.names = FALSE)\n\n                       Ii        E.Ii      Var.Ii        Z.Ii Pr.z....E.Ii..\nAnhua         -2.2493e-02 -5.0048e-03  5.8235e-02 -7.2467e-02         0.9422\nAnren         -3.9932e-01 -7.0111e-03  7.0348e-02 -1.4791e+00         0.1391\nAnxiang       -1.4685e-03 -2.8150e-05  4.7238e-04 -6.6269e-02         0.9472\nBaojing        3.4737e-01 -5.0089e-03  8.3636e-02  1.2185e+00         0.2230\nChaling        2.0559e-02 -9.6812e-04  2.7711e-02  1.2932e-01         0.8971\nChangning     -2.9868e-05 -9.0010e-09  1.5105e-07 -7.6828e-02         0.9388\nChangsha       4.9022e+00 -2.1348e-01  2.3194e+00  3.3590e+00         0.0008\nChengbu        7.3725e-01 -1.0534e-02  2.2132e-01  1.5895e+00         0.1119\nChenxi         1.4544e-01 -2.8156e-03  4.7116e-02  6.8299e-01         0.4946\nCili           7.3176e-02 -1.6747e-03  4.7902e-02  3.4200e-01         0.7324\nDao            2.1420e-01 -2.0824e-03  4.4123e-02  1.0297e+00         0.3032\nDongan         1.5210e-01 -6.3485e-04  1.3471e-02  1.3159e+00         0.1882\nDongkou        5.2918e-01 -6.4461e-03  1.0748e-01  1.6338e+00         0.1023\nFenghuang      1.8013e-01 -6.2832e-03  1.3257e-01  5.1198e-01         0.6087\nGuidong       -5.9160e-01 -1.3086e-02  3.7003e-01 -9.5104e-01         0.3416\nGuiyang        1.8240e-01 -3.6908e-03  3.2610e-02  1.0305e+00         0.3028\nGuzhang        2.8466e-01 -8.5054e-03  1.4152e-01  7.7931e-01         0.4358\nHanshou        2.5878e-02 -6.0620e-04  1.0167e-02  2.6266e-01         0.7928\nHengdong       9.9964e-03 -4.9063e-04  6.7742e-03  1.2742e-01         0.8986\nHengnan        2.8064e-02 -3.2160e-04  3.7597e-03  4.6294e-01         0.6434\nHengshan      -5.8201e-03 -3.0437e-05  5.1076e-04 -2.5618e-01         0.7978\nHengyang       6.2997e-02 -1.3046e-03  2.1865e-02  4.3486e-01         0.6637\nHongjiang      1.8790e-01 -2.3019e-03  3.1725e-02  1.0678e+00         0.2856\nHuarong       -1.5389e-02 -1.8667e-03  8.1030e-02 -4.7503e-02         0.9621\nHuayuan        8.3772e-02 -8.5569e-04  2.4495e-02  5.4072e-01         0.5887\nHuitong        2.5997e-01 -5.2447e-03  1.1077e-01  7.9685e-01         0.4255\nJiahe         -1.2431e-01 -3.0550e-03  5.1111e-02 -5.3633e-01         0.5917\nJianghua       2.8651e-01 -3.8280e-03  8.0968e-02  1.0204e+00         0.3076\nJiangyong      2.4337e-01 -2.7082e-03  1.1746e-01  7.1800e-01         0.4728\nJingzhou       1.8270e-01 -8.5106e-04  2.4363e-02  1.1759e+00         0.2396\nJinshi        -1.1988e-02 -5.3666e-03  1.1334e-01 -1.9667e-02         0.9843\nJishou        -2.8680e-01 -2.6305e-03  4.4028e-02 -1.3543e+00         0.1756\nLanshan        6.3334e-02 -9.6365e-04  2.0441e-02  4.4972e-01         0.6529\nLeiyang        1.1581e-02 -1.4948e-04  2.5082e-03  2.3422e-01         0.8148\nLengshuijiang -1.7903e+00 -8.2129e-02  2.1598e+00 -1.1623e+00         0.2451\nLi             1.0225e-03 -2.4048e-07  5.1060e-06  4.5260e-01         0.6508\nLianyuan      -1.4672e-01 -1.8983e-03  1.9145e-02 -1.0467e+00         0.2952\nLiling         1.3774e+00 -1.5097e-02  4.2601e-01  2.1335e+00         0.0329\nLinli          1.4815e-02 -6.8294e-05  1.4499e-03  3.9086e-01         0.6959\nLinwu         -2.4621e-03 -9.0703e-06  1.9258e-04 -1.7676e-01         0.8597\nLinxiang       6.5904e-02 -2.9028e-03  2.5470e-01  1.3634e-01         0.8916\nLiuyang        3.3688e+00 -7.7502e-02  1.5180e+00  2.7972e+00         0.0052\nLonghui        8.0801e-01 -1.1377e-02  1.5538e-01  2.0787e+00         0.0376\nLongshan       7.5663e-01 -1.1100e-02  3.1449e-01  1.3690e+00         0.1710\nLuxi           1.8177e-01 -2.4855e-03  3.4249e-02  9.9561e-01         0.3194\nMayang         2.1852e-01 -5.8773e-03  9.8049e-02  7.1663e-01         0.4736\nMiluo          1.8704e+00 -1.6927e-02  2.7925e-01  3.5715e+00         0.0004\nNan           -9.5789e-03 -4.9497e-04  6.8341e-03 -1.0988e-01         0.9125\nNingxiang      1.5607e+00 -7.3878e-02  8.0012e-01  1.8274e+00         0.0676\nNingyuan       2.0910e-01 -7.0884e-03  8.2306e-02  7.5356e-01         0.4511\nPingjiang     -9.8964e-01 -2.6457e-03  5.6027e-02 -4.1698e+00         0.0000\nQidong         1.1806e-01 -2.1207e-03  2.4747e-02  7.6396e-01         0.4449\nQiyang         6.1966e-02 -7.3374e-04  8.5743e-03  6.7712e-01         0.4983\nRucheng       -3.6992e-01 -8.8999e-03  2.5272e-01 -7.1814e-01         0.4727\nSangzhi        2.5053e-01 -4.9470e-03  6.8000e-02  9.7972e-01         0.3272\nShaodong      -3.2659e-02 -3.6592e-05  5.0546e-04 -1.4510e+00         0.1468\nShaoshan       2.1223e+00 -5.0227e-02  1.3668e+00  1.8583e+00         0.0631\nShaoyang       5.9499e-01 -1.1253e-02  1.3012e-01  1.6807e+00         0.0928\nShimen        -3.8794e-02 -3.8603e-04  6.4756e-03 -4.7729e-01         0.6332\nShuangfeng     9.2835e-03 -2.2867e-03  3.1516e-02  6.5174e-02         0.9480\nShuangpai      8.0591e-02 -3.1366e-04  8.9838e-03  8.5358e-01         0.3933\nSuining        3.7585e-01 -3.5933e-03  4.1870e-02  1.8544e+00         0.0637\nTaojiang      -2.5394e-01 -1.2395e-03  1.4477e-02 -2.1002e+00         0.0357\nTaoyuan        1.4729e-02 -1.2039e-04  8.5103e-04  5.0903e-01         0.6107\nTongdao        4.6482e-01 -6.9870e-03  1.9879e-01  1.0582e+00         0.2900\nWangcheng      4.4220e+00 -1.1067e-01  1.3596e+00  3.8873e+00         0.0001\nWugang         7.1003e-01 -7.8144e-03  1.0710e-01  2.1935e+00         0.0283\nXiangtan       2.4530e-01 -3.6457e-04  3.2319e-03  4.3213e+00         0.0000\nXiangxiang     2.6271e-01 -1.2703e-03  2.1290e-02  1.8092e+00         0.0704\nXiangyin       5.4525e-01 -4.7442e-03  7.9236e-02  1.9539e+00         0.0507\nXinhua         1.1810e-01 -6.2649e-03  8.6001e-02  4.2409e-01         0.6715\nXinhuang       1.5725e-01 -4.1820e-03  3.6648e-01  2.6667e-01         0.7897\nXinning        6.8928e-01 -9.6674e-03  2.0328e-01  1.5502e+00         0.1211\nXinshao        5.7578e-02 -8.5932e-03  1.1769e-01  1.9289e-01         0.8470\nXintian       -7.4050e-03 -5.1493e-03  1.0877e-01 -6.8395e-03         0.9945\nXupu           3.2406e-01 -5.7468e-03  5.7735e-02  1.3726e+00         0.1699\nYanling       -6.9021e-02 -5.9211e-04  9.9306e-03 -6.8667e-01         0.4923\nYizhang       -2.6844e-01 -2.2463e-03  4.7588e-02 -1.2202e+00         0.2224\nYongshun       6.3064e-01 -1.1350e-02  1.8830e-01  1.4795e+00         0.1390\nYongxing       4.3411e-01 -9.0735e-03  1.5088e-01  1.1409e+00         0.2539\nYou            7.8750e-02 -7.2728e-03  1.2116e-01  2.4714e-01         0.8048\nYuanjiang      2.0004e-04 -1.7760e-04  2.9798e-03  6.9181e-03         0.9945\nYuanling       8.7298e-03 -2.2981e-06  2.3221e-05  1.8121e+00         0.0700\nYueyang        4.1189e-02 -1.9768e-04  2.3113e-03  8.6085e-01         0.3893\nZhijiang       1.0476e-01 -7.8123e-04  1.3100e-02  9.2214e-01         0.3565\nZhongfang     -2.2685e-01 -2.1455e-03  3.5927e-02 -1.1855e+00         0.2358\nZhuzhou        3.2864e-01 -5.2432e-04  7.2391e-03  3.8688e+00         0.0001\nZixing        -7.6849e-01 -8.8210e-02  9.4057e-01 -7.0144e-01         0.4830\n\n\n\nMapping the local Moran’s I\nThe code chunk below appends the local Moran’s I data frame onto hunan SpatialPolygonDataFrame.\n\nhunan.localMI <- cbind(hunan,localMI) %>%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n\n\n\nMapping local Moran’s I values\nThe code chunk below plots local Moran’s I values by using choropleth mapping functions.\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", style = \"pretty\", palette = \"RdBu\", title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\nMapping local Moran’s I p-values\nThe code chunk below plots choropleth map of Moran’s I p-values.\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", breaks = c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf), palette = \"-Blues\", title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\nMapping both local Moran’s I values and p-values\nThe code chunk below plots both the local Moran’s I values map and p-values map.\n\nlocalMI.map <- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", style = \"pretty\", title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\npvalue.map <- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", breaks = c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf), palette = \"-Blues\", title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(localMI.map, pvalue.map, asp = 1, ncol = 2)\n\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette."
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2.html#creating-a-lisa-cluster-map",
    "href": "Hands-on_Ex2/Hands-on_Ex2.html#creating-a-lisa-cluster-map",
    "title": "Hands-on Exercise 2: Global and Local Measures of Spatial Autocorrelation",
    "section": "Creating a LISA Cluster Map",
    "text": "Creating a LISA Cluster Map\nIn this section, I learn how to plot LISA Cluster Map which shows the significant locations color by type of spatial autocorrelation.\n\nPlotting Moran scatterplot\nThe code chunk below plots the Moran scatterplot of GDPPC2012 which shows relationship between the values of the chosen attribute at each location and the average value of the same attribute at neighboring locations by using moran.plot().\n\nnci <- moran.plot(hunan$GDPPC, rswm_q, labels = as.character(hunan$County), xlab = \"GDPPC 2012\", ylab = \"Spatially Lag GDPPC 2012\")\n\n\n\n\nPlotting Moran scatterplot with standardized variable\nThe code chunk below centers and scales the variable by using scale().\n\nhunan$Z.GDPPC <- scale(hunan$GDPPC) %>% as.vector \n\nThe code chunk below plots the Moran scatterplot.\n\nnci2 <- moran.plot(hunan$Z.GDPPC, rswm_q, labels = as.character(hunan$County), xlab = \"z-GDPPC 2012\", ylab = \"Spatially Lag z-GDPPC 2012\")\n\n\n\n\n\n\nPreparing LISA map classes\nThe code chunk below shows the steps to prepare LISA cluster map.\n\nquadrant <- vector(mode = \"numeric\",length = nrow(localMI))\n\nThe code chunk below centers the variable of interest around its mean.\n\nDV <- hunan$GDPPC - mean(hunan$GDPPC)     \n\nThe code chunk below centers the local Moran’s around the mean.\n\nC_mI <- localMI[,1] - mean(localMI[,1])    \n\nThe code chunk below sets a statistical significance level of the local Moran.\n\nsignif <- 0.05       \n\nThe code chunk below defines high-high, low-low, low-high, and high-low categories.\n\nquadrant[DV > 0 & C_mI > 0] <- 4      \nquadrant[DV < 0 & C_mI < 0] <- 1      \nquadrant[DV < 0 & C_mI > 0] <- 2\nquadrant[DV > 0 & C_mI < 0] <- 3\n\nThe code chunk below places non-significant Moran in the category 0.\n\nquadrant[localMI[,5] > signif] <- 0\n\n\n\nPlotting LISA map\nThe code chunk below builds the LISA map.\n\nhunan.localMI$quadrant <- quadrant\ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", style = \"cat\", palette = colors[c(sort(unique(quadrant)))+1], labels = clusters[c(sort(unique(quadrant))) + 1], popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha = 0.5)\n\n\n\n\nThe code chunk below plots both the local Moran’s I values map and p-values map.\n\ngdppc <- qtm(hunan, \"GDPPC\")\n\nhunan.localMI$quadrant <- quadrant\ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\nLISAmap <- tm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", style = \"cat\", palette = colors[c(sort(unique(quadrant))) + 1], labels = clusters[c(sort(unique(quadrant))) + 1], popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, LISAmap, asp = 1, ncol = 2)"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2.html#hot-spot-and-cold-spot-area-analysis",
    "href": "Hands-on_Ex2/Hands-on_Ex2.html#hot-spot-and-cold-spot-area-analysis",
    "title": "Hands-on Exercise 2: Global and Local Measures of Spatial Autocorrelation",
    "section": "Hot Spot and Cold Spot Area Analysis",
    "text": "Hot Spot and Cold Spot Area Analysis\nIn this section, I learn how to detect hot spot and cold spot.\n\nDeriving distance-based weight matrix\n\nDeriving the centroid\nThe code chunk below gets the longitude.\n\nlongitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n\nThe code chunk below gets the latitude.\n\nlatitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\nThe code chunk below puts longitude and latitude into the same object.\n\ncoords <- cbind(longitude, latitude)\n\n\n\nDetermining the cut-off distance\nSteps to determine upper limit for distance band:\n\nReturn a matrix with the indices of points using knearneigh().\nConvert the knn object into a neighbors list of class nb with a list of integer vectors using knn2nb().\nReturn the length of neighbor relationship edges using nbdists().\nRemove the list structure using unlist().\n\n\n#coords <- coordinates(hunan)\nk1 <- knn2nb(knearneigh(coords))\nk1dists <- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\n\n\nComputing fixed distance weight matrix\nThe code chunk below computes the distance weight matrix.\n\nwm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\nThe code chunk below converts the nb object into spatial weights object by using nb2listw().\n\nwm62_lw <- nb2listw(wm_d62, style = 'B')\nsummary(wm62_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \nLink number distribution:\n\n 1  2  3  4  5  6 \n 6 15 14 26 20  7 \n6 least connected regions:\n6 15 30 32 56 65 with 1 link\n7 most connected regions:\n21 28 35 45 50 52 82 with 6 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1   S2\nB 88 7744 324 648 5440\n\n\n\n\n\nComputing adaptive distance weight matrix\nThe code chunk below controls the number of neighbors using k-nearest neighbors.\n\nknn <- knn2nb(knearneigh(coords, k = 8))\nknn\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\n\n\nThe code chunk below converts the nb object into spatial weights object by using nb2listw().\n\nknn_lw <- nb2listw(knn, style = 'B')\nsummary(knn_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\nLink number distribution:\n\n 8 \n88 \n88 least connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n88 most connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 704 1300 23014"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2.html#computing-gi-statistics",
    "href": "Hands-on_Ex2/Hands-on_Ex2.html#computing-gi-statistics",
    "title": "Hands-on Exercise 2: Global and Local Measures of Spatial Autocorrelation",
    "section": "Computing Gi Statistics",
    "text": "Computing Gi Statistics\n\nGi statistics using fixed distance\nThe code chunk below computes Gi values.\n\nfips <- order(hunan$County)\ngi.fixed <- localG(hunan$GDPPC, wm62_lw)\ngi.fixed\n\n [1]  0.436075843 -0.265505650 -0.073033665  0.413017033  0.273070579\n [6] -0.377510776  2.863898821  2.794350420  5.216125401  0.228236603\n[11]  0.951035346 -0.536334231  0.176761556  1.195564020 -0.033020610\n[16]  1.378081093 -0.585756761 -0.419680565  0.258805141  0.012056111\n[21] -0.145716531 -0.027158687 -0.318615290 -0.748946051 -0.961700582\n[26] -0.796851342 -1.033949773 -0.460979158 -0.885240161 -0.266671512\n[31] -0.886168613 -0.855476971 -0.922143185 -1.162328599  0.735582222\n[36] -0.003358489 -0.967459309 -1.259299080 -1.452256513 -1.540671121\n[41] -1.395011407 -1.681505286 -1.314110709 -0.767944457 -0.192889342\n[46]  2.720804542  1.809191360 -1.218469473 -0.511984469 -0.834546363\n[51] -0.908179070 -1.541081516 -1.192199867 -1.075080164 -1.631075961\n[56] -0.743472246  0.418842387  0.832943753 -0.710289083 -0.449718820\n[61] -0.493238743 -1.083386776  0.042979051  0.008596093  0.136337469\n[66]  2.203411744  2.690329952  4.453703219 -0.340842743 -0.129318589\n[71]  0.737806634 -1.246912658  0.666667559  1.088613505 -0.985792573\n[76]  1.233609606 -0.487196415  1.626174042 -1.060416797  0.425361422\n[81] -0.837897118 -0.314565243  0.371456331  4.424392623 -0.109566928\n[86]  1.364597995 -1.029658605 -0.718000620\nattr(,\"cluster\")\n [1] Low  Low  High High High High High High High Low  Low  High Low  Low  Low \n[16] High High High High Low  High High Low  Low  High Low  Low  Low  Low  Low \n[31] Low  Low  Low  High Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low \n[46] High High Low  Low  Low  Low  High Low  Low  Low  Low  Low  High Low  Low \n[61] Low  Low  Low  High High High Low  High Low  Low  High Low  High High Low \n[76] High Low  Low  Low  Low  Low  Low  High High Low  High Low  Low \nLevels: Low High\nattr(,\"gstari\")\n[1] FALSE\nattr(,\"call\")\nlocalG(x = hunan$GDPPC, listw = wm62_lw)\nattr(,\"class\")\n[1] \"localG\"\n\n\nThe code chunk below joins the Gi values to hunan sf data frame.\n\nhunan.gi <- cbind(hunan, as.matrix(gi.fixed)) %>%\n  rename(gstat_fixed = as.matrix.gi.fixed.)\n\n\n\nMapping Gi values with fixed distance weights\nThe code chunk below shows the function used to map the Gi values using fixed distance weight matrix.\n\ngdppc <- qtm(hunan, \"GDPPC\")\n\nGimap <- tm_shape(hunan.gi) +\n  tm_fill(col = \"gstat_fixed\", style = \"pretty\", palette = \"-RdBu\", title = \"local Gi\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, Gimap, asp = 1, ncol = 2)\n\nVariable(s) \"gstat_fixed\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\nGi statistics using adaptive distance\nThe code chunk below computes Gi values for GDPPC2012.\n\nfips <- order(hunan$County)\ngi.adaptive <- localG(hunan$GDPPC, knn_lw)\nhunan.gi <- cbind(hunan, as.matrix(gi.adaptive)) %>%\n  rename(gstat_adaptive = as.matrix.gi.adaptive.)\n\n\n\nMapping Gi values with adaptive distance weights\nThe code chunk below shows the function used to map the Gi values using adaptive distance weight matrix.\n\ngdppc<- qtm(hunan, \"GDPPC\")\n\nGimap <- tm_shape(hunan.gi) + \n  tm_fill(col = \"gstat_adaptive\", style = \"pretty\", palette = \"-RdBu\", title = \"local Gi\") + \n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, Gimap, asp = 1, ncol = 2)\n\nVariable(s) \"gstat_adaptive\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette."
  },
  {
    "objectID": "In-class_Ex2/In-class_Ex2.html",
    "href": "In-class_Ex2/In-class_Ex2.html",
    "title": "In-class Exercise 2: Geospatial Analytics for Social Good",
    "section": "",
    "text": "In this in-class exercise, I learn how to import Nigeria water point geospatial data and LGA boundary data, perform Exploratory Data Analysis, data wrangling and extracting, then save data as rds file."
  },
  {
    "objectID": "In-class_Ex2/In-class_Ex2.html#getting-started",
    "href": "In-class_Ex2/In-class_Ex2.html#getting-started",
    "title": "In-class Exercise 2: Geospatial Analytics for Social Good",
    "section": "Getting Started",
    "text": "Getting Started\nThe code chunk below will install and load spdep, sf, tmap and tidyverse packages.\n\npacman::p_load(sf, tidyverse, tmap, spdep, funModeling)\n\n\nImporting water point geospatial data\nThe code chunk below imports water point geospatial data geo_export shapefile into R and save into simple feature data table.\n\nwp <- st_read(dsn = \"data/aspatial\",\n              layer = \"geo_export\",\n              crs = 4326) %>%\n  # st_transform(crs = 26391)\n  filter(clean_coun == \"Nigeria\")\n\nThe code chunk below save extracted sf data table into rds data format.\n\nwp_nga <- write_rds(wp, \"data/wp_nga.rds\")\n\n\n\nImporting Nigeria LGA boundary data\n\nnga <- st_read(dsn = \"data/geospatial\",\n               layer = \"geoBoundaries-NGA-ADM2\",\n               crs = 4326)"
  },
  {
    "objectID": "In-class_Ex2/In-class_Ex2.html#data-wrangling",
    "href": "In-class_Ex2/In-class_Ex2.html#data-wrangling",
    "title": "In-class Exercise 2: Geospatial Analytics for Social Good",
    "section": "Data Wrangling",
    "text": "Data Wrangling\n\nRecording NA values into string\nThe code chunk below replaces NA values in status_cle field into Unknown.\n\nwp_nga <- read_rds(\"data/wp_nga.rds\") %>%\n  mutate(status_cle =\nreplace_na(status_cle, \"Unknown\"))\n\n\n\nEDA\nThe code chunk below uses freq() to display the distribution of status_cle field.\n\nfreq(data = wp_nga,\n     input = 'status_cle')"
  },
  {
    "objectID": "In-class_Ex2/In-class_Ex2.html#extracting-water-point-data",
    "href": "In-class_Ex2/In-class_Ex2.html#extracting-water-point-data",
    "title": "In-class Exercise 2: Geospatial Analytics for Social Good",
    "section": "Extracting Water Point Data",
    "text": "Extracting Water Point Data\nIn this section, I learn how to extract water point records by using classes in status_cle field.\n\nExtracting functional water point\nThe code chunk below uses filter() to select functional water points.\n\nwp_functional <- wp_nga %>%\n  filter(status_cle %in%\n           c(\"Functional\",\n             \"Functional but not in use\",\n             \"Functional but needs repair\"))\n\n\nfreq(data = wp_functional,\n     input = 'status_cle')\n\n\n\nExtracting non-functional water point\nThe code chunk below uses filter() to select non-functional water points.\n\nwp_nonfunctional <- wp_nga %>%\n  filter(status_cle %in%\n           c(\"Non-Functional\",\n             \"Non-Functional due to dry season\",\n             \"Abandoned/Decommissioned\",\n             \"Abandoned\",\n             \"Non functional due to dry season\"))\n\n\nfreq(data = wp_nonfunctional,\n     input = 'status_cle')\n\n\n\nExtracting water point with Unknown class\nThe code chunk below uses filter() to select Unknown water points.\n\nwp_unknown <- wp_nga %>%\n  filter(status_cle %in%\n           c(\"Unknown\"))\n\n\nfreq(data = wp_unknown,\n     input = 'status_cle')"
  },
  {
    "objectID": "In-class_Ex2/In-class_Ex2.html#performing-point-in-polygon-count",
    "href": "In-class_Ex2/In-class_Ex2.html#performing-point-in-polygon-count",
    "title": "In-class Exercise 2: Geospatial Analytics for Social Good",
    "section": "Performing Point-in-Polygon Count",
    "text": "Performing Point-in-Polygon Count\n\nnga_wp <- nga %>% \n  mutate(`total wp` = lengths(\n    st_intersects(nga, wp_nga))) %>%\n  mutate(`wp functional` = lengths(\n    st_intersects(nga, wp_functional))) %>%\n  mutate(`wp non-functional` = lengths(\n    st_intersects(nga, wp_nonfunctional))) %>%\n  mutate(`wp unknown` = lengths(\n    st_intersects(nga, wp_unknown)))"
  },
  {
    "objectID": "In-class_Ex2/In-class_Ex2.html#saving-the-analytical-data-table",
    "href": "In-class_Ex2/In-class_Ex2.html#saving-the-analytical-data-table",
    "title": "In-class Exercise 2: Geospatial Analytics for Social Good",
    "section": "Saving the Analytical Data Table",
    "text": "Saving the Analytical Data Table\nThe code chunk below uses mutate() to derive 2 fields namely pct_functional and pct_non-functional.\n\nnga_wp <- nga_wp %>%\n  mutate(pct_functional = `wp functional`/`total wp`) %>%\n  mutate(`pct_non-functional` = `wp non-functional`/`total wp`)\n\nThe code chunk below saves the sf data table into rds format.\n\nwrite_rds(nga_wp, \"data/wp_nga.rds\")"
  },
  {
    "objectID": "In-class_Ex2/In-class_Ex2.html#visualizing-the-spatial-distribution-of-water-points",
    "href": "In-class_Ex2/In-class_Ex2.html#visualizing-the-spatial-distribution-of-water-points",
    "title": "In-class Exercise 2: Geospatial Analytics for Social Good",
    "section": "Visualizing the Spatial Distribution of Water Points",
    "text": "Visualizing the Spatial Distribution of Water Points\n\nnga_wp <- read_rds(\"data/wp_nga.rds\")\ntotal <- qtm(nga_wp, \"total wp\")\nwp_functional <- qtm(nga_wp, \"wp functional\")\nwp_nonfunctional <- qtm(nga_wp, \"wp non-functional\")\nunknown <- qtm(nga_wp, \"wp unknown\")\n\ntmap_arrange(total, wp_functional, wp_nonfunctional, unknown, asp = 1, ncol = 2)"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html",
    "href": "Take-home_Ex1/Take-home_Ex1.html",
    "title": "Take-home Exercise 1: Geospatial Analytics for Social Good",
    "section": "",
    "text": "In this take-home exercise, with the purpose to address the issue of water supply in Nigeria, I will be using global and local measures of spatial Association techniques to reveal the spatial patterns of Non-functional water points in Nigeria."
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#the-data",
    "href": "Take-home_Ex1/Take-home_Ex1.html#the-data",
    "title": "Take-home Exercise 1: Geospatial Analytics for Social Good",
    "section": "The Data",
    "text": "The Data\n\nAspatial data\nThe aspatial data includes the water point data that can be downloaded from WPdx+ Global Data Repository. For this analysis, Shapefile data format is downloaded. The shapefile includes global water point data, the Nigeria water point data which will be used in our analysis is filtered in data importing section. The files’ names are renamed to “geo_export” for easier use.\n\n\nGeospatial data\nThe geospatial data includes the Nigeria Level-2 Administratie Boundary (which is also known as Local Government Data LGA) polygon features GIS data which can be downloaded from geoBoundaries. In “Download geoBoundaries” section, key in “Nigeria” to Name, and download the ADM2 2020 data file. The files with name “geoBoundaries-NGA-ADM2” are used."
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#getting-started",
    "href": "Take-home_Ex1/Take-home_Ex1.html#getting-started",
    "title": "Take-home Exercise 1: Geospatial Analytics for Social Good",
    "section": "Getting Started",
    "text": "Getting Started\nIn this exercise, the following R packages will be used:\n\nsf for importing, managing, and processing geospatial data\ntidyverse for importing, wrangling, and visualizing data\n\ntidyr for manipulating data\ndplyr for transforming data\nggplot2 for visualizing data\n\ntmap for plotting cartographic quality choropleth map\nspdep for computing spatial weights, global and local spatial autocorrelation statistics\nfunModeling for Exploratory Data Analysis (EDA)\n\nThe code chunk below installs and loads R packages into R environment.\n\npacman::p_load(sf, tidyverse, tmap, spdep, funModeling)"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#importing-the-data-into-r-environment",
    "href": "Take-home_Ex1/Take-home_Ex1.html#importing-the-data-into-r-environment",
    "title": "Take-home Exercise 1: Geospatial Analytics for Social Good",
    "section": "Importing the data into R environment",
    "text": "Importing the data into R environment\n\nImporting water point shapefile into R environment\nThe code chunk below uses st_read() of sf package to import water point data geo_export shapefile into R and save as simple feature data frame called wp.\nst_transform() of sf package is used to transform original geographic coordinate reference system (CRS) WGS84 to EPSG:26391 Minna/Nigeria West Belt, which is more appropriate for our analysis.\nfilter() of dplyr package is used to extract water point records of Nigeria.\n\nwp <- st_read(dsn = \"data/aspatial\",\n              layer = \"geo_export\") %>%\n  st_transform(crs = 26391) %>%\n  filter(clean_coun == \"Nigeria\")\n\nReading layer `geo_export’ from data source\n`D:\\GuanboShao\\ISSS624\\Take-home_Ex1\\data\\aspatial’ using driver `ESRI Shapefile’\nSimple feature collection with 362604 features and 72 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -91.75435 ymin: -27.31495 xmax: 92.32694 ymax: 26.65254\nGeodetic CRS:  WGS84(DD)\nFrom the output message, the simple feature data frame has 362604 features and 72 fields.\nThe code chunk below checks the CRS of wp.\n\nst_crs(wp)\n\nCoordinate Reference System:\nUser input: EPSG:26391\nwkt:\nPROJCRS[“Minna / Nigeria West Belt”,\nBASEGEOGCRS[“Minna”,\nDATUM[“Minna”,\nELLIPSOID[“Clarke 1880 (RGS)”,6378249.145,293.465,\nLENGTHUNIT[“metre”,1]]],\nPRIMEM[“Greenwich”,0,\nANGLEUNIT[“degree”,0.0174532925199433]],\nID[“EPSG”,4263]],\nCONVERSION[“Nigeria West Belt”,\nMETHOD[“Transverse Mercator”,\nID[“EPSG”,9807]],\nPARAMETER[“Latitude of natural origin”,4,\nANGLEUNIT[“degree”,0.0174532925199433],\nID[“EPSG”,8801]],\nPARAMETER[“Longitude of natural origin”,4.5,\nANGLEUNIT[“degree”,0.0174532925199433],\nID[“EPSG”,8802]],\nPARAMETER[“Scale factor at natural origin”,0.99975,\nSCALEUNIT[“unity”,1],\nID[“EPSG”,8805]],\nPARAMETER[“False easting”,230738.26,\nLENGTHUNIT[“metre”,1],\nID[“EPSG”,8806]],\nPARAMETER[“False northing”,0,\nLENGTHUNIT[“metre”,1],\nID[“EPSG”,8807]]],\nCS[Cartesian,2],\nAXIS[“(E)”,east,\nORDER[1],\nLENGTHUNIT[“metre”,1]],\nAXIS[“(N)”,north,\nORDER[2],\nLENGTHUNIT[“metre”,1]],\nUSAGE[\nSCOPE[“Engineering survey, topographic mapping.”],\nAREA[“Nigeria - onshore west of 6°30’E, onshore and offshore shelf.”],\nBBOX[3.57,2.69,13.9,6.5]],\nID[“EPSG”,26391]]\nThe coordinates system has been changed to ESPG code 26391, which is Nigeria West Belt.\nThe code chunk below uses write_rds() of readr package to save the extracted sf data table wp into rds data format file called wp_nga and is saved in data folder.\n\nwp_nga <- write_rds(wp, \"data/wp_nga.rds\")\n\n\n\nImporting Nigeria LGA boundary data into R environment\nSimilar to importing water point shapefile, the geospatial data geoBoundaries-NGA-ADM2 shapefile is imported into R and saved as simple feature data frame called nga.\n\nnga <- st_read(dsn = \"data/geospatial\",\n               layer = \"geoBoundaries-NGA-ADM2\") %>%\n  st_transform(crs = 26391)\n\nThe code chunk below checks the CRS of nga.\n\nst_crs(nga)"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#data-wrangling",
    "href": "Take-home_Ex1/Take-home_Ex1.html#data-wrangling",
    "title": "Take-home Exercise 1: Geospatial Analytics for Social Good",
    "section": "Data Wrangling",
    "text": "Data Wrangling\n\nRecording NA values into string\nThe code chunk below uses replace_na() to recode all NA values in status_cle field into Unknown.\nmutate() of dplyr package is used to derive new variables called Unknown.\n\nwp_nga <- read_rds(\"data/wp_nga.rds\") %>%\n  mutate(status_cle =\nreplace_na(status_cle, \"Unknown\"))\n\n\n\nEDA\nThe code chunk below uses freq() of funModeling package to display the distribution of status_cle field in wp_nga.\n\nfreq(data = wp_nga,\n     input = 'status_cle')\n\n\n\n\n\n\nAccording to the distribution diagram of each status, the proportion of functional water points includes Functional, Functional but not in use, and Functional but needs repair, which is 54.88% in total. The proportion of non-functional water points includes Non-Functional, Non-Functional due to dry season, Abandoned/Decommissioned, Abandoned, and Non functional due to dry season which is 33.9% in total."
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#extracting-water-point-data",
    "href": "Take-home_Ex1/Take-home_Ex1.html#extracting-water-point-data",
    "title": "Take-home Exercise 1: Geospatial Analytics for Social Good",
    "section": "Extracting Water Point Data",
    "text": "Extracting Water Point Data\nIn this section, I will use filter() to extract water point records by using classes in status_cle field.\n\nExtracting functional water point\nThe code chunk below uses filter() to select functional water points from wp_nga and name as wp_functional.\n\nwp_functional <- wp_nga %>%\n  filter(status_cle %in%\n           c(\"Functional\",\n             \"Functional but not in use\",\n             \"Functional but needs repair\"))\n\nThe code chunk below uses freq() to display the distribution of functional water points.\n\nfreq(data = wp_functional,\n     input = 'status_cle')\n\n\n\nExtracting non-functional water point\nThe code chunk below uses filter() to select non-functional water points from wp_nga and name as wp_nonfunctional.\n\nwp_nonfunctional <- wp_nga %>%\n  filter(status_cle %in%\n           c(\"Non-Functional\",\n             \"Non-Functional due to dry season\",\n             \"Abandoned/Decommissioned\",\n             \"Abandoned\",\n             \"Non functional due to dry season\"))\n\nThe code chunk below uses freq() to display the distribution of non-functional water points.\n\nfreq(data = wp_nonfunctional,\n     input = 'status_cle')\n\n\n\nExtracting water point with Unknown class\nThe code chunk below uses filter() to select Unknown water points from wp_nga and name as wp_unknown.\n\nwp_unknown <- wp_nga %>%\n  filter(status_cle %in%\n           c(\"Unknown\"))\n\nThe code chunk below uses freq() to display the distribution of unknown water points.\n\nfreq(data = wp_unknown,\n     input = 'status_cle')"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#performing-point-in-polygon-count",
    "href": "Take-home_Ex1/Take-home_Ex1.html#performing-point-in-polygon-count",
    "title": "Take-home Exercise 1: Geospatial Analytics for Social Good",
    "section": "Performing Point-in-Polygon Count",
    "text": "Performing Point-in-Polygon Count\nIn this section, st_intersects() of sf package to identify the water points located in each region of Nigeria, length() of Base R is used to calculate the number of water points in each region.\nmutate() of dplyr package is used to derive new variables namely total wp, wp functional, wp non-functional, and wp unknown.\n\nnga_wp <- nga %>% \n  mutate(`total wp` = lengths(st_intersects(nga, wp_nga))) %>%\n  mutate(`wp functional` = lengths(st_intersects(nga, wp_functional))) %>%\n  mutate(`wp non-functional` = lengths(st_intersects(nga, wp_nonfunctional))) %>%\n  mutate(`wp unknown` = lengths(st_intersects(nga, wp_unknown)))"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#saving-the-analytical-data-table",
    "href": "Take-home_Ex1/Take-home_Ex1.html#saving-the-analytical-data-table",
    "title": "Take-home Exercise 1: Geospatial Analytics for Social Good",
    "section": "Saving the Analytical Data Table",
    "text": "Saving the Analytical Data Table\nThe code chunk below uses mutate() to derive 2 fields namely pct_functional and pct_non-functional, which is the proportion of functional water points and non-functional water points in each region.\n\nnga_wp <- nga_wp %>%\n  mutate(pct_functional = `wp functional`/`total wp`) %>%\n  mutate(`pct_non-functional` = `wp non-functional`/`total wp`)\n\nThe code chunk below uses write_rds() of readr package to save the extracted sf data table nga_wp into rds data format file called wp_nga and is saved in data folder.\n\nwrite_rds(nga_wp, \"data/wp_nga.rds\")\n\nUpon completing the above sections, we achieve an rds data format file called wp_nga which has a file size of 2.1MB. This allows us to keep a small size data file and delete raw data files which occupy space of several gigabytes. In the following section, wp_nga.rds will be used for analysis. A RMarkdown code {r eval=FALSE} is used to skip evaluating previous code chunks and exclude their results so that the wp_nga.rds file will not be modified. If need to reproduce the previous sections, please change {r eval=FALSE} to {r} then proceed to run the code chunks."
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#visualizing-the-spatial-distribution-of-water-points",
    "href": "Take-home_Ex1/Take-home_Ex1.html#visualizing-the-spatial-distribution-of-water-points",
    "title": "Take-home Exercise 1: Geospatial Analytics for Social Good",
    "section": "Visualizing the Spatial Distribution of Water Points",
    "text": "Visualizing the Spatial Distribution of Water Points\n\nPlotting thematic maps by using qtm()\nqtm() of tmap package provides a quick visualization of thematic map.\ntmap_arrange() is used to create multiple stand-alone maps.\n\nnga_wp <- read_rds(\"data/wp_nga.rds\")\ntotal <- qtm(nga_wp, \"total wp\")\nwp_functional <- qtm(nga_wp, \"wp functional\")\nwp_nonfunctional <- qtm(nga_wp, \"wp non-functional\")\nunknown <- qtm(nga_wp, \"wp unknown\")\n\ntmap_arrange(total, wp_functional, wp_nonfunctional, unknown, asp = 1, ncol = 2)\n\n\n\n\n\n\nPlotting thematic maps by using tmap elements\ntm_shape() is used to define a spatial data object.\ntm_fill() is used to fill the polygons, a classification method is selected by style option. An equal map is obtained by setting style = “equal”, the number of categories n is set to 4. A quantile map is obtained by setting style = “quantile”, and n = 4.\ntm_layout() is used to customize the map layout, including title and legend.\ntm_borders() is used to define the borders of the polygons, alpha defines the transparency of line.\ntmap_arrange() is used to create multiple stand-alone maps.\n\nmap_equal <- tm_shape(nga_wp)+\n  tm_fill(c(\"wp functional\", \"wp non-functional\"),\n          n = 4,\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(main.title = \"Distribution of Water Points \\n(Equal classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1.5,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\nmap_quantile <- tm_shape(nga_wp)+\n  tm_fill(c(\"wp functional\", \"wp non-functional\"),\n          n = 4,\n          style = \"quantile\", \n          palette = \"Greens\") +\n  tm_layout(main.title = \"Distribution of Water Points \\n(Quantile classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1.5,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(map_equal, map_quantile, asp = 1, ncol = 2)"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#cluster-and-outlier-analysis",
    "href": "Take-home_Ex1/Take-home_Ex1.html#cluster-and-outlier-analysis",
    "title": "Take-home Exercise 1: Geospatial Analytics for Social Good",
    "section": "Cluster and Outlier Analysis",
    "text": "Cluster and Outlier Analysis\n\nComputing contiguity spatial weights\npoly2nb() of spdep package is used to compute contiguity weight matrices of Nigeria. This function with default setting queen = TRUE builds a neighbours list based on regions with contiguous boundaries.\n\nwm_q <- poly2nb(nga_wp, \n                queen = TRUE)\nset.ZeroPolicyOption(TRUE)\n\n[1] FALSE\n\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 774 \nNumber of nonzero links: 4440 \nPercentage nonzero weights: 0.7411414 \nAverage number of links: 5.736434 \n1 region with no links:\n86\nLink number distribution:\n\n  0   1   2   3   4   5   6   7   8   9  10  11  12  14 \n  1   2  14  57 125 182 140 122  72  41  12   4   1   1 \n2 least connected regions:\n138 560 with 1 link\n1 most connected region:\n508 with 14 links\n\n\nIn Nigeria, there are 774 regions, the most connected region has 14 neighbors. There are 2 regions with only 1 neighbor.\n\n\nRow-standardized weights matrix\nnb2listw() of spdep package is used to assign spatial weights to each polygon in neighbors list. style is set to ‘W’ for row standardized option. zero.policy is set to TRUE to insert weights vectors of zero length for regions without neighbor in the neighbors list.\n\nrswm_q <- nb2listw(wm_q, \n                   style=\"W\",\n                   zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 774 \nNumber of nonzero links: 4440 \nPercentage nonzero weights: 0.7411414 \nAverage number of links: 5.736434 \n1 region with no links:\n86\n\nWeights style: W \nWeights constants summary:\n    n     nn  S0       S1       S2\nW 773 597529 773 285.0658 3198.414\n\n\n\n\nMaron’s I test\nmoran.test() of spdep package is used to perform Moran’s I statistics testing which measures the spatial autocorrelation and how one region is similar to its neighbors by standardizing the spatial autocovariance by the variance of data.\n\nmoran.test(nga_wp$`wp non-functional`, \n           listw=rswm_q, \n           zero.policy = TRUE, \n           na.action=na.omit)\n\n\n    Moran I test under randomisation\n\ndata:  nga_wp$`wp non-functional`  \nweights: rswm_q  n reduced by no-neighbour observations\n  \n\nMoran I statistic standard deviate = 20.07, p-value < 2.2e-16\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n     0.4345111969     -0.0012953368      0.0004715237 \n\n\nThe p-value for non-functional water points is statistically significant, therefore the spatial distribution is more spatially clustered than would be expected if underlying spatial processes were random.\n\nComputing Monte Carlo Moran’s I\nmoran.mc() of spdep package is used to perform permutation test for Moran’s I statistic. nsim = 999 means 1000 simulations will be performed.\n\nset.seed(1234)\nbperm= moran.mc(nga_wp$`wp non-functional`, \n                listw=rswm_q, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  nga_wp$`wp non-functional` \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.43451, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\nThe Moran’s I value is 0.43451, therefore we can reject the null hypothesis and conclude that positive spatial autocorrelation is occurring.\n\n\nVisualizing Monte Carlo Moran’s I\nhist() and abline() of R Graphics are used to plot the distribution of statistical values.\n\nhist(bperm$res, \n     freq=TRUE, \n     breaks=20, \n     xlab=\"Simulated Moran's I\")\nabline(v=0, \n       col=\"red\") \n\n\n\n\n\n\n\nGeary’s C test\ngeary.test() of spdep package is used to perform Geary’s C test which measures spatial autocorrelation and determine whether adjacent similar observations are correlated by summing the square differences between pairs of data.\n\ngeary.test(nga_wp$`wp non-functional`,\n           listw=rswm_q)\n\n\n    Geary C test under randomisation\n\ndata:  nga_wp$`wp non-functional` \nweights: rswm_q \n\nGeary C statistic standard deviate = 14.479, p-value < 2.2e-16\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n     0.6166737225      1.0000000000      0.0007009361 \n\n\nThe Geary’s C test statistic is 0.6166737225 < 1, therefore there is a positive spatial autocorrrelation and clustered.\n\nComputing Monte Carlo Geary’s C\ngeary.mc() of spdep package is used to perform permutation test for Geary’s C statistic. nsim = 999 means 1000 simulations will be performed.\n\nset.seed(1234)\nbperm=geary.mc(nga_wp$`wp non-functional`, \n               listw=rswm_q, \n               nsim=999)\nbperm\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  nga_wp$`wp non-functional` \nweights: rswm_q \nnumber of simulations + 1: 1000 \n\nstatistic = 0.61667, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n\nThe Monte Carlo Geary’s C test statistic shows same result as Geary’s C test result which is 0.61667 < 1, therefore there is a positive spatial autocorrrelation and clustered.\n\n\nVisualizing Monte Carlo Geary’s C\nhist() and abline() of R Graphics are used to plot the distribution of statistical values.\n\nhist(bperm$res, \n     freq=TRUE, \n     breaks=20, \n     xlab=\"Simulated Geary's C\")\nabline(v=1, \n       col=\"red\") \n\n\n\n\n\n\n\nCompute Moran’s I correlogram\nsp.correlogram() of spdep package is used to compute a 5-lag spatial correlogram of non-functional water points. The global spatial autocorrelation is set to Moran’s I by method = “I”.\nplot() of base Graph is used to plot the output.\n\nMI_corr <- sp.correlogram(wm_q, \n                          nga_wp$`wp non-functional`, \n                          order=5, \n                          method=\"I\", \n                          style=\"W\")\nplot(MI_corr)\n\n\n\n\n\nprint(MI_corr)\n\nSpatial correlogram for nga_wp$`wp non-functional` \nmethod: Moran's I\n           estimate expectation    variance standard deviate Pr(I) two sided\n1 (773)  4.3451e-01 -1.2953e-03  4.7152e-04          20.0698       < 2.2e-16\n2 (773)  2.6672e-01 -1.2953e-03  2.0206e-04          18.8546       < 2.2e-16\n3 (773)  1.9545e-01 -1.2953e-03  1.2189e-04          17.8208       < 2.2e-16\n4 (773)  1.4034e-01 -1.2953e-03  8.7591e-05          15.1333       < 2.2e-16\n5 (773)  6.4101e-02 -1.2953e-03  6.8780e-05           7.8854       3.136e-15\n           \n1 (773) ***\n2 (773) ***\n3 (773) ***\n4 (773) ***\n5 (773) ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\n\n\nCompute Geary’s C correlogram\nsp.correlogram() of spdep package is used to compute a 5-lag spatial correlogram of non-functional water points. The global spatial autocorrelation is set to Geary’s C by method = “C”.\nplot() of base Graph is used to plot the output.\n\nGC_corr <- sp.correlogram(wm_q, \n                          nga_wp$`wp non-functional`, \n                          order=5, \n                          method=\"C\", \n                          style=\"W\")\nplot(GC_corr)\n\n\n\n\n\nprint(GC_corr)\n\nSpatial correlogram for nga_wp$`wp non-functional` \nmethod: Geary's C\n          estimate expectation   variance standard deviate Pr(I) two sided    \n1 (773) 0.61667372  1.00000000 0.00070094         -14.4787       < 2.2e-16 ***\n2 (773) 0.74713982  1.00000000 0.00038527         -12.8824       < 2.2e-16 ***\n3 (773) 0.80930633  1.00000000 0.00027289         -11.5437       < 2.2e-16 ***\n4 (773) 0.86695944  1.00000000 0.00024425          -8.5127       < 2.2e-16 ***\n5 (773) 0.94962924  1.00000000 0.00024046          -3.2483        0.001161 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\n\n\nComputing local Moran’s I\norder() is used to sort data according to a specified variable.\nlocalmoran() of spdep package is used to compute Ii values, given a set of zi values and a listw object providing neighbor weighting information.\n\nfips <- order(nga_wp$shapeName)\nlocalMI <- localmoran(nga_wp$`wp non-functional`, rswm_q)\nhead(localMI)\n\n            Ii          E.Ii       Var.Ii        Z.Ii Pr(z != E(Ii))\n1 -0.323893825 -1.000522e-03 0.1926556506 -0.73564479     0.46194690\n2  0.051085631 -1.990735e-05 0.0051226893  0.71403411     0.47520609\n3  1.259412104 -1.629252e-03 0.4185750594  1.94913830     0.05127891\n4 -0.034612326 -5.435755e-05 0.0059633554 -0.44751011     0.65450679\n5  0.009642434 -2.593946e-04 0.0399358755  0.04954888     0.96048189\n6  0.026645016 -1.850193e-06 0.0002029881  1.87029807     0.06144244\n\n\nIn the output above, the columns are:\n\nIi: the local Moran’s I statistics\nE.Ii: the expectation of local moran statistic under the randomisation hypothesis\nVar.Ii: the variance of local moran statistic under the randomisation hypothesis\nZ.Ii:the standard deviate of local moran statistic\nPr(): the p-value of local moran statistic\n\nprintCoefmat() is used to list the content of the local Moran matrix.\n\nprintCoefmat(data.frame(\n  localMI[fips,], \n  row.names = nga_wp$ID[fips]),\n  check.names = FALSE)\n\n                Ii        E.Ii      Var.Ii        Z.Ii Pr.z....E.Ii..\n  [1,] -3.2389e-01 -1.0005e-03  1.9266e-01 -7.3564e-01         0.4619\n  [2,]  5.1086e-02 -1.9907e-05  5.1227e-03  7.1403e-01         0.4752\n  [3,]  1.2594e+00 -1.6293e-03  4.1858e-01  1.9491e+00         0.0513\n  [4,] -3.4612e-02 -5.4358e-05  5.9634e-03 -4.4751e-01         0.6545\n  [5,]  9.6424e-03 -2.5939e-04  3.9936e-02  4.9549e-02         0.9605\n  [6,]  2.6645e-02 -1.8502e-06  2.0299e-04  1.8703e+00         0.0614\n  [7,]  2.3161e-01 -6.1696e-04  7.9024e-02  8.2609e-01         0.4088\n  [8,]  1.4913e-01 -8.6740e-05  1.6717e-02  1.1541e+00         0.2485\n  [9,]  6.6088e-01 -5.1563e-04  7.9365e-02  2.3477e+00         0.0189\n [10,]  1.9168e-01 -2.2908e-04  2.5127e-02  1.2106e+00         0.2260\n [11,]  6.7553e-01 -7.7005e-04  8.4418e-02  2.3277e+00         0.0199\n [12,]  1.3203e-01 -9.2843e-04  8.8928e-02  4.4585e-01         0.6557\n [13,]  1.6319e-02 -4.0991e-05  6.3123e-03  2.0592e-01         0.8369\n [14,] -2.6444e-02 -1.9907e-05  1.9085e-03 -6.0486e-01         0.5453\n [15,] -3.0304e-01 -1.0067e-02  1.0933e+00 -2.8019e-01         0.7793\n [16,]  7.3176e-02 -9.2843e-04  1.4284e-01  1.9607e-01         0.8446\n [17,]  2.4313e-02 -1.9907e-05  5.1227e-03  3.3997e-01         0.7339\n [18,]  5.8751e-01 -1.1800e-03  1.8151e-01  1.3818e+00         0.1670\n [19,] -5.1355e-03 -8.6740e-05  1.1116e-02 -4.7886e-02         0.9618\n [20,] -2.6727e-02 -2.7474e-05  4.2308e-03 -4.1048e-01         0.6815\n [21,] -6.1362e-02 -1.4481e-04  2.2298e-02 -4.0996e-01         0.6818\n [22,]  2.9001e-01 -1.3310e-03  3.4205e-01  4.9815e-01         0.6184\n [23,]  8.3940e-01 -1.1932e-03  1.8352e-01  1.9622e+00         0.0497\n [24,]  1.5797e-03 -2.7474e-05  5.2954e-03  2.2086e-02         0.9824\n [25,]  1.3192e-01 -8.6740e-05  9.5156e-03  1.3532e+00         0.1760\n [26,]  8.0142e-01 -9.4008e-04  1.8103e-01  1.8858e+00         0.0593\n [27,]  8.4161e-01 -1.6293e-03  2.5049e-01  1.6848e+00         0.0920\n [28,]  2.1373e-02 -1.2108e-02  1.3123e+00  2.9226e-02         0.9767\n [29,]  3.1037e-01 -2.2335e-04  2.4499e-02  1.9843e+00         0.0472\n [30,]  2.5315e-01 -3.1883e-04  3.0557e-02  1.4500e+00         0.1471\n [31,]  8.3800e-03 -6.3560e-06  8.1460e-04  2.9383e-01         0.7689\n [32,]  1.0912e+00 -1.5519e-03  3.9872e-01  1.7306e+00         0.0835\n [33,]  8.1205e-02 -1.9907e-05  2.5514e-03  1.6081e+00         0.1078\n [34,]  2.2568e-01 -2.7474e-05  3.0141e-03  4.1111e+00         0.0000\n [35,] -1.7185e-01 -3.5442e-04  3.8871e-02 -8.6982e-01         0.3844\n [36,]  3.6634e+00 -1.7518e-02  1.6501e+00  2.8656e+00         0.0042\n [37,] -9.6951e-02 -6.9607e-05  4.8340e-03 -1.3934e+00         0.1635\n [38,]  2.6233e+00 -5.7875e-03  6.3128e-01  3.3090e+00         0.0009\n [39,]  1.8744e+00 -1.5766e-02  2.9909e+00  1.0929e+00         0.2744\n [40,]  2.9372e+00 -3.7848e-03  7.2675e-01  3.4498e+00         0.0006\n [41,]  4.1159e+00 -1.4106e-02  2.1417e+00  2.8221e+00         0.0048\n [42,]  7.9208e-01 -8.2139e-03  1.5702e+00  6.3866e-01         0.5230\n [43,]  7.5521e-01 -1.3310e-03  3.4205e-01  1.2936e+00         0.1958\n [44,] -8.9267e-02 -2.0065e-04  2.5711e-02 -5.5546e-01         0.5786\n [45,] -3.8477e-01 -1.0628e-03  2.7321e-01 -7.3410e-01         0.4629\n [46,]  1.7244e-02 -1.8502e-06  3.5662e-04  9.1324e-01         0.3611\n [47,] -5.8736e-01 -4.4053e-03  6.7542e-01 -7.0933e-01         0.4781\n [48,]  3.8133e-02 -1.0896e-05  2.1001e-03  8.3234e-01         0.4052\n [49,] -2.6834e-01 -9.2843e-04  1.0177e-01 -8.3825e-01         0.4019\n [50,] -3.6521e-01 -1.7410e-04  1.6689e-02 -2.8257e+00         0.0047\n [51,]  6.4124e-01 -1.0628e-03  1.0179e-01  2.0132e+00         0.0441\n [52,]  5.2349e-01 -6.1696e-04  7.9024e-02  1.8644e+00         0.0623\n [53,]  5.1870e-01 -5.6970e-04  5.4588e-02  2.2225e+00         0.0262\n [54,]  6.8921e-01 -7.1713e-04  7.8622e-02  2.4605e+00         0.0139\n [55,]  7.4822e-01 -8.8152e-04  2.2664e-01  1.5735e+00         0.1156\n [56,]  5.8729e-01 -1.6293e-03  2.5049e-01  1.1767e+00         0.2393\n [57,]  9.1492e-01 -1.2611e-03  2.4277e-01  1.8594e+00         0.0630\n [58,]  7.2393e-01 -1.3310e-03  1.4583e-01  1.8992e+00         0.0575\n [59,] -3.0946e-02 -5.2432e-04  8.0702e-02 -1.0709e-01         0.9147\n [60,]  3.4946e-03 -3.3691e-07  3.6964e-05  5.7485e-01         0.5654\n [61,]  7.1703e-02 -2.9159e-04  4.4891e-02  3.3979e-01         0.7340\n [62,]  1.1181e+00 -1.6293e-03  2.0847e-01  2.4524e+00         0.0142\n [63,]  5.9595e-01 -6.0753e-04  7.7817e-02  2.1385e+00         0.0325\n [64,] -7.0393e-02 -2.9508e-05  2.8289e-03 -1.3229e+00         0.1859\n [65,]  4.0203e-02 -3.1883e-04  4.9084e-02  1.8290e-01         0.8549\n [66,]  9.9000e-02 -1.1271e-03  1.4429e-01  2.6360e-01         0.7921\n [67,]  1.1358e-01 -5.4315e-06  5.9589e-04  4.6530e+00         0.0000\n [68,]  9.9712e-01 -1.1271e-03  4.3512e-01  1.5133e+00         0.1302\n [69,]  9.5235e-01 -1.1271e-03  9.5814e-02  3.0803e+00         0.0021\n [70,]  1.5713e+00 -2.4877e-03  3.8215e-01  2.5459e+00         0.0109\n [71,]  1.3686e+00 -3.5498e-03  3.0105e-01  2.5008e+00         0.0124\n [72,]  9.2591e-02 -1.4944e-04  1.4325e-02  7.7487e-01         0.4384\n [73,] -3.7167e-02 -8.3227e-05  1.0666e-02 -3.5907e-01         0.7195\n [74,] -3.1529e-02 -1.2665e-04  1.6231e-02 -2.4649e-01         0.8053\n [75,] -9.2649e-03 -1.9529e-04  2.1421e-02 -6.1968e-02         0.9506\n [76,] -3.7980e-02 -2.4049e-06  2.3056e-04 -2.5011e+00         0.0124\n [77,]  7.1562e-01 -1.0628e-03  1.3607e-01  1.9428e+00         0.0520\n [78,]  8.4420e-01 -1.6293e-03  1.7846e-01  2.0022e+00         0.0453\n [79,]  7.2595e-01 -1.0005e-03  1.5392e-01  1.8529e+00         0.0639\n [80,]  5.3944e-01 -4.8082e-04  7.4010e-02  1.9846e+00         0.0472\n [81,]  3.4727e+00 -9.3031e-03  1.4193e+00  2.9227e+00         0.0035\n [82,]  1.1126e+00 -3.3223e-03  8.5209e-01  1.2089e+00         0.2267\n [83,] -4.1351e-01 -3.9190e-04  7.5509e-02 -1.5034e+00         0.1327\n [84,] -1.6812e-01 -5.4358e-05  8.3705e-03 -1.8370e+00         0.0662\n [85,] -1.0396e-01 -3.8587e-05  4.2333e-03 -1.5972e+00         0.1102\n [86,]  0.0000e+00  0.0000e+00  0.0000e+00         NaN            NaN\n [87,]  9.8704e-02 -1.4944e-04  1.9150e-02  7.1435e-01         0.4750\n [88,]  1.3257e-01 -1.1271e-03  1.4429e-01  3.5198e-01         0.7249\n [89,]  8.6097e-01 -5.0729e-03  5.5373e-01  1.1638e+00         0.2445\n [90,]  2.7995e-01 -1.6139e-03  1.3714e-01  7.6034e-01         0.4471\n [91,]  1.2594e+00 -1.6293e-03  3.1352e-01  2.2521e+00         0.0243\n [92,]  1.5556e+00 -3.1023e-03  3.9638e-01  2.4758e+00         0.0133\n [93,]  1.5340e-02 -2.7474e-05  3.5211e-03  2.5898e-01         0.7957\n [94,] -2.5300e-03 -1.1800e-03  1.1300e-01 -4.0159e-03         0.9968\n [95,]  7.6855e-02 -6.6464e-05  8.5177e-03  8.3347e-01         0.4046\n [96,]  1.0441e-01 -8.3227e-05  9.1302e-03  1.0936e+00         0.2741\n [97,]  1.3641e-02 -1.0187e-04  1.5687e-02  1.0972e-01         0.9126\n [98,]  1.1455e-01 -8.6740e-05  1.3357e-02  9.9194e-01         0.3212\n [99,]  1.7310e+00 -5.0729e-03  7.7725e-01  1.9692e+00         0.0489\n[100,]  2.3984e-01 -3.9948e-04  6.1495e-02  9.6877e-01         0.3327\n[101,] -3.3258e-02 -1.0005e-03  1.5392e-01 -8.2221e-02         0.9345\n[102,]  1.3115e+00 -1.5369e-03  2.3631e-01  2.7011e+00         0.0069\n[103,]  4.0359e-01 -6.6611e-04  6.3819e-02  1.6002e+00         0.1095\n[104,]  1.5876e-01 -1.6911e-04  1.6210e-02  1.2483e+00         0.2119\n[105,] -1.4206e-01 -1.0187e-04  1.3055e-02 -1.2424e+00         0.2141\n[106,] -2.7773e-01 -1.2665e-04  4.8946e-02 -1.2548e+00         0.2096\n[107,]  2.4930e+00 -3.2114e-03  6.1700e-01  3.1779e+00         0.0015\n[108,] -5.8784e-02 -1.0187e-04  1.3055e-02 -5.1359e-01         0.6075\n[109,] -1.5672e-01 -3.5442e-04  4.5409e-02 -7.3377e-01         0.4631\n[110,] -4.1380e-01 -7.3580e-03  9.3610e-01 -4.2009e-01         0.6744\n[111,] -5.1571e-03 -6.1696e-04  5.9113e-02 -1.8674e-02         0.9851\n[112,]  1.4570e+00 -5.4960e-03  4.1812e-01  2.2617e+00         0.0237\n[113,] -3.8941e-01 -6.1696e-04  7.9024e-02 -1.3831e+00         0.1666\n[114,]  3.1656e-01 -5.2432e-04  6.7164e-02  1.2235e+00         0.2211\n[115,]  1.1080e+00 -1.6293e-03  1.5595e-01  2.8100e+00         0.0050\n[116,] -3.9244e-03 -2.7474e-05  4.2308e-03 -5.9912e-02         0.9522\n[117,] -2.2026e-01 -2.2908e-04  5.8936e-02 -9.0634e-01         0.3648\n[118,]  2.6413e+00 -7.0289e-03  1.0748e+00  2.5544e+00         0.0106\n[119,]  5.0520e-01 -2.2335e-04  2.8619e-02  2.9876e+00         0.0028\n[120,]  3.8506e-01 -1.2240e-04  2.3590e-02  2.5079e+00         0.0121\n[121,]  6.1236e-01 -1.4027e-03  2.1571e-01  1.3215e+00         0.1863\n[122,]  1.0879e+00 -1.6293e-03  2.0847e-01  2.3861e+00         0.0170\n[123,] -1.6056e-01 -2.5939e-04  2.2071e-02 -1.0790e+00         0.2806\n[124,]  1.1130e+00 -1.7736e-03  2.2691e-01  2.3403e+00         0.0193\n[125,] -2.3771e-02 -1.7410e-04  2.2310e-02 -1.5798e-01         0.8745\n[126,]  2.9992e-01 -6.1696e-04  2.3831e-01  6.1564e-01         0.5381\n[127,]  4.5271e-03 -3.3691e-07  5.1884e-05  6.2854e-01         0.5297\n[128,] -3.1431e-02 -2.5939e-04  3.9936e-02 -1.5598e-01         0.8760\n[129,]  1.9890e-01 -8.8152e-04  1.1288e-01  5.9464e-01         0.5521\n[130,]  3.5611e-02 -1.7410e-04  1.9098e-02  2.5895e-01         0.7957\n[131,]  8.8489e-01 -2.5854e-03  3.9712e-01  1.4083e+00         0.1590\n[132,]  4.8044e-01 -5.2432e-04  5.0242e-02  2.1458e+00         0.0319\n[133,]  5.1475e-01 -7.5951e-04  9.7268e-02  1.6529e+00         0.0983\n[134,]  8.0339e-01 -1.4027e-03  2.6999e-01  1.5488e+00         0.1214\n[135,]  3.2114e-01 -2.5329e-04  4.8809e-02  1.4547e+00         0.1457\n[136,] -5.6840e-01 -2.2908e-04  5.8936e-02 -2.3404e+00         0.0193\n[137,]  1.1020e-01 -3.8587e-05  7.4373e-03  1.2783e+00         0.2011\n[138,]  5.9203e-03 -3.3691e-07  2.6077e-04  3.6664e-01         0.7139\n[139,]  5.5138e-02 -5.1584e-05  6.6109e-03  6.7878e-01         0.4973\n[140,]  9.6015e-01 -1.0628e-03  2.7321e-01  1.8389e+00         0.0659\n[141,] -9.5507e-01 -1.3310e-03  1.2744e-01 -2.6717e+00         0.0075\n[142,] -1.7897e-01 -1.6911e-04  3.2590e-02 -9.9043e-01         0.3220\n[143,]  1.0225e+00 -1.4027e-03  2.1571e-01  2.2046e+00         0.0275\n[144,]  1.7306e-02 -1.8243e-05  2.3381e-03  3.5827e-01         0.7201\n[145,]  6.0340e-01 -9.2843e-04  1.4284e-01  1.5990e+00         0.1098\n[146,]  1.2026e+00 -1.6293e-03  1.5595e-01  3.0496e+00         0.0023\n[147,]  2.1291e-01 -1.1271e-03  1.2351e-01  6.0903e-01         0.5425\n[148,]  6.0388e-01 -5.2120e-03  9.9937e-01  6.0928e-01         0.5423\n[149,]  2.5406e-02 -1.8502e-06  3.5662e-04  1.3454e+00         0.1785\n[150,]  8.7051e-02 -1.2665e-04  1.3894e-02  7.3959e-01         0.4595\n[151,] -2.4850e-01 -2.9159e-04  3.7361e-02 -1.2841e+00         0.1991\n[152,]  5.2392e-03 -1.0896e-05  1.1954e-03  1.5185e-01         0.8793\n[153,]  2.4389e-01 -3.6164e-04  1.3972e-01  6.5343e-01         0.5135\n[154,]  4.0106e-01 -7.5951e-04  1.9530e-01  9.0925e-01         0.3632\n[155,] -1.5377e-01 -4.7250e-04  6.0530e-02 -6.2311e-01         0.5332\n[156,]  5.3629e-01 -1.0628e-03  1.3607e-01  1.4567e+00         0.1452\n[157,]  8.9625e-01 -1.4764e-03  1.4133e-01  2.3879e+00         0.0169\n[158,]  3.1740e-02 -6.5631e-04  1.2642e-01  9.1116e-02         0.9274\n[159,]  7.6727e-01 -1.4027e-03  1.5368e-01  1.9608e+00         0.0499\n[160,]  1.2594e+00 -1.6293e-03  2.0847e-01  2.7619e+00         0.0057\n[161,] -8.4960e-03 -1.0896e-05  1.3964e-03 -2.2706e-01         0.8204\n[162,] -6.3667e-02 -5.4358e-05  4.6261e-03 -9.3527e-01         0.3496\n[163,]  1.1948e+00 -1.6139e-03  1.5448e-01  3.0440e+00         0.0023\n[164,]  2.0795e+00 -5.2120e-03  5.6884e-01  2.7640e+00         0.0057\n[165,]  5.5516e-01 -6.1696e-04  9.4952e-02  1.8036e+00         0.0713\n[166,] -2.2053e-01 -1.4764e-03  1.4133e-01 -5.8267e-01         0.5601\n[167,] -1.9060e-01 -1.7410e-04  1.9098e-02 -1.3780e+00         0.1682\n[168,] -6.0360e-02 -6.0753e-04  7.7817e-02 -2.1420e-01         0.8304\n[169,]  1.4145e-01 -4.3921e-04  6.7608e-02  5.4568e-01         0.5853\n[170,]  2.1159e-03 -1.5201e-07  1.9483e-05  4.7940e-01         0.6317\n[171,]  3.9816e-01 -1.6928e-03  6.5316e-01  4.9475e-01         0.6208\n[172,]  6.6615e-02 -8.3227e-05  2.1415e-02  4.5578e-01         0.6485\n[173,] -8.3543e-02 -6.3560e-06  5.4095e-04 -3.5917e+00         0.0003\n[174,]  5.1988e+00 -7.3580e-03  1.1248e+00  4.9089e+00         0.0000\n[175,] -6.1117e-01 -3.2567e-04  6.2752e-02 -2.4385e+00         0.0147\n[176,]  4.1147e-01 -3.2567e-04  5.0137e-02  1.8391e+00         0.0659\n[177,] -5.1928e-02 -1.4764e-03  2.2702e-01 -1.0589e-01         0.9157\n[178,] -4.9780e-02 -5.4358e-05  8.3705e-03 -5.4351e-01         0.5868\n[179,]  1.6985e-01 -6.6464e-05  6.3716e-03  2.1287e+00         0.0333\n[180,]  8.7812e-02 -2.0065e-04  5.1623e-02  3.8737e-01         0.6985\n[181,]  2.6799e-01 -3.2567e-04  5.0137e-02  1.1983e+00         0.2308\n[182,]  6.0643e-01 -7.8659e-03  8.5620e-01  6.6388e-01         0.5068\n[183,]  2.1179e-01 -1.4944e-04  2.8799e-02  1.2489e+00         0.2117\n[184,]  2.1969e-02 -1.0576e-04  2.0382e-02  1.5463e-01         0.8771\n[185,]  1.4005e+00 -5.9361e-03  7.5628e-01  1.6173e+00         0.1058\n[186,] -1.0618e+00 -1.3310e-03  2.0470e-01 -2.3439e+00         0.0191\n[187,]  6.3314e-01 -1.3171e-03  1.4431e-01  1.6701e+00         0.0949\n[188,]  6.8633e-01 -1.6139e-03  1.5448e-01  1.7503e+00         0.0801\n[189,]  8.4833e-01 -1.4027e-03  2.1571e-01  1.8296e+00         0.0673\n[190,]  9.4656e-01 -1.6293e-03  2.0847e-01  2.0767e+00         0.0378\n[191,]  6.9091e-01 -1.4764e-03  1.4133e-01  1.8417e+00         0.0655\n[192,] -7.8665e-01 -5.2432e-04  8.0702e-02 -2.7673e+00         0.0057\n[193,]  7.7163e-01 -1.3310e-03  2.0470e-01  1.7084e+00         0.0876\n[194,]  9.2184e-01 -1.5519e-03  2.3861e-01  1.8903e+00         0.0587\n[195,]  7.6622e-01 -1.5519e-03  3.9872e-01  1.2159e+00         0.2240\n[196,] -3.7032e-01 -1.7736e-03  1.6974e-01 -8.9454e-01         0.3710\n[197,]  3.0807e-01 -4.3921e-04  8.4620e-02  1.0606e+00         0.2889\n[198,]  2.7978e-01 -4.3921e-04  6.7608e-02  1.0777e+00         0.2812\n[199,]  3.0807e-01 -4.3921e-04  3.7364e-02  1.5960e+00         0.1105\n[200,]  2.5359e-01 -5.2432e-04  6.7164e-02  9.8052e-01         0.3268\n[201,] -1.2830e-01 -8.7024e-04  1.3390e-01 -3.4823e-01         0.7277\n[202,] -6.6490e-02 -2.2335e-04  2.8619e-02 -3.9171e-01         0.6953\n[203,] -9.6745e-03 -6.3560e-06  6.9732e-04 -3.6612e-01         0.7143\n[204,]  3.5215e-01 -9.4008e-04  1.0304e-01  1.1000e+00         0.2713\n[205,]  1.8275e-01 -7.1713e-04  1.3813e-01  4.9365e-01         0.6216\n[206,]  2.4589e-01 -6.1696e-04  9.4952e-02  7.9998e-01         0.4237\n[207,]  3.5720e-01 -1.6293e-03  2.5049e-01  7.1695e-01         0.4734\n[208,] -1.6426e-03 -8.6740e-05  1.1116e-02 -1.4757e-02         0.9882\n[209,] -5.9054e-02 -2.2908e-04  3.5270e-02 -3.1323e-01         0.7541\n[210,]  1.7603e-01 -1.4944e-04  2.3009e-02  1.1615e+00         0.2455\n[211,]  1.5248e-01 -3.2567e-04  2.7709e-02  9.1798e-01         0.3586\n[212,]  2.4287e-01 -3.6164e-04  3.9661e-02  1.2213e+00         0.2220\n[213,]  1.4342e+00 -1.7736e-03  4.5559e-01  2.1274e+00         0.0334\n[214,]  5.2240e-01 -7.7005e-04  9.8617e-02  1.6660e+00         0.0957\n[215,]  7.5888e-01 -9.4008e-04  1.4463e-01  1.9979e+00         0.0457\n[216,]  1.6444e-01 -4.8082e-04  7.4010e-02  6.0623e-01         0.5444\n[217,]  6.0721e-01 -9.2843e-04  1.1888e-01  1.7638e+00         0.0778\n[218,]  3.2949e-01 -2.5329e-04  3.8997e-02  1.6698e+00         0.0950\n[219,]  1.8108e-01 -1.2611e-03  1.9397e-01  4.1402e-01         0.6789\n[220,] -3.2792e-01 -9.4008e-04  1.0304e-01 -1.0186e+00         0.3084\n[221,]  2.4549e-02 -1.3171e-03  1.2611e-01  7.2837e-02         0.9419\n[222,]  1.7447e-01 -1.3310e-03  1.1313e-01  5.2269e-01         0.6012\n[223,]  1.1282e+00 -1.6293e-03  2.0847e-01  2.4745e+00         0.0133\n[224,]  9.0930e-01 -4.5350e-03  6.9522e-01  1.0960e+00         0.2731\n[225,]  5.8138e-01 -4.8082e-04  4.6076e-02  2.7107e+00         0.0067\n[226,] -3.7599e-01 -5.6970e-04  8.7683e-02 -1.2678e+00         0.2049\n[227,] -1.2045e-01 -1.3310e-03  1.7036e-01 -2.8861e-01         0.7729\n[228,] -1.3345e-01 -3.9948e-04  7.6969e-02 -4.7959e-01         0.6315\n[229,] -2.0381e-01 -6.9607e-05  8.9205e-03 -2.1571e+00         0.0310\n[230,] -7.6187e-01 -1.0460e-02  1.3266e+00 -6.5240e-01         0.5141\n[231,]  2.7240e-02 -8.8152e-04  8.4439e-02  9.6776e-02         0.9229\n[232,]  5.0871e-01 -1.2611e-03  2.4277e-01  1.0350e+00         0.3007\n[233,]  2.6524e-01 -1.9408e-03  1.8571e-01  6.1999e-01         0.5353\n[234,] -5.1335e-01 -8.2484e-04  9.0420e-02 -1.7044e+00         0.0883\n[235,] -2.9015e-02 -5.4315e-06  8.3643e-04 -1.0030e+00         0.3158\n[236,]  1.1755e-01 -5.1563e-04  9.9335e-02  3.7461e-01         0.7080\n[237,]  1.3126e+00 -3.6663e-03  4.6817e-01  1.9238e+00         0.0544\n[238,] -1.4848e-01 -1.4764e-03  2.8414e-01 -2.7577e-01         0.7827\n[239,]  3.7775e-02 -9.8850e-04  1.5208e-01  9.9400e-02         0.9208\n[240,]  7.7890e-01 -8.7024e-04  1.3390e-01  2.1310e+00         0.0331\n[241,]  1.1333e+00 -1.6293e-03  2.0847e-01  2.4856e+00         0.0129\n[242,] -6.4555e-01 -2.3918e-03  3.6746e-01 -1.0610e+00         0.2887\n[243,]  4.9586e-02 -8.6740e-05  1.6717e-02  3.8418e-01         0.7008\n[244,]  1.0836e+00 -1.4764e-03  2.2702e-01  2.2773e+00         0.0228\n[245,]  3.8248e+00 -8.7500e-03  7.3819e-01  4.4618e+00         0.0000\n[246,]  1.0740e+00 -1.5519e-03  2.9865e-01  1.9681e+00         0.0491\n[247,] -1.8230e-01 -6.3560e-06  2.4566e-03 -3.6779e+00         0.0002\n[248,]  7.0669e-01 -6.1696e-04  7.9024e-02  2.5161e+00         0.0119\n[249,]  1.6396e-01 -2.0065e-04  2.5711e-02  1.0238e+00         0.3059\n[250,]  1.2473e+00 -1.6293e-03  2.5049e-01  2.4954e+00         0.0126\n[251,] -5.9583e-02 -3.2567e-04  8.3778e-02 -2.0473e-01         0.8378\n[252,]  1.1426e+00 -1.6293e-03  1.7846e-01  2.7087e+00         0.0068\n[253,] -2.9047e-01 -1.5519e-03  1.6999e-01 -7.0073e-01         0.4835\n[254,]  2.0807e-01 -3.5442e-04  3.0154e-02  1.2003e+00         0.2300\n[255,]  3.8144e-01 -1.0067e-02  2.5645e+00  2.4448e-01         0.8069\n[256,]  6.0368e-02 -3.9948e-04  4.3811e-02  2.9032e-01         0.7716\n[257,] -1.8975e-02 -3.2567e-04  3.5719e-02 -9.8676e-02         0.9214\n[258,] -2.5097e-01 -4.8082e-04  5.2727e-02 -1.0909e+00         0.2753\n[259,] -1.3466e-02 -6.9607e-05  6.6730e-03 -1.6399e-01         0.8697\n[260,]  2.6386e-01 -8.8152e-04  1.6976e-01  6.4253e-01         0.5205\n[261,]  1.2594e+00 -1.6293e-03  2.0847e-01  2.7619e+00         0.0057\n[262,] -1.6638e-02 -8.3227e-05  1.0666e-02 -1.6030e-01         0.8726\n[263,]  4.4946e-02 -8.3227e-05  1.0666e-02  4.3602e-01         0.6628\n[264,]  1.2977e-01 -3.6164e-04  6.9679e-02  4.9300e-01         0.6220\n[265,]  3.3081e-02 -2.3918e-03  4.5992e-01  5.2307e-02         0.9583\n[266,]  1.7445e-01 -8.2484e-04  7.9014e-02  6.2354e-01         0.5329\n[267,]  4.4520e-01 -1.0005e-03  1.2810e-01  1.2467e+00         0.2125\n[268,]  1.9241e-01 -1.3171e-03  1.1195e-01  5.7901e-01         0.5626\n[269,] -3.8389e-02 -5.2432e-04  6.7164e-02 -1.4610e-01         0.8838\n[270,]  1.6416e-01 -4.7250e-04  6.0530e-02  6.6916e-01         0.5034\n[271,]  1.2594e+00 -1.6293e-03  3.1352e-01  2.2521e+00         0.0243\n[272,]  4.8696e-01 -1.8563e-03  4.7679e-01  7.0791e-01         0.4790\n[273,]  1.0605e+00 -1.4764e-03  2.2702e-01  2.2289e+00         0.0258\n[274,]  1.0259e+00 -1.4764e-03  1.8894e-01  2.3637e+00         0.0181\n[275,] -1.0703e-02 -1.2611e-03  1.9397e-01 -2.1438e-02         0.9829\n[276,] -2.1440e-02 -5.4315e-06  6.9612e-04 -8.1240e-01         0.4166\n[277,]  2.3917e-01 -2.5939e-04  3.9936e-02  1.1981e+00         0.2309\n[278,]  1.9592e-01 -1.4764e-03  2.2702e-01  4.1430e-01         0.6787\n[279,]  2.1408e-01 -1.4944e-04  2.8799e-02  1.2624e+00         0.2068\n[280,]  2.2796e-01 -2.0065e-04  2.2009e-02  1.5379e+00         0.1241\n[281,] -2.2321e-01 -7.5951e-04  1.1687e-01 -6.5070e-01         0.5152\n[282,]  1.6479e-02 -4.0991e-05  5.2534e-03  2.2792e-01         0.8197\n[283,] -3.9040e-02 -5.6064e-04  8.6289e-02 -1.3099e-01         0.8958\n[284,]  2.2328e-03 -1.0896e-05  4.2112e-03  3.4575e-02         0.9724\n[285,]  1.3352e-01 -8.2484e-04  1.2692e-01  3.7710e-01         0.7061\n[286,] -9.1857e-03 -1.4944e-04  2.3009e-02 -5.9571e-02         0.9525\n[287,] -3.9854e-01 -2.9159e-04  3.1982e-02 -2.2269e+00         0.0260\n[288,]  1.2328e-02 -1.0576e-04  1.3553e-02  1.0680e-01         0.9149\n[289,]  6.7819e-02 -1.9907e-05  5.1227e-03  9.4782e-01         0.3432\n[290,]  2.3530e-01 -1.4481e-04  1.2323e-02  2.1209e+00         0.0339\n[291,]  8.9203e-01 -1.3310e-03  1.2744e-01  2.5025e+00         0.0123\n[292,]  8.3162e-01 -1.1932e-03  2.2970e-01  1.7377e+00         0.0823\n[293,]  8.3655e-01 -1.4764e-03  1.6173e-01  2.0838e+00         0.0372\n[294,]  9.4220e-01 -1.3310e-03  1.7036e-01  2.2860e+00         0.0223\n[295,]  1.2468e-01 -1.4944e-04  1.4325e-02  1.0430e+00         0.2969\n[296,] -2.5288e-01 -1.4027e-03  2.1571e-01 -5.4145e-01         0.5882\n[297,] -8.5555e-02 -4.8082e-04  7.4010e-02 -3.1272e-01         0.7545\n[298,]  1.3423e+00 -2.7865e-03  5.3560e-01  1.8379e+00         0.0661\n[299,]  1.7201e+00 -2.9952e-03  5.7559e-01  2.2711e+00         0.0231\n[300,]  5.8931e-01 -3.9190e-04  4.2979e-02  2.8445e+00         0.0044\n[301,]  1.1519e+00 -9.2843e-04  1.1888e-01  3.3436e+00         0.0008\n[302,] -2.4444e-01 -4.0991e-05  5.2534e-03 -3.3720e+00         0.0007\n[303,]  6.0514e-01 -2.2979e-03  2.5152e-01  1.2112e+00         0.2258\n[304,]  7.9499e+00 -5.2175e-02  3.4346e+00  4.3179e+00         0.0000\n[305,]  1.1605e+00 -1.0505e-03  2.7003e-01  2.2352e+00         0.0254\n[306,]  1.1972e-01 -8.8152e-04  7.4959e-02  4.4050e-01         0.6596\n[307,]  4.7463e+00 -2.8967e-02  2.3940e+00  3.0863e+00         0.0020\n[308,]  5.1864e-01 -7.1713e-04  6.0991e-02  2.1030e+00         0.0355\n[309,]  6.0313e-01 -8.2484e-04  1.2692e-01  1.6953e+00         0.0900\n[310,]  7.8653e-01 -1.4027e-03  2.1571e-01  1.6965e+00         0.0898\n[311,]  9.7194e-01 -1.4027e-03  2.6999e-01  1.8732e+00         0.0610\n[312,]  1.2633e-01 -1.7410e-04  2.2310e-02  8.4697e-01         0.3970\n[313,]  2.4781e-01 -1.4944e-04  1.6393e-02  1.9367e+00         0.0528\n[314,]  3.1148e-01 -5.6970e-04  8.7683e-02  1.0538e+00         0.2920\n[315,] -9.1781e-01 -1.4764e-03  1.2547e-01 -2.5870e+00         0.0097\n[316,] -2.0886e-02 -5.4358e-05  5.2111e-03 -2.8857e-01         0.7729\n[317,]  1.0056e-02 -3.3691e-07  6.4940e-05  1.2479e+00         0.2120\n[318,]  7.6352e-02 -6.1696e-04  1.1884e-01  2.2327e-01         0.8233\n[319,] -2.0960e-01 -2.8899e-03  4.4376e-01 -3.1031e-01         0.7563\n[320,]  3.4749e-01 -3.9190e-04  3.7558e-02  1.7950e+00         0.0726\n[321,] -8.7735e-03 -3.3691e-07  6.4940e-05 -1.0887e+00         0.2763\n[322,]  6.0546e-01 -1.6293e-03  2.5049e-01  1.2130e+00         0.2251\n[323,]  3.6294e-01 -8.2484e-04  1.5886e-01  9.1269e-01         0.3614\n[324,] -3.3967e-01 -5.6970e-04  6.2467e-02 -1.3568e+00         0.1749\n[325,]  2.8260e-01 -6.6611e-04  1.0251e-01  8.8472e-01         0.3763\n[326,]  7.8223e-01 -1.5519e-03  1.4855e-01  2.0336e+00         0.0420\n[327,]  2.9584e-01 -1.0628e-03  2.0464e-01  6.5632e-01         0.5116\n[328,]  1.1375e-01 -1.4481e-04  2.2298e-02  7.6271e-01         0.4456\n[329,]  3.0851e-01 -6.0753e-04  6.6613e-02  1.1977e+00         0.2310\n[330,]  1.7581e+00 -1.8563e-03  2.3747e-01  3.6115e+00         0.0003\n[331,]  2.2517e-02 -1.2190e-05  1.3374e-03  6.1605e-01         0.5379\n[332,] -6.8508e-02 -4.3126e-04  6.6385e-02 -2.6422e-01         0.7916\n[333,]  4.6297e-02 -6.9607e-05  1.0719e-02  4.4785e-01         0.6543\n[334,]  2.2357e-03 -1.2665e-04  3.2588e-02  1.3087e-02         0.9896\n[335,]  3.2121e-02 -1.9907e-05  2.1840e-03  6.8776e-01         0.4916\n[336,]  4.2793e-01 -1.4764e-03  2.8414e-01  8.0555e-01         0.4205\n[337,]  1.6736e-01 -2.7474e-05  3.5211e-03  2.8209e+00         0.0048\n[338,] -1.3874e-02 -1.8502e-06  2.3713e-04 -9.0082e-01         0.3677\n[339,]  1.0575e+00 -5.6064e-04  6.1474e-02  4.2674e+00         0.0000\n[340,] -5.1335e-02 -6.6611e-04  1.2831e-01 -1.4146e-01         0.8875\n[341,]  1.7685e+00 -2.2058e-03  3.3894e-01  3.0415e+00         0.0024\n[342,] -2.1969e-01 -3.6164e-04  6.9679e-02 -8.3088e-01         0.4060\n[343,]  3.3804e-01 -1.0187e-04  1.9634e-02  2.4132e+00         0.0158\n[344,]  2.3381e-01 -5.1584e-05  9.9422e-03  2.3454e+00         0.0190\n[345,] -9.5576e-02 -1.0505e-03  2.7003e-01 -1.8190e-01         0.8557\n[346,] -3.2968e-01 -4.0991e-05  7.9006e-03 -3.7086e+00         0.0002\n[347,] -2.2808e-01 -1.9907e-05  3.8370e-03 -3.6817e+00         0.0002\n[348,]  6.0644e-01 -2.5329e-04  3.8997e-02  3.0723e+00         0.0021\n[349,] -2.8465e-01 -1.6293e-03  2.5049e-01 -5.6548e-01         0.5717\n[350,] -2.4347e-02 -3.9948e-04  3.3986e-02 -1.2990e-01         0.8966\n[351,]  2.2962e-01 -7.1713e-04  9.1845e-02  7.6003e-01         0.4472\n[352,] -3.1592e-01 -2.5939e-04  4.9985e-02 -1.4119e+00         0.1580\n[353,]  3.2391e-01 -1.9529e-04  3.7634e-02  1.6707e+00         0.0948\n[354,] -2.1348e-02 -1.2190e-05  2.3496e-03 -4.4016e-01         0.6598\n[355,]  6.7002e+00 -1.1896e-02  1.5065e+00  5.4686e+00         0.0000\n[356,] -8.5921e-03 -3.3691e-07  8.6699e-05 -9.2273e-01         0.3561\n[357,] -2.1337e-01 -1.2665e-04  1.2141e-02 -1.9353e+00         0.0530\n[358,]  1.8750e-01 -8.3227e-05  1.2816e-02  1.6570e+00         0.0975\n[359,]  2.2377e-01 -1.0005e-03  1.2810e-01  6.2799e-01         0.5300\n[360,] -3.6645e-01 -1.5519e-03  1.9858e-01 -8.1883e-01         0.4129\n[361,] -1.4041e-02 -8.2484e-04  7.9014e-02 -4.7017e-02         0.9625\n[362,]  4.5326e-01 -1.6928e-03  1.8541e-01  1.0566e+00         0.2907\n[363,] -1.8068e-02 -1.8502e-06  1.5747e-04 -1.4397e+00         0.1500\n[364,]  6.1568e-03 -1.0576e-04  1.6284e-02  4.9076e-02         0.9609\n[365,] -2.3552e-02 -5.4358e-05  5.9634e-03 -3.0429e-01         0.7609\n[366,]  1.3603e-01 -5.4358e-05  6.9663e-03  1.6304e+00         0.1030\n[367,]  1.6075e+00 -2.2335e-04  5.7462e-02  6.7068e+00         0.0000\n[368,]  4.3322e-01 -5.6970e-04  8.7683e-02  1.4649e+00         0.1429\n[369,]  1.1649e-01 -3.8587e-05  5.9421e-03  1.5117e+00         0.1306\n[370,]  1.7635e-01 -2.5939e-04  4.9985e-02  7.8995e-01         0.4296\n[371,]  2.3355e-01 -5.2432e-04  8.0702e-02  8.2397e-01         0.4100\n[372,]  8.0259e-01 -1.4764e-03  2.8414e-01  1.5084e+00         0.1314\n[373,] -4.9096e-03 -3.3691e-07  3.2301e-05 -8.6379e-01         0.3877\n[374,] -1.9898e-01 -1.1271e-03  2.1699e-01 -4.2473e-01         0.6710\n[375,]  1.8183e-02 -5.4315e-06  1.0469e-03  5.6214e-01         0.5740\n[376,]  3.0014e-01 -5.6970e-04  7.2974e-02  1.1132e+00         0.2656\n[377,] -2.7292e-01 -1.3885e-03  1.7771e-01 -6.4412e-01         0.5195\n[378,]  1.1751e-04 -1.5201e-07  2.3410e-05  2.4318e-02         0.9806\n[379,] -2.8476e-01 -2.0065e-04  3.0893e-02 -1.6190e+00         0.1055\n[380,]  1.8307e+00 -2.5854e-03  3.9712e-01  2.9092e+00         0.0036\n[381,]  1.0937e+00 -1.4027e-03  3.6046e-01  1.8240e+00         0.0682\n[382,]  4.1604e-02 -1.9907e-05  2.5514e-03  8.2405e-01         0.4099\n[383,] -1.3609e-01 -1.3310e-03  1.4583e-01 -3.5288e-01         0.7242\n[384,]  2.8372e-01 -2.8512e-04  7.3350e-02  1.0487e+00         0.2943\n[385,] -3.0180e-03 -1.9907e-05  3.8370e-03 -4.8400e-02         0.9614\n[386,]  5.1396e-02 -8.1393e-04  1.0423e-01  1.6172e-01         0.8715\n[387,]  2.2677e+00 -1.2323e-02  1.5599e+00  1.8255e+00         0.0679\n[388,]  1.3587e-01 -1.9907e-05  3.8370e-03  2.1937e+00         0.0283\n[389,] -1.3833e-01 -8.6740e-05  1.3357e-02 -1.1962e+00         0.2316\n[390,]  1.6610e-01 -1.4481e-04  1.8557e-02  1.2204e+00         0.2223\n[391,] -1.3708e-01 -2.0065e-04  3.8667e-02 -6.9608e-01         0.4864\n[392,]  7.9504e-01 -1.8563e-03  2.8533e-01  1.4918e+00         0.1357\n[393,] -4.1644e-02 -1.2190e-05  1.5623e-03 -1.0533e+00         0.2922\n[394,]  3.3786e-01 -1.4027e-03  1.5368e-01  8.6542e-01         0.3868\n[395,]  3.6659e-01 -1.3885e-03  1.5212e-01  9.4345e-01         0.3454\n[396,]  6.6745e-01 -6.5631e-04  1.6878e-01  1.6263e+00         0.1039\n[397,] -1.3384e+00 -1.0628e-03  2.7321e-01 -2.5586e+00         0.0105\n[398,] -1.3991e-01 -1.5519e-03  1.9858e-01 -3.1049e-01         0.7562\n[399,]  1.0387e-01 -2.5939e-04  3.3237e-02  5.7117e-01         0.5679\n[400,]  1.2291e+00 -1.6293e-03  2.5049e-01  2.4591e+00         0.0139\n[401,]  6.9803e-01 -7.1925e-03  7.8343e-01  7.9676e-01         0.4256\n[402,]  1.7354e-01 -1.5369e-03  1.9667e-01  3.9479e-01         0.6930\n[403,]  3.2879e-01 -3.2114e-03  4.1026e-01  5.1833e-01         0.6042\n[404,] -8.3867e-02 -1.6911e-04  4.3510e-02 -4.0125e-01         0.6882\n[405,] -9.5981e-01 -9.4008e-04  7.9934e-02 -3.3915e+00         0.0007\n[406,]  1.2594e+00 -1.6293e-03  4.1858e-01  1.9491e+00         0.0513\n[407,]  2.6967e-01 -8.1393e-04  1.2524e-01  7.6429e-01         0.4447\n[408,]  2.5493e+00 -1.6139e-03  2.4814e-01  5.1209e+00         0.0000\n[409,]  2.9802e-01 -1.0505e-03  1.1513e-01  8.8142e-01         0.3781\n[410,]  1.1638e-01 -3.2567e-04  3.5719e-02  6.1754e-01         0.5369\n[411,]  7.2042e-01 -1.9408e-03  2.9830e-01  1.3226e+00         0.1860\n[412,]  5.3476e-03 -2.9508e-05  3.2373e-03  9.4506e-02         0.9247\n[413,] -1.8587e-01 -1.2240e-04  1.8847e-02 -1.3530e+00         0.1761\n[414,]  2.6109e-01 -7.1713e-04  1.1036e-01  7.8808e-01         0.4306\n[415,] -4.4721e-02 -3.8587e-05  5.9421e-03 -5.7965e-01         0.5622\n[416,]  5.2223e-01 -8.7024e-04  6.6513e-02  2.0283e+00         0.0425\n[417,]  6.1343e-01 -4.7250e-04  4.0195e-02  3.0621e+00         0.0022\n[418,] -3.7341e-02 -1.2190e-05  1.3374e-03 -1.0208e+00         0.3074\n[419,] -2.1242e-01 -6.1696e-04  9.4952e-02 -6.8736e-01         0.4919\n[420,]  2.5985e-01 -3.1883e-04  8.2019e-02  9.0844e-01         0.3636\n[421,]  3.2301e-01 -1.6911e-04  1.8550e-02  2.3729e+00         0.0177\n[422,] -2.2891e-02 -8.6740e-05  8.3153e-03 -2.5008e-01         0.8025\n[423,]  3.7871e-01 -2.8512e-04  5.4941e-02  1.6169e+00         0.1059\n[424,]  2.2962e-01 -3.6164e-04  6.9679e-02  8.7125e-01         0.3836\n[425,]  2.2026e-01 -1.4481e-04  2.2298e-02  1.4760e+00         0.1399\n[426,]  1.4762e+00 -4.1514e-03  4.5357e-01  2.1980e+00         0.0279\n[427,] -9.4820e-03 -2.4049e-06  4.6354e-04 -4.4030e-01         0.6597\n[428,] -8.3150e-02 -1.4944e-04  1.9150e-02 -5.9979e-01         0.5486\n[429,] -2.2203e-01 -5.6970e-04  2.2006e-01 -4.7208e-01         0.6369\n[430,]  4.3198e-01 -4.8082e-04  4.0903e-02  2.1383e+00         0.0325\n[431,]  3.0903e-03 -3.3691e-07  6.4940e-05  3.8353e-01         0.7013\n[432,] -8.2235e-02 -1.2190e-05  1.8772e-03 -1.8977e+00         0.0577\n[433,]  7.4171e-01 -2.9952e-03  3.8273e-01  1.2038e+00         0.2287\n[434,] -5.1033e-02 -1.0187e-04  1.1176e-02 -4.8179e-01         0.6300\n[435,] -8.1430e-01 -2.3918e-03  3.6746e-01 -1.3394e+00         0.1804\n[436,] -5.2587e-04 -1.5201e-07  2.3410e-05 -1.0866e-01         0.9135\n[437,] -1.8028e-02 -3.1023e-03  3.9638e-01 -2.3707e-02         0.9811\n[438,]  2.8890e-02 -5.4315e-06  5.2073e-04  1.2663e+00         0.2054\n[439,]  4.1165e-01 -1.5519e-03  3.9872e-01  6.5437e-01         0.5129\n[440,]  1.1292e+00 -1.6293e-03  1.2443e-01  3.2058e+00         0.0013\n[441,]  1.0840e+00 -1.8563e-03  2.0328e-01  2.4085e+00         0.0160\n[442,] -3.9096e-02 -1.0576e-04  2.7211e-02 -2.3636e-01         0.8132\n[443,]  5.7901e-01 -1.1932e-03  2.2970e-01  1.2106e+00         0.2260\n[444,] -3.1253e-01 -4.8082e-04  7.4010e-02 -1.1470e+00         0.2514\n[445,]  1.7365e+00 -1.8563e-03  2.3747e-01  3.5673e+00         0.0004\n[446,]  3.2548e-01 -9.8850e-04  1.5208e-01  8.3716e-01         0.4025\n[447,]  1.2594e+00 -1.6293e-03  4.1858e-01  1.9491e+00         0.0513\n[448,]  3.0839e-01 -1.0005e-03  7.6461e-02  1.1189e+00         0.2632\n[449,]  7.6352e-02 -6.1696e-04  1.1884e-01  2.2327e-01         0.8233\n[450,] -4.1048e-03 -5.4315e-06  1.0469e-03 -1.2670e-01         0.8992\n[451,]  1.2686e-01 -6.5631e-04  1.0100e-01  4.0123e-01         0.6883\n[452,]  7.5870e-01 -1.5369e-03  2.3631e-01  1.5639e+00         0.1178\n[453,]  1.0810e-01 -1.4027e-03  2.6999e-01  2.1075e-01         0.8331\n[454,]  2.6058e-01 -9.2843e-04  2.3869e-01  5.3527e-01         0.5925\n[455,]  2.1990e+00 -2.9952e-03  3.8273e-01  3.5593e+00         0.0004\n[456,]  3.4312e-01 -1.9529e-04  2.5024e-02  2.1703e+00         0.0300\n[457,] -9.2110e-02 -5.1584e-05  4.9452e-03 -1.3091e+00         0.1905\n[458,]  1.0592e+00 -1.5519e-03  2.9865e-01  1.9411e+00         0.0522\n[459,]  6.1601e-01 -2.5854e-03  2.4723e-01  1.2441e+00         0.2135\n[460,]  2.7495e-03 -8.3227e-05  9.1302e-03  2.9646e-02         0.9763\n[461,]  8.7071e-01 -8.8152e-04  1.6976e-01  2.1154e+00         0.0344\n[462,]  1.0548e+00 -1.4764e-03  2.2702e-01  2.2168e+00         0.0266\n[463,] -1.4841e-01 -1.6293e-03  2.0847e-01 -3.2146e-01         0.7479\n[464,]  1.4206e+00 -2.4877e-03  2.7225e-01  2.7274e+00         0.0064\n[465,] -1.1821e-02 -3.3691e-07  6.4940e-05 -1.4669e+00         0.1424\n[466,]  8.8151e-02 -2.2908e-04  2.9353e-02  5.1585e-01         0.6060\n[467,] -2.6019e-01 -1.1800e-03  1.1300e-01 -7.7051e-01         0.4410\n[468,] -1.3218e-01 -5.4358e-05  1.0477e-02 -1.2908e+00         0.1968\n[469,] -2.5593e-01 -9.2843e-04  1.4284e-01 -6.7470e-01         0.4999\n[470,]  4.3064e-01 -3.9190e-04  6.0328e-02  1.7549e+00         0.0793\n[471,] -2.4223e-01 -6.1696e-04  4.7167e-02 -1.1125e+00         0.2659\n[472,] -2.0149e-01 -1.1271e-03  1.7337e-01 -4.8121e-01         0.6304\n[473,]  1.1686e+00 -1.6293e-03  3.1352e-01  2.0899e+00         0.0366\n[474,]  1.9074e-01 -3.9948e-04  3.8284e-02  9.7688e-01         0.3286\n[475,]  1.0727e+00 -1.6293e-03  2.0847e-01  2.3530e+00         0.0186\n[476,]  1.0025e-02 -5.4315e-06  6.9612e-04  3.8019e-01         0.7038\n[477,]  1.1659e+00 -1.4764e-03  1.6173e-01  2.9028e+00         0.0037\n[478,]  1.3331e-01 -4.6667e-03  7.1530e-01  1.6315e-01         0.8704\n[479,]  6.3207e-01 -1.3310e-03  5.1374e-01  8.8370e-01         0.3769\n[480,]  4.3287e-03 -1.5201e-07  2.3410e-05  8.9469e-01         0.3710\n[481,]  1.0699e+00 -1.3310e-03  2.5620e-01  2.1164e+00         0.0343\n[482,]  2.4282e-01 -1.4481e-04  1.8557e-02  1.7836e+00         0.0745\n[483,] -1.7627e-01 -1.4764e-03  1.6173e-01 -4.3462e-01         0.6638\n[484,] -2.1424e-02 -1.9907e-05  3.8370e-03 -3.4555e-01         0.7297\n[485,] -7.2290e-01 -6.1696e-04  9.4952e-02 -2.3440e+00         0.0191\n[486,]  3.6161e-01 -5.6970e-04  8.7683e-02  1.2231e+00         0.2213\n[487,]  1.3397e+00 -3.1023e-03  3.9638e-01  2.1329e+00         0.0329\n[488,]  8.8576e-02 -2.2335e-04  2.8619e-02  5.2491e-01         0.5996\n[489,]  1.2163e-01 -1.4944e-04  1.2716e-02  1.0799e+00         0.2802\n[490,]  2.3158e-01 -3.1883e-04  2.7127e-02  1.4080e+00         0.1591\n[491,] -1.1329e+00 -1.3310e-03  2.5620e-01 -2.2356e+00         0.0254\n[492,]  1.2594e+00 -1.6293e-03  3.1352e-01  2.2521e+00         0.0243\n[493,]  3.2692e-02 -5.1584e-05  4.3900e-03  4.9418e-01         0.6212\n[494,] -2.2519e-02 -2.9508e-05  2.8289e-03 -4.2283e-01         0.6724\n[495,]  4.1354e-01 -2.8512e-04  5.4941e-02  1.7655e+00         0.0775\n[496,] -4.1226e-02 -3.8587e-05  7.4373e-03 -4.7760e-01         0.6329\n[497,]  2.6339e-01 -1.4027e-03  1.1922e-01  7.6690e-01         0.4431\n[498,]  4.1717e-01 -7.7005e-04  6.5487e-02  1.6332e+00         0.1024\n[499,]  2.4081e-02 -6.9607e-05  1.3416e-02  2.0851e-01         0.8348\n[500,]  1.0370e+00 -1.2611e-03  3.2412e-01  1.8237e+00         0.0682\n[501,]  4.7223e-02 -1.5519e-03  2.3861e-01  9.9850e-02         0.9205\n[502,]  2.2655e+00 -2.5854e-03  6.6359e-01  2.7843e+00         0.0054\n[503,]  5.0177e-02 -1.4764e-03  1.6173e-01  1.2844e-01         0.8978\n[504,]  1.8327e-02 -1.2190e-05  1.8772e-03  4.2327e-01         0.6721\n[505,] -1.7001e-01 -1.1800e-03  1.5106e-01 -4.3438e-01         0.6640\n[506,] -1.9594e-01 -1.0576e-04  1.3553e-02 -1.6822e+00         0.0925\n[507,]  1.2594e+00 -1.6293e-03  2.5049e-01  2.5196e+00         0.0117\n[508,]  4.1783e-01 -1.0505e-03  5.7037e-02  1.7539e+00         0.0794\n[509,]  1.2594e+00 -1.6293e-03  2.5049e-01  2.5196e+00         0.0117\n[510,]  6.8463e-02 -2.5329e-04  6.5164e-02  2.6919e-01         0.7878\n[511,]  8.7444e-01 -7.0697e-04  6.0126e-02  3.5690e+00         0.0004\n[512,]  1.1183e+00 -1.5519e-03  2.9865e-01  2.0492e+00         0.0404\n[513,]  1.1602e+00 -1.5519e-03  3.9872e-01  1.8398e+00         0.0658\n[514,]  2.3946e-01 -3.9948e-04  3.8284e-02  1.2259e+00         0.2202\n[515,]  1.0208e+00 -1.1932e-03  1.8352e-01  2.3855e+00         0.0171\n[516,] -1.1985e-03 -1.5201e-07  2.9300e-05 -2.2138e-01         0.8248\n[517,]  7.4592e-01 -1.3171e-03  2.5354e-01  1.4840e+00         0.1378\n[518,]  9.0415e-02 -9.4008e-04  1.2037e-01  2.6331e-01         0.7923\n[519,] -5.6369e-02 -3.8587e-05  4.9453e-03 -8.0103e-01         0.4231\n[520,]  2.0250e-01 -5.6064e-04  5.3720e-02  8.7609e-01         0.3810\n[521,]  3.0818e-01 -8.1393e-04  1.5676e-01  7.8045e-01         0.4351\n[522,] -3.8848e-02 -5.4315e-06  5.2073e-04 -1.7022e+00         0.0887\n[523,]  1.1479e-01 -1.7410e-04  1.9098e-02  8.3188e-01         0.4055\n[524,]  2.8047e-01 -2.0065e-04  3.0893e-02  1.5969e+00         0.1103\n[525,]  1.2594e+00 -1.6293e-03  4.1858e-01  1.9491e+00         0.0513\n[526,]  1.0907e+00 -1.6293e-03  1.7846e-01  2.5858e+00         0.0097\n[527,]  5.1380e-02 -1.9529e-04  2.5024e-02  3.2603e-01         0.7444\n[528,]  3.7641e-01 -8.2484e-04  7.9014e-02  1.3420e+00         0.1796\n[529,]  1.2477e-02 -6.3560e-06  9.7880e-04  3.9902e-01         0.6899\n[530,] -9.6708e-02 -5.6970e-04  5.4588e-02 -4.1148e-01         0.6807\n[531,]  7.6546e-01 -1.1271e-03  1.7337e-01  1.8411e+00         0.0656\n[532,]  6.2647e-01 -7.7005e-04  9.8617e-02  1.9974e+00         0.0458\n[533,]  9.3186e-02 -1.5519e-03  1.3187e-01  2.6088e-01         0.7942\n[534,]  1.5238e-01 -2.9508e-05  4.5440e-03  2.2609e+00         0.0238\n[535,]  5.7705e-01 -5.2432e-04  6.7164e-02  2.2286e+00         0.0258\n[536,]  8.8766e-01 -9.4008e-04  2.4168e-01  1.8075e+00         0.0707\n[537,]  9.2147e-01 -1.4764e-03  1.4133e-01  2.4550e+00         0.0141\n[538,]  1.1493e-03 -1.0187e-04  1.9634e-02  8.9291e-03         0.9929\n[539,]  4.6525e-02 -2.2908e-04  4.4145e-02  2.2253e-01         0.8239\n[540,] -2.1238e-02 -6.6464e-05  6.3716e-03 -2.6524e-01         0.7908\n[541,]  6.7302e-01 -9.4008e-04  1.2037e-01  1.9425e+00         0.0521\n[542,]  6.2362e-01 -1.6293e-03  3.1352e-01  1.1167e+00         0.2641\n[543,]  4.9767e-01 -5.6970e-04  8.7683e-02  1.6826e+00         0.0925\n[544,]  3.2374e-01 -6.6611e-04  6.3819e-02  1.2841e+00         0.1991\n[545,]  9.2565e-01 -6.0753e-04  1.5624e-01  2.3433e+00         0.0191\n[546,]  1.7015e-02 -3.8587e-05  7.4373e-03  1.9774e-01         0.8432\n[547,]  1.6959e-01 -4.7250e-04  9.1031e-02  5.6367e-01         0.5730\n[548,] -2.4230e-01 -4.9356e-03  4.1799e-01 -3.6714e-01         0.7135\n[549,] -6.4975e-02 -5.4315e-06  5.9589e-04 -2.6615e+00         0.0078\n[550,]  8.8664e-01 -1.7736e-03  1.5068e-01  2.2887e+00         0.0221\n[551,]  1.1689e-02 -2.7474e-05  3.0141e-03  2.1342e-01         0.8310\n[552,]  1.9810e-01 -2.5939e-04  3.9936e-02  9.9257e-01         0.3209\n[553,]  1.4993e+00 -5.2120e-03  5.6884e-01  1.9948e+00         0.0461\n[554,]  1.3568e+00 -2.2979e-03  2.9383e-01  2.5072e+00         0.0122\n[555,]  3.6902e-02 -1.9907e-05  2.1840e-03  7.9006e-01         0.4295\n[556,]  3.8786e-01 -7.8659e-03  8.5620e-01  4.2766e-01         0.6689\n[557,]  2.5436e+00 -5.2120e-03  5.6884e-01  3.3795e+00         0.0007\n[558,]  8.5325e-03 -3.6164e-04  3.4658e-02  4.7775e-02         0.9619\n[559,]  1.0478e-01 -2.3918e-03  1.6572e-01  2.6326e-01         0.7923\n[560,]  6.5810e+00 -3.9051e-03  3.0108e+00  3.7950e+00         0.0001\n[561,]  2.7434e-02 -3.2567e-04  3.5719e-02  1.4688e-01         0.8832\n[562,]  3.2644e-01 -8.2484e-04  7.0143e-02  1.2357e+00         0.2166\n[563,]  1.1044e-01 -4.0991e-05  6.3123e-03  1.3906e+00         0.1643\n[564,]  5.3205e-01 -8.2484e-04  6.3046e-02  2.1222e+00         0.0338\n[565,]  4.2431e-01 -4.8082e-04  7.4010e-02  1.5614e+00         0.1184\n[566,] -2.0851e-01 -1.7410e-04  4.4794e-02 -9.8438e-01         0.3249\n[567,]  2.1090e-01 -2.8512e-04  5.4941e-02  9.0098e-01         0.3676\n[568,]  7.0111e-01 -1.1143e-03  1.7141e-01  1.6961e+00         0.0899\n[569,]  2.0010e+00 -2.1156e-03  3.2511e-01  3.5132e+00         0.0004\n[570,]  7.2264e-03 -2.5939e-04  1.0023e-01  2.3645e-02         0.9811\n[571,]  1.2352e+00 -1.6293e-03  2.5049e-01  2.4712e+00         0.0135\n[572,] -1.4672e-01 -1.4944e-04  2.3009e-02 -9.6628e-01         0.3339\n[573,] -2.9764e-01 -3.1883e-04  3.0557e-02 -1.7008e+00         0.0890\n[574,]  2.3599e-01 -4.8082e-04  9.2633e-02  7.7694e-01         0.4372\n[575,] -1.6930e-01 -8.3227e-05  9.1302e-03 -1.7709e+00         0.0766\n[576,] -8.4131e-02 -8.1393e-04  1.0423e-01 -2.5807e-01         0.7964\n[577,]  5.2436e-01 -1.6139e-03  3.1058e-01  9.4381e-01         0.3453\n[578,]  2.9064e-02 -1.2190e-05  2.3496e-03  5.9985e-01         0.5486\n[579,]  6.6549e-01 -7.7005e-04  7.3770e-02  2.4531e+00         0.0142\n[580,] -2.8049e-01 -8.6740e-05  1.6717e-02 -2.1687e+00         0.0301\n[581,] -1.6739e-01 -1.2665e-04  1.3894e-02 -1.4191e+00         0.1559\n[582,]  3.9566e+00 -6.3931e-03  6.9692e-01  4.7472e+00         0.0000\n[583,] -4.3309e-02 -1.4481e-04  2.2298e-02 -2.8907e-01         0.7725\n[584,] -5.7094e-02 -5.1584e-05  7.9434e-03 -6.4002e-01         0.5222\n[585,]  3.6469e-01 -2.9159e-04  2.7948e-02  2.1832e+00         0.0290\n[586,]  1.6100e-01 -1.2240e-04  1.8847e-02  1.1737e+00         0.2405\n[587,]  3.1825e-02 -3.8587e-05  4.2333e-03  4.8972e-01         0.6243\n[588,]  4.9920e-01 -1.2611e-03  1.3819e-01  1.3463e+00         0.1782\n[589,]  5.9894e-02 -1.0576e-04  1.3553e-02  5.1539e-01         0.6063\n[590,]  1.1405e+00 -1.5519e-03  2.3861e-01  2.3380e+00         0.0194\n[591,] -4.6503e-01 -7.1713e-04  1.3813e-01 -1.2493e+00         0.2115\n[592,]  2.9366e-01 -6.6611e-04  7.3031e-02  1.0891e+00         0.2761\n[593,]  5.9672e-01 -6.0753e-04  5.8210e-02  2.4758e+00         0.0133\n[594,] -5.1584e-02 -1.0576e-04  1.1601e-02 -4.7794e-01         0.6327\n[595,]  2.4345e-01 -5.6970e-04  5.4588e-02  1.0444e+00         0.2963\n[596,] -9.3621e-02 -8.6740e-05  1.1116e-02 -8.8715e-01         0.3750\n[597,]  3.8019e-01 -1.1271e-03  2.1699e-01  8.1858e-01         0.4130\n[598,] -1.4900e-01 -2.8512e-04  3.6532e-02 -7.7809e-01         0.4365\n[599,]  1.5399e+00 -1.9408e-03  2.9830e-01  2.8230e+00         0.0048\n[600,]  1.4049e+00 -3.9051e-03  4.2677e-01  2.1566e+00         0.0310\n[601,]  7.4790e-01 -3.1023e-03  2.9651e-01  1.3792e+00         0.1678\n[602,]  8.5346e-01 -1.5519e-03  1.6999e-01  2.0737e+00         0.0381\n[603,]  9.5869e-01 -1.4764e-03  3.7935e-01  1.5589e+00         0.1190\n[604,]  2.2809e-02 -2.9508e-05  3.7817e-03  3.7139e-01         0.7103\n[605,]  5.5532e-01 -1.2611e-03  2.4277e-01  1.1296e+00         0.2586\n[606,]  7.8207e-02 -1.2665e-04  3.2588e-02  4.3393e-01         0.6643\n[607,]  8.6952e-03 -6.3560e-06  9.7880e-04  2.7813e-01         0.7809\n[608,] -3.9006e-01 -6.0753e-04  3.8604e-02 -1.9821e+00         0.0475\n[609,] -2.2261e-02 -1.9907e-05  1.9085e-03 -5.0910e-01         0.6107\n[610,]  1.3433e+00 -3.2114e-03  2.4487e-01  2.7210e+00         0.0065\n[611,]  6.6482e-01 -7.1713e-04  9.1845e-02  2.1961e+00         0.0281\n[612,]  3.8643e-01 -6.0753e-04  1.1703e-01  1.1314e+00         0.2579\n[613,] -3.0326e-01 -1.0628e-03  1.6350e-01 -7.4737e-01         0.4548\n[614,]  7.5538e-01 -1.1271e-03  1.7337e-01  1.8169e+00         0.0692\n[615,]  5.1581e-01 -1.0005e-03  1.0966e-01  1.5607e+00         0.1186\n[616,]  2.1190e-01 -1.0005e-03  2.5721e-01  4.1980e-01         0.6746\n[617,] -2.2876e-02 -6.6464e-05  7.2914e-03 -2.6713e-01         0.7894\n[618,]  6.0008e-01 -6.6611e-04  1.0251e-01  1.8763e+00         0.0606\n[619,]  6.4430e-01 -8.8152e-04  1.1288e-01  1.9203e+00         0.0548\n[620,]  1.2899e+00 -3.6663e-03  4.0077e-01  2.0434e+00         0.0410\n[621,]  7.9905e-01 -1.2611e-03  1.9397e-01  1.8172e+00         0.0692\n[622,]  6.3452e-01 -8.2484e-04  9.0420e-02  2.1129e+00         0.0346\n[623,]  6.9023e-01 -1.6293e-03  2.5049e-01  1.3824e+00         0.1669\n[624,]  1.0274e-02 -5.2432e-04  5.0242e-02  4.8175e-02         0.9616\n[625,]  4.5941e-01 -5.1563e-04  5.6542e-02  1.9342e+00         0.0531\n[626,]  1.0076e-02 -4.0991e-05  3.9298e-03  1.6139e-01         0.8718\n[627,] -2.8172e-02 -6.9607e-05  5.3244e-03 -3.8513e-01         0.7001\n[628,] -1.4136e-01 -8.6740e-05  1.1116e-02 -1.3399e+00         0.1803\n[629,] -5.5181e-03 -1.4944e-04  2.3009e-02 -3.5392e-02         0.9718\n[630,] -4.4340e-03 -5.4358e-05  8.3705e-03 -4.7870e-02         0.9618\n[631,]  4.7836e-01 -1.4764e-03  5.6977e-01  6.3569e-01         0.5250\n[632,]  2.2734e-01 -1.2665e-04  1.6231e-02  1.7854e+00         0.0742\n[633,]  2.1376e-01 -4.3921e-04  5.6267e-02  9.0299e-01         0.3665\n[634,]  5.7547e-01 -2.3918e-03  2.6179e-01  1.1294e+00         0.2587\n[635,]  1.6002e-01 -9.2843e-04  1.4284e-01  4.2586e-01         0.6702\n[636,]  3.1668e-01 -1.7410e-04  2.6807e-02  1.9353e+00         0.0530\n[637,]  3.4507e-01 -1.4764e-03  1.4133e-01  9.2180e-01         0.3566\n[638,] -8.2184e-02 -2.0065e-04  1.7074e-02 -6.2743e-01         0.5304\n[639,]  1.6921e-01 -6.6611e-04  7.3031e-02  6.2862e-01         0.5296\n[640,]  8.2305e+00 -1.8560e-02  1.9985e+00  5.8352e+00         0.0000\n[641,] -2.0132e-03 -3.3691e-07  2.8674e-05 -3.7589e-01         0.7070\n[642,]  2.0085e+00 -3.4351e-03  3.7558e-01  3.2829e+00         0.0010\n[643,]  5.2666e-01 -1.0005e-03  1.5392e-01  1.3449e+00         0.1786\n[644,]  1.1209e+00 -4.8002e-03  6.1226e-01  1.4386e+00         0.1503\n[645,]  6.2126e-01 -7.7005e-04  1.4831e-01  1.6152e+00         0.1063\n[646,]  7.9276e-01 -1.1932e-03  3.0667e-01  1.4337e+00         0.1517\n[647,]  2.0474e+00 -4.2774e-03  5.4587e-01  2.7769e+00         0.0055\n[648,]  4.4973e-01 -1.2611e-03  1.3819e-01  1.2132e+00         0.2251\n[649,] -8.5340e-03 -3.3691e-07  5.1884e-05 -1.1847e+00         0.2361\n[650,]  2.9755e-02 -3.2567e-04  5.0137e-02  1.3434e-01         0.8931\n[651,]  3.6839e-01 -4.8082e-04  7.4010e-02  1.3559e+00         0.1751\n[652,]  1.7102e-01 -1.1143e-03  1.2212e-01  4.9258e-01         0.6223\n[653,] -6.7608e-02 -1.9907e-05  3.0656e-03 -1.2207e+00         0.2222\n[654,]  6.5285e-01 -1.1932e-03  1.8352e-01  1.5267e+00         0.1268\n[655,]  3.8131e-02 -1.2611e-03  1.6143e-01  9.8044e-02         0.9219\n[656,]  1.5120e+00 -3.3223e-03  3.6329e-01  2.5141e+00         0.0119\n[657,] -1.0757e-01 -8.1393e-04  8.9225e-02 -3.5739e-01         0.7208\n[658,]  1.4630e-02 -1.0505e-03  1.6160e-01  3.9007e-02         0.9689\n[659,]  9.0320e+00 -1.7262e-02  3.2698e+00  5.0044e+00         0.0000\n[660,] -1.2174e-01 -5.1584e-05  1.3274e-02 -1.0562e+00         0.2909\n[661,] -3.6955e-01 -8.6740e-05  1.6717e-02 -2.8575e+00         0.0043\n[662,] -1.5241e-02 -3.6164e-04  4.6332e-02 -6.9124e-02         0.9449\n[663,] -4.2611e-02 -5.4315e-06  4.6226e-04 -1.9816e+00         0.0475\n[664,]  3.1215e-01 -7.0697e-04  1.3617e-01  8.4782e-01         0.3965\n[665,] -1.6306e-03 -2.4049e-06  3.7035e-04 -8.4604e-02         0.9326\n[666,]  2.3713e-02 -5.1584e-05  1.3274e-02  2.0627e-01         0.8366\n[667,]  1.3673e-02 -1.8502e-06  2.3713e-04  8.8805e-01         0.3745\n[668,]  8.5822e-01 -1.1143e-03  1.0671e-01  2.6306e+00         0.0085\n[669,]  5.4845e-01 -9.4008e-04  1.8103e-01  1.2912e+00         0.1966\n[670,] -3.1573e-01 -1.7410e-04  6.7278e-02 -1.2166e+00         0.2238\n[671,] -1.1282e-01 -3.9190e-04  5.0208e-02 -5.0176e-01         0.6158\n[672,] -9.6708e-02 -5.6970e-04  8.7683e-02 -3.2467e-01         0.7454\n[673,]  8.0604e-02 -9.2843e-04  8.8928e-02  2.7341e-01         0.7845\n[674,]  1.3921e-01 -1.6293e-03  1.5595e-01  3.5665e-01         0.7214\n[675,]  2.3009e-01 -3.2567e-04  5.0137e-02  1.0290e+00         0.3035\n[676,]  9.9367e-01 -1.3310e-03  1.4583e-01  2.6055e+00         0.0092\n[677,]  1.4624e+00 -4.1514e-03  4.5357e-01  2.1775e+00         0.0294\n[678,]  2.6975e-02 -6.3560e-06  1.6356e-03  6.6715e-01         0.5047\n[679,] -5.8692e-02 -6.6464e-05  1.0235e-02 -5.7950e-01         0.5623\n[680,] -8.5965e-02 -2.5939e-04  2.8451e-02 -5.0811e-01         0.6114\n[681,]  1.9472e+00 -4.6667e-03  7.1530e-01  2.3078e+00         0.0210\n[682,]  1.0908e+00 -1.4764e-03  2.8414e-01  2.0491e+00         0.0405\n[683,] -6.5854e-02 -6.6611e-04  1.2831e-01 -1.8199e-01         0.8556\n[684,]  3.6875e+00 -1.2757e-02  1.2075e+00  3.3674e+00         0.0008\n[685,]  2.9773e-01 -1.4027e-03  3.6046e-01  4.9823e-01         0.6183\n[686,]  3.0049e-01 -1.1932e-03  2.2970e-01  6.2947e-01         0.5290\n[687,]  9.3597e-01 -1.1271e-03  1.2351e-01  2.6664e+00         0.0077\n[688,]  2.5651e-01 -2.9159e-04  3.1982e-02  1.4360e+00         0.1510\n[689,]  8.8967e-01 -5.1563e-04  6.6051e-02  3.4637e+00         0.0005\n[690,]  6.1355e-02 -8.2484e-04  1.5886e-01  1.5601e-01         0.8760\n[691,]  1.7444e-01 -8.1393e-04  1.5676e-01  4.4265e-01         0.6580\n[692,]  1.4862e-01 -2.7474e-05  4.2308e-03  2.2853e+00         0.0223\n[693,]  1.0044e+00 -1.1932e-03  1.5274e-01  2.5729e+00         0.0101\n[694,]  1.3387e+00 -2.3918e-03  1.6572e-01  3.2943e+00         0.0010\n[695,] -4.2553e-01 -1.0628e-03  1.6350e-01 -1.0497e+00         0.2938\n[696,] -2.0541e-01 -3.9948e-04  3.0547e-02 -1.1730e+00         0.2408\n[697,]  1.0721e+00 -1.4764e-03  2.2702e-01  2.2531e+00         0.0243\n[698,] -1.3985e-01 -2.6850e-03  3.4320e-01 -2.3413e-01         0.8149\n[699,]  7.5713e-01 -1.4617e-03  2.8134e-01  1.4302e+00         0.1527\n[700,] -3.1607e-01 -7.0697e-04  1.3617e-01 -8.5460e-01         0.3928\n[701,]  2.4910e-02 -5.1584e-05  4.3900e-03  3.7674e-01         0.7064\n[702,] -3.4402e-03 -3.3691e-07  4.3180e-05 -5.2348e-01         0.6006\n[703,]  3.4223e-01 -1.2611e-03  2.4277e-01  6.9714e-01         0.4857\n[704,]  1.9777e-01 -8.3227e-05  1.6040e-02  1.5622e+00         0.1182\n[705,]  8.8429e-01 -1.2611e-03  1.9397e-01  2.0107e+00         0.0444\n[706,] -2.1456e-01 -9.8850e-04  1.2657e-01 -6.0032e-01         0.5483\n[707,]  7.3273e-01 -1.5519e-03  2.3861e-01  1.5032e+00         0.1328\n[708,]  6.3322e-02 -1.7410e-04  1.3316e-02  5.5025e-01         0.5821\n[709,]  6.2157e-02 -1.8243e-05  2.3381e-03  1.2858e+00         0.1985\n[710,] -2.7780e-01 -1.5519e-03  3.9872e-01 -4.3749e-01         0.6618\n[711,] -1.2622e-02 -1.0896e-05  2.1001e-03 -2.7520e-01         0.7832\n[712,] -3.6425e-03 -1.5201e-07  1.6678e-05 -8.9189e-01         0.3725\n[713,] -2.3604e-01 -1.0505e-03  8.9309e-02 -7.8631e-01         0.4317\n[714,] -3.3327e-01 -6.0753e-04  6.6613e-02 -1.2889e+00         0.1974\n[715,]  6.7364e-01 -1.5519e-03  2.3861e-01  1.3822e+00         0.1669\n[716,]  7.3690e-01 -9.4008e-04  7.9934e-02  2.6097e+00         0.0091\n[717,]  7.6205e-01 -1.3310e-03  2.5620e-01  1.5082e+00         0.1315\n[718,] -4.2691e-03 -1.5201e-07  3.9118e-05 -6.8255e-01         0.4949\n[719,]  3.2286e-01 -5.2432e-04  4.0088e-02  1.6151e+00         0.1063\n[720,]  6.8921e-01 -7.1713e-04  7.8622e-02  2.4605e+00         0.0139\n[721,]  7.1177e-02 -1.0187e-04  1.3055e-02  6.2384e-01         0.5327\n[722,]  5.3755e-02 -1.7410e-04  2.2310e-02  3.6106e-01         0.7181\n[723,]  4.7548e-02 -5.4358e-05  8.3705e-03  5.2030e-01         0.6029\n[724,]  7.2910e-01 -9.2843e-04  1.7879e-01  1.7265e+00         0.0843\n[725,]  1.0566e-01 -3.9190e-04  4.2979e-02  5.1157e-01         0.6090\n[726,] -2.9182e-01 -5.6064e-04  7.1814e-02 -1.0869e+00         0.2771\n[727,]  1.1455e-02 -2.4049e-06  4.6354e-04  5.3217e-01         0.5946\n[728,]  5.7730e-01 -7.1713e-04  7.8622e-02  2.0614e+00         0.0393\n[729,]  2.7925e-01 -5.6970e-04  6.2467e-02  1.1196e+00         0.2629\n[730,]  6.0944e-03 -3.3691e-07  5.1884e-05  8.4613e-01         0.3975\n[731,]  3.0616e-01 -7.7005e-04  6.5487e-02  1.1994e+00         0.2304\n[732,]  6.8010e-01 -1.4764e-03  1.6173e-01  1.6948e+00         0.0901\n[733,] -1.1711e-02 -2.4049e-06  3.0822e-04 -6.6695e-01         0.5048\n[734,]  4.6506e-03 -2.4049e-06  3.7035e-04  2.4179e-01         0.8089\n[735,]  9.8117e-01 -2.9952e-03  3.8273e-01  1.5908e+00         0.1116\n[736,]  1.0704e+00 -1.2476e-03  3.2065e-01  1.8925e+00         0.0584\n[737,]  6.8464e-01 -1.0628e-03  1.6350e-01  1.6958e+00         0.0899\n[738,] -7.4231e-03 -1.0896e-05  8.3349e-04 -2.5674e-01         0.7974\n[739,]  7.8961e-01 -1.5519e-03  1.4855e-01  2.0527e+00         0.0401\n[740,]  3.7009e-01 -1.4481e-04  2.2298e-02  2.4794e+00         0.0132\n[741,]  2.0771e-02 -1.2190e-05  1.0375e-03  6.4525e-01         0.5188\n[742,]  2.7141e-02 -1.8502e-06  2.8493e-04  1.6080e+00         0.1078\n[743,]  9.6339e-04 -1.2240e-04  1.3427e-02  9.3703e-03         0.9925\n[744,]  1.3253e-01 -4.0991e-05  7.9006e-03  1.4915e+00         0.1358\n[745,]  1.9008e-01 -3.2567e-04  2.7709e-02  1.1439e+00         0.2527\n[746,]  3.4281e-01 -2.0065e-04  2.5711e-02  2.1392e+00         0.0324\n[747,]  7.0985e-01 -1.1932e-03  1.8352e-01  1.6598e+00         0.0970\n[748,] -7.6589e-02 -5.6064e-04  6.1474e-02 -3.0664e-01         0.7591\n[749,]  1.1864e-01 -6.6464e-05  1.0235e-02  1.1734e+00         0.2406\n[750,] -5.5416e-03 -1.2190e-05  1.3374e-03 -1.5120e-01         0.8798\n[751,]  8.4893e-01 -2.5854e-03  2.8292e-01  1.6009e+00         0.1094\n[752,]  1.2264e-01 -3.6164e-04  6.9679e-02  4.6598e-01         0.6412\n[753,]  5.7610e-02 -6.0753e-04  6.6613e-02  2.2556e-01         0.8215\n[754,] -6.1116e-02 -8.3227e-05  1.0666e-02 -5.9097e-01         0.5545\n[755,]  5.3814e-03 -1.5201e-07  1.6678e-05  1.3178e+00         0.1876\n[756,]  2.2058e+00 -1.2476e-03  1.3671e-01  5.9692e+00         0.0000\n[757,]  1.4634e+00 -6.3931e-03  9.7823e-01  1.4861e+00         0.1373\n[758,]  1.4283e+00 -4.5350e-03  4.3281e-01  2.1779e+00         0.0294\n[759,]  1.7973e+00 -6.7072e-03  7.3093e-01  2.1101e+00         0.0348\n[760,] -1.3735e-01 -4.0991e-05  6.3123e-03 -1.7283e+00         0.0839\n[761,] -3.4284e-01 -7.1713e-04  1.8441e-01 -7.9670e-01         0.4256\n[762,]  4.8264e-01 -6.6611e-04  8.5314e-02  1.6547e+00         0.0980\n[763,]  1.0422e+00 -1.4027e-03  5.4139e-01  1.4183e+00         0.1561\n[764,]  9.9208e-01 -1.1271e-03  1.7337e-01  2.3854e+00         0.0171\n[765,]  8.0304e-02 -3.8587e-05  4.9453e-03  1.1425e+00         0.2533\n[766,]  1.0853e+00 -1.6293e-03  3.1352e-01  1.9412e+00         0.0522\n[767,]  6.9250e-01 -1.2611e-03  1.9397e-01  1.5752e+00         0.1152\n[768,]  7.3132e-02 -8.3227e-05  9.1302e-03  7.6623e-01         0.4435\n[769,] -5.1949e-01 -3.9948e-04  7.6969e-02 -1.8710e+00         0.0613\n[770,] -5.5759e-01 -4.8082e-04  6.1595e-02 -2.2448e+00         0.0248\n[771,]  1.0423e+01 -1.1269e-02  2.1476e+00  7.1200e+00         0.0000\n[772,] -2.6247e-01 -4.7250e-04  1.8254e-01 -6.1323e-01         0.5397\n[773,] -2.3989e-02 -5.4315e-06  5.2073e-04 -1.0510e+00         0.2933\n[774,] -1.4505e-01 -2.0065e-04  3.8667e-02 -7.3661e-01         0.4614\n\n\n\n\nMapping the local Moran’s I values and p-values\ncbind() of mice package is used to append the local Moran’s I data frame localMI onto Nigeria SpatialPolygonDataFrame nga_wp. The output data frame is called nga.localMI.\ntm_shape() is used to define a spatial data object.\ntm_fill() is used to fill the polygons, a classification method is selected by style option.\ntm_layout() is used to customize the map layout, including title and legend.\ntm_borders() is used to define the borders of the polygons, alpha defines the transparency of line.\ntmap_arrange() is used to create multiple stand-alone maps.\n\nnga.localMI <- cbind(nga_wp,localMI) %>%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n\nlocalMI.map <- tm_shape(nga.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\") +\n  tm_layout(main.title = \"local Moran's I statistics\",\n            main.title.position = \"center\",\n            main.title.size = 1.5,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\npvalue.map <- tm_shape(nga.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\") +\n  tm_layout(main.title = \"local Moran's I p-values\",\n            main.title.position = \"center\",\n            main.title.size = 1.5,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#visualizing-the-hot-spot-area-of-water-points",
    "href": "Take-home_Ex1/Take-home_Ex1.html#visualizing-the-hot-spot-area-of-water-points",
    "title": "Take-home Exercise 1: Geospatial Analytics for Social Good",
    "section": "Visualizing the Hot Spot Area of Water Points",
    "text": "Visualizing the Hot Spot Area of Water Points\nThe hot spot refers to a region that is higher relative to its surroundings. In this analysis, Getis and Ord’s G-statistics is used to detect spatial anomalies, statistically significant hot-spots are recognised as areas of high values where other areas within a neighbourhood range also share high values too.\n\nDeriving the centroid\nmap_dbl() of purrr package is used to return double vectors, which have numbers that can have decimals. The mapping function applies a given function to each element of a vector and returns a vector of the same length.\nst_centroid() of sf package is used to take polygons and return the point that is in the center of the geometry’s envelope. The centroid point is halfway between the geometry’s minimum and maximum x and y extents. To access longitude and latitude value, double bracket notation [[]] with 1 and 2 get the first and second value in geometry column of nga_wp.\ncbind() of mice package is used to append longitude and latitude together.\n\nlongitude <- map_dbl(nga_wp$geometry, ~st_centroid(.x)[[1]])\nlatitude <- map_dbl(nga_wp$geometry, ~st_centroid(.x)[[2]])\ncoords <- cbind(longitude, latitude)\n\n\n\nDetermining the cut-off distance\nSteps to determine upper limit for distance band:\n\nReturn a matrix with the indices of points using knearneigh().\nConvert the knn object into a neighbors list of class nb with a list of integer vectors using knn2nb().\nReturn the length of neighbor relationship edges using nbdists().\nRemove the list structure using unlist().\n\n\nk1 <- knn2nb(knearneigh(coords))\nk1dists <- unlist(nbdists(k1, coords, longlat = FALSE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   2669   12834   20304   22084   27783   72139 \n\n\nThe output shows the largest first nearest neighbor distance is 72139, so this is the upper threshold.\n\n\nComputing fixed distance weight matrix\ndnearneigh() of spdep package is used to compute the distance weight matrix. For fixed distance weight matrix, more densely settled areas (usually the urban areas) tend to have more neighbors and the less densely settled areas (usually the rural areas) tend to have less neighbors.\nnb2listw() of spdep package is used to assign spatial weights to each polygon in neighbors list.\nThe output spatial weights object is called wm72139_lw. There are 5 regions with only 1 neighbor, and the region with most neighbors has 70 neighbors.\n\nwm_d72139 <- dnearneigh(coords, 0, 72139, longlat = FALSE)\nwm72139_lw <- nb2listw(wm_d72139, style = 'B')\nsummary(wm72139_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 774 \nNumber of nonzero links: 18130 \nPercentage nonzero weights: 3.026327 \nAverage number of links: 23.42377 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 \n 5  9 11 22 32 35 33 34 29 35 27 18 21 23 16 12 12 11 16 17 16 10 14 10  5 13 \n27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 \n12  5 15 13 12  7 10  8 12  5 12 17 14  9 10  4  5  3  7  6 11  8  5  5  4  2 \n53 54 55 56 57 58 59 60 61 62 63 64 65 67 68 70 \n 3  3  6  3  5  6  2  5  5  8  6  6  4  3  1  1 \n5 least connected regions:\n90 112 123 237 670 with 1 link\n1 most connected region:\n585 with 70 links\n\nWeights style: B \nWeights constants summary:\n    n     nn    S0    S1      S2\nB 774 599076 18130 36260 2622544\n\n\n\n\nComputing adaptive distance weight matrix\nFor adaptive distance weight matrix, k-nearest neighbors is used to control the number of neighbors.\nknearneigh() of spdep package is used to return a matrix with the indices of points belonging to the set of the k nearest neighbors of each other.\nnb2listw() of spdep package is used to assign spatial weights to each polygon in neighbors list.\n\nknn <- knn2nb(knearneigh(coords, k=71))\nknn\n\nNeighbour list object:\nNumber of regions: 774 \nNumber of nonzero links: 54954 \nPercentage nonzero weights: 9.173127 \nAverage number of links: 71 \nNon-symmetric neighbours list\n\n\n\nknn_lw <- nb2listw(knn, style = 'B')\nsummary(knn_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 774 \nNumber of nonzero links: 54954 \nPercentage nonzero weights: 9.173127 \nAverage number of links: 71 \nNon-symmetric neighbours list\nLink number distribution:\n\n 71 \n774 \n774 least connected regions:\nwith 71 links\n774 most connected regions:\nwith 71 links\n\nWeights style: B \nWeights constants summary:\n    n     nn    S0    S1       S2\nB 774 599076 54954 97658 16004374\n\n\n\n\nComputing Gi statistics with fixed distance weights\nlocalG() is used to return vector of G or Gstar values.\nThe Gi statistics called gi.fixed is represented as a Z-score. Greater values represent a greater intensity of clustering and the direction (positive or negative) indicates high or low clusters.\nas.matrix() is used to convert output vector into r matrix object.\ncbind() is used to join nga_wp data and gi.fixed matrix to produce a spatial polygon data frame called nga.gi.\nrename() is used to change the field name of Gi values to gstat_fixed.\n\nfips <- order(nga_wp$shapeName)\ngi.fixed <- localG(nga_wp$`wp non-functional`, wm72139_lw)\nnga.gi <- cbind(nga_wp, as.matrix(gi.fixed)) %>%\n  rename(gstat_fixed = as.matrix.gi.fixed.)\n\n\n\nMapping Gi values with fixed distance weights\nThe code chunk below shows the functions used to map the Gi values derived using fixed distance weight matrix.\n\nwp_nonfunctional <- qtm(nga_wp, \"wp non-functional\")\n\nGimap <-tm_shape(nga.gi) +\n  tm_fill(col = \"gstat_fixed\", \n          style = \"pretty\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(wp_nonfunctional, Gimap, asp=1, ncol=2)\n\n\n\n\n\n\nComputing Gi statistics with adaptive distance weights\n\nfips <- order(nga_wp$shapeName)\ngi.adaptive <- localG(nga_wp$`wp non-functional`, knn_lw)\nnga.gi <- cbind(nga_wp, as.matrix(gi.adaptive)) %>%\n  rename(gstat_adaptive = as.matrix.gi.adaptive.)\n\n\n\nMapping Gi values with adaptive distance weights\nThe code chunk below shows the functions used to map the Gi values derived using adaptive distance weight matrix.\n\nwp_nonfunctional <- qtm(nga_wp, \"wp non-functional\")\n\nGimap <-tm_shape(nga.gi) +\n  tm_fill(col = \"gstat_adaptive\", \n          style = \"pretty\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(wp_nonfunctional, Gimap, asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex3/Hands-on_Ex3.html",
    "href": "Hands-on_Ex3/Hands-on_Ex3.html",
    "title": "Hands-on Exercise 3: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "",
    "text": "In this hands-on exercise, I learn how to delineate homogeneous region by using geographically referenced multivariate data. The analysis include hierarchical cluster analysis and spatially constrained cluster analysis."
  },
  {
    "objectID": "Hands-on_Ex3/Hands-on_Ex3.html#getting-started",
    "href": "Hands-on_Ex3/Hands-on_Ex3.html#getting-started",
    "title": "Hands-on Exercise 3: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "Getting Started",
    "text": "Getting Started\nIn this exercise, the following R packages will be used:\n\nsf for importing, managing, and processing geospatial data\nspdep for computing spatial weights, global and local spatial autocorrelation statistics\nrgdal for providing bindings to the ‘Geospatial’ Data Abstraction Library (GDAL) and access to projection operation from the ‘PROJ’ library.\ntidyverse for importing, wrangling, and visualizing data\n\ntidyr for manipulating data\ndplyr for transforming data\nggplot2 for visualizing data\n\ntmap for plotting cartographic quality choropleth map\ncorrplot for providing a visual exploratory tool on correlation matrix that supports automatic variable reordering to help detect hidden patterns among variables\nggpubr for providing some easy-to-use functions for creating and customizing ggplot2\nheatmaply for visualizing high-dimensional data, in which a table of numbers are encoded as a grid of colored cells\ncluster and ClustGeo for cluster analysis\n\nThe code chunk below installs and launch the R packages into R environment.\n\npacman::p_load(rgdal, spdep, tmap, sf, \n               ggpubr, cluster, factoextra, NbClust,\n               heatmaply, corrplot, psych, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex3/Hands-on_Ex3.html#importing-data-into-r-environment",
    "href": "Hands-on_Ex3/Hands-on_Ex3.html#importing-data-into-r-environment",
    "title": "Hands-on Exercise 3: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "Importing Data into R environment",
    "text": "Importing Data into R environment\n\nImporting geospatial data into R environment\nThe code chunk below uses st_read() of sf package to import Myanmar Township Boundary GIS data shapefile myanmar_township_boundaries into R and save as simple feature data frame called shan_sf.\nfilter() of dplyr package is used to extract records according to location.\n\nshan_sf <- st_read(dsn = \"data/geospatial\", \n                   layer = \"myanmar_township_boundaries\") %>%\n  filter(ST %in% c(\"Shan (East)\", \"Shan (North)\", \"Shan (South)\"))\n\nReading layer `myanmar_township_boundaries' from data source \n  `D:\\GuanboShao\\ISSS624\\Hands-on_Ex3\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 330 features and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.17275 ymin: 9.671252 xmax: 101.1699 ymax: 28.54554\nGeodetic CRS:  WGS 84\n\n\nThe code chunk below views the content of shan_sf simple features data frame.\n\nshan_sf\n\nSimple feature collection with 55 features and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 96.15107 ymin: 19.29932 xmax: 101.1699 ymax: 24.15907\nGeodetic CRS:  WGS 84\nFirst 10 features:\n   OBJECTID           ST ST_PCODE       DT   DT_PCODE        TS  TS_PCODE\n1       163 Shan (North)   MMR015  Mongmit MMR015D008   Mongmit MMR015017\n2       203 Shan (South)   MMR014 Taunggyi MMR014D001   Pindaya MMR014006\n3       240 Shan (South)   MMR014 Taunggyi MMR014D001   Ywangan MMR014007\n4       106 Shan (South)   MMR014 Taunggyi MMR014D001  Pinlaung MMR014009\n5        72 Shan (North)   MMR015  Mongmit MMR015D008    Mabein MMR015018\n6        40 Shan (South)   MMR014 Taunggyi MMR014D001     Kalaw MMR014005\n7       194 Shan (South)   MMR014 Taunggyi MMR014D001     Pekon MMR014010\n8       159 Shan (South)   MMR014 Taunggyi MMR014D001  Lawksawk MMR014008\n9        61 Shan (North)   MMR015  Kyaukme MMR015D003 Nawnghkio MMR015013\n10      124 Shan (North)   MMR015  Kyaukme MMR015D003   Kyaukme MMR015012\n                 ST_2            LABEL2 SELF_ADMIN ST_RG T_NAME_WIN T_NAME_M3\n1  Shan State (North)    Mongmit\\n61072       <NA> State   rdk;rdwf      မိုးမိတ်\n2  Shan State (South)    Pindaya\\n77769       Danu State     yif;w,     ပင်းတယ\n3  Shan State (South)    Ywangan\\n76933       Danu State      &GmiH       ရွာငံ\n4  Shan State (South)  Pinlaung\\n162537       Pa-O State  yifavmif;   ပင်လောင်း\n5  Shan State (North)     Mabein\\n35718       <NA> State     rbdrf;      မဘိမ်း\n6  Shan State (South)     Kalaw\\n163138       <NA> State       uavm      ကလော\n7  Shan State (South)      Pekon\\n94226       <NA> State     z,fcHk       ဖယ်ခုံ\n8  Shan State (South)          Lawksawk       <NA> State   &yfapmuf    ရပ်စောက်\n9  Shan State (North) Nawnghkio\\n128357       <NA> State  aemifcsdK    နောင်ချို\n10 Shan State (North)   Kyaukme\\n172874       <NA> State   ausmufrJ    ကျောက်မဲ\n       AREA                       geometry\n1  2703.611 MULTIPOLYGON (((96.96001 23...\n2   629.025 MULTIPOLYGON (((96.7731 21....\n3  2984.377 MULTIPOLYGON (((96.78483 21...\n4  3396.963 MULTIPOLYGON (((96.49518 20...\n5  5034.413 MULTIPOLYGON (((96.66306 24...\n6  1456.624 MULTIPOLYGON (((96.49518 20...\n7  2073.513 MULTIPOLYGON (((97.14738 19...\n8  5145.659 MULTIPOLYGON (((96.94981 22...\n9  3271.537 MULTIPOLYGON (((96.75648 22...\n10 3920.869 MULTIPOLYGON (((96.95498 22...\n\n\nThe code chunk below uses glimpse() to reveal the data type of fields.\n\nglimpse(shan_sf)\n\nRows: 55\nColumns: 15\n$ OBJECTID   <dbl> 163, 203, 240, 106, 72, 40, 194, 159, 61, 124, 71, 155, 101…\n$ ST         <chr> \"Shan (North)\", \"Shan (South)\", \"Shan (South)\", \"Shan (Sout…\n$ ST_PCODE   <chr> \"MMR015\", \"MMR014\", \"MMR014\", \"MMR014\", \"MMR015\", \"MMR014\",…\n$ DT         <chr> \"Mongmit\", \"Taunggyi\", \"Taunggyi\", \"Taunggyi\", \"Mongmit\", \"…\n$ DT_PCODE   <chr> \"MMR015D008\", \"MMR014D001\", \"MMR014D001\", \"MMR014D001\", \"MM…\n$ TS         <chr> \"Mongmit\", \"Pindaya\", \"Ywangan\", \"Pinlaung\", \"Mabein\", \"Kal…\n$ TS_PCODE   <chr> \"MMR015017\", \"MMR014006\", \"MMR014007\", \"MMR014009\", \"MMR015…\n$ ST_2       <chr> \"Shan State (North)\", \"Shan State (South)\", \"Shan State (So…\n$ LABEL2     <chr> \"Mongmit\\n61072\", \"Pindaya\\n77769\", \"Ywangan\\n76933\", \"Pinl…\n$ SELF_ADMIN <chr> NA, \"Danu\", \"Danu\", \"Pa-O\", NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ST_RG      <chr> \"State\", \"State\", \"State\", \"State\", \"State\", \"State\", \"Stat…\n$ T_NAME_WIN <chr> \"rdk;rdwf\", \"yif;w,\", \"&GmiH\", \"yifavmif;\", \"rbdrf;\", \"uavm…\n$ T_NAME_M3  <chr> \"မိုးမိတ်\", \"ပင်းတယ\", \"ရွာငံ\", \"ပင်လောင်း\", \"မဘိမ်း\", \"ကလော\", \"ဖယ်ခုံ\", \"…\n$ AREA       <dbl> 2703.611, 629.025, 2984.377, 3396.963, 5034.413, 1456.624, …\n$ geometry   <MULTIPOLYGON [°]> MULTIPOLYGON (((96.96001 23..., MULTIPOLYGON (…\n\n\n\n\nImporting aspatial data into R environment\nThe code chunk below uses read_csv() of readr package to import Shan-ICT csv file and save in R’s tibble data.frame format called ict.\n\nict <- read_csv (\"data/aspatial/Shan-ICT.csv\")\n\nThe code chunk below uses summary() to reveal the summary statistics.\n\nsummary(ict)\n\n District Pcode     District Name      Township Pcode     Township Name     \n Length:55          Length:55          Length:55          Length:55         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n Total households     Radio         Television    Land line phone \n Min.   : 3318    Min.   :  115   Min.   :  728   Min.   :  20.0  \n 1st Qu.: 8711    1st Qu.: 1260   1st Qu.: 3744   1st Qu.: 266.5  \n Median :13685    Median : 2497   Median : 6117   Median : 695.0  \n Mean   :18369    Mean   : 4487   Mean   :10183   Mean   : 929.9  \n 3rd Qu.:23471    3rd Qu.: 6192   3rd Qu.:13906   3rd Qu.:1082.5  \n Max.   :82604    Max.   :30176   Max.   :62388   Max.   :6736.0  \n  Mobile phone      Computer      Internet at home\n Min.   :  150   Min.   :  20.0   Min.   :   8.0  \n 1st Qu.: 2037   1st Qu.: 121.0   1st Qu.:  88.0  \n Median : 3559   Median : 244.0   Median : 316.0  \n Mean   : 6470   Mean   : 575.5   Mean   : 760.2  \n 3rd Qu.: 7177   3rd Qu.: 507.0   3rd Qu.: 630.5  \n Max.   :48461   Max.   :6705.0   Max.   :9746.0  \n\n\n\n\nDeriving new variables using dplyr package\nThe code chunk below derives the penetration rate of each ICT variable.\n\nict_derived <- ict %>%\n  mutate(`RADIO_PR` = `Radio`/`Total households`*1000) %>%\n  mutate(`TV_PR` = `Television`/`Total households`*1000) %>%\n  mutate(`LLPHONE_PR` = `Land line phone`/`Total households`*1000) %>%\n  mutate(`MPHONE_PR` = `Mobile phone`/`Total households`*1000) %>%\n  mutate(`COMPUTER_PR` = `Computer`/`Total households`*1000) %>%\n  mutate(`INTERNET_PR` = `Internet at home`/`Total households`*1000) %>%\n  rename(`DT_PCODE` =`District Pcode`,`DT`=`District Name`,\n         `TS_PCODE`=`Township Pcode`, `TS`=`Township Name`,\n         `TT_HOUSEHOLDS`=`Total households`,\n         `RADIO`=`Radio`, `TV`=`Television`, \n         `LLPHONE`=`Land line phone`, `MPHONE`=`Mobile phone`,\n         `COMPUTER`=`Computer`, `INTERNET`=`Internet at home`) \n\nThe code chunk below uses summary() to reveal the summary statistics.\n\nsummary(ict_derived)\n\n   DT_PCODE              DT              TS_PCODE              TS           \n Length:55          Length:55          Length:55          Length:55         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n TT_HOUSEHOLDS       RADIO             TV           LLPHONE      \n Min.   : 3318   Min.   :  115   Min.   :  728   Min.   :  20.0  \n 1st Qu.: 8711   1st Qu.: 1260   1st Qu.: 3744   1st Qu.: 266.5  \n Median :13685   Median : 2497   Median : 6117   Median : 695.0  \n Mean   :18369   Mean   : 4487   Mean   :10183   Mean   : 929.9  \n 3rd Qu.:23471   3rd Qu.: 6192   3rd Qu.:13906   3rd Qu.:1082.5  \n Max.   :82604   Max.   :30176   Max.   :62388   Max.   :6736.0  \n     MPHONE         COMPUTER         INTERNET         RADIO_PR     \n Min.   :  150   Min.   :  20.0   Min.   :   8.0   Min.   : 21.05  \n 1st Qu.: 2037   1st Qu.: 121.0   1st Qu.:  88.0   1st Qu.:138.95  \n Median : 3559   Median : 244.0   Median : 316.0   Median :210.95  \n Mean   : 6470   Mean   : 575.5   Mean   : 760.2   Mean   :215.68  \n 3rd Qu.: 7177   3rd Qu.: 507.0   3rd Qu.: 630.5   3rd Qu.:268.07  \n Max.   :48461   Max.   :6705.0   Max.   :9746.0   Max.   :484.52  \n     TV_PR         LLPHONE_PR       MPHONE_PR       COMPUTER_PR    \n Min.   :116.0   Min.   :  2.78   Min.   : 36.42   Min.   : 3.278  \n 1st Qu.:450.2   1st Qu.: 22.84   1st Qu.:190.14   1st Qu.:11.832  \n Median :517.2   Median : 37.59   Median :305.27   Median :18.970  \n Mean   :509.5   Mean   : 51.09   Mean   :314.05   Mean   :24.393  \n 3rd Qu.:606.4   3rd Qu.: 69.72   3rd Qu.:428.43   3rd Qu.:29.897  \n Max.   :842.5   Max.   :181.49   Max.   :735.43   Max.   :92.402  \n  INTERNET_PR     \n Min.   :  1.041  \n 1st Qu.:  8.617  \n Median : 22.829  \n Mean   : 30.644  \n 3rd Qu.: 41.281  \n Max.   :117.985"
  },
  {
    "objectID": "Hands-on_Ex3/Hands-on_Ex3.html#exploratory-data-analysis-eda",
    "href": "Hands-on_Ex3/Hands-on_Ex3.html#exploratory-data-analysis-eda",
    "title": "Hands-on Exercise 3: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "Exploratory Data Analysis (EDA)",
    "text": "Exploratory Data Analysis (EDA)\n\nEDA using statistical graphics\nThe code chunk below uses geom_histogram() to plot histogram to identify the overall distribution of data values.\n\nggplot(data=ict_derived, \n       aes(x=`RADIO`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\n\n\n\nThe code chunk below uses geom_boxplot() to plot boxplot to detect outliers.\n\nggplot(data=ict_derived, \n       aes(x=`RADIO`)) +\n  geom_boxplot(color=\"black\", \n               fill=\"light blue\")\n\n\n\n\nThe code chunk below uses geom_histogram() to plot distribution of newly derived variables (Radio penetration rate).\n\nggplot(data=ict_derived, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\n\n\n\nThe code chunk below uses geom_boxplot() to plot boxplot to detect outliers of newly derived variables.\n\nggplot(data=ict_derived, \n       aes(x=`RADIO_PR`)) +\n  geom_boxplot(color=\"black\", \n               fill=\"light blue\")\n\n\n\n\nThe code chunk below plots multiple histograms to reveal the distribution of selected variables.\nggarange() of ggpubr package is used to group the histograms together.\n\nradio <- ggplot(data=ict_derived, \n             aes(x= `RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ntv <- ggplot(data=ict_derived, \n             aes(x= `TV_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\nllphone <- ggplot(data=ict_derived, \n             aes(x= `LLPHONE_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\nmphone <- ggplot(data=ict_derived, \n             aes(x= `MPHONE_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ncomputer <- ggplot(data=ict_derived, \n             aes(x= `COMPUTER_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ninternet <- ggplot(data=ict_derived, \n             aes(x= `INTERNET_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\nggarrange(radio, tv, llphone, mphone, computer, internet, \n          ncol = 3, \n          nrow = 2)\n\n\n\n\n\n\nEDA using choropleth map\n\nJoining geospatial data with aspatial data\nThe code chunk below uses left_join() of dplyr package to combine shan_sf and ict_derived by column field “TS_PCODE”. shan_sf is base data object and ict_derived is the join table.\n\nshan_sf <- left_join(shan_sf, \n                     ict_derived, \n                     by=c(\"TS_PCODE\"=\"TS_PCODE\"))\nwrite_rds(shan_sf, \"data/rds/shan_sf.rds\")\n\n\n\nPreparing a choropleth map\nThe code chunk below uses qtm() of tmap package to plot a choropleth map showing the distribution of Radio penetration rate of Shan State at township level.\n\nqtm(shan_sf, \"RADIO_PR\")\n\n\n\n\nThe code chunk below plots two choropleth maps, one for the total number of households (i.e. TT_HOUSEHOLDS.map) and one for the total number of household with Radio (RADIO.map).\n\nTT_HOUSEHOLDS.map <- tm_shape(shan_sf) + \n  tm_fill(col = \"TT_HOUSEHOLDS\",\n          n = 5,\n          style = \"jenks\", \n          title = \"Total households\") + \n  tm_borders(alpha = 0.5) \n\nRADIO.map <- tm_shape(shan_sf) + \n  tm_fill(col = \"RADIO\",\n          n = 5,\n          style = \"jenks\",\n          title = \"Number Radio \") + \n  tm_borders(alpha = 0.5) \n\ntmap_arrange(TT_HOUSEHOLDS.map, RADIO.map,\n             asp=NA, ncol=2)\n\n\n\n\nThe code chunk below plots the choropleth maps showing the dsitribution of total number of households and Radio penetration rate.\n\ntm_shape(shan_sf) +\n    tm_polygons(c(\"TT_HOUSEHOLDS\", \"RADIO_PR\"),\n                style=\"jenks\") +\n    tm_facets(sync = TRUE, ncol = 2) +\n  tm_legend(legend.position = c(\"right\", \"bottom\"))+\n  tm_layout(outer.margins=0, asp=0)"
  },
  {
    "objectID": "Hands-on_Ex3/Hands-on_Ex3.html#correlation-analysis",
    "href": "Hands-on_Ex3/Hands-on_Ex3.html#correlation-analysis",
    "title": "Hands-on Exercise 3: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "Correlation Analysis",
    "text": "Correlation Analysis\nThe code chunk below uses corrplot.mixed()of corrplot package to visualise and analyse the correlation of the input variables.\n\ncluster_vars.cor = cor(ict_derived[,12:17])\ncorrplot.mixed(cluster_vars.cor,\n         lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")"
  },
  {
    "objectID": "Hands-on_Ex3/Hands-on_Ex3.html#hierarchy-cluster-analysis",
    "href": "Hands-on_Ex3/Hands-on_Ex3.html#hierarchy-cluster-analysis",
    "title": "Hands-on Exercise 3: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "Hierarchy Cluster Analysis",
    "text": "Hierarchy Cluster Analysis\nIn this section, I learn how to perform hierarchical cluster analysis.\n\nExtracting clustering variables\nThe code chunk below extracts the clustering variables from shan_sf.\n\ncluster_vars <- shan_sf %>%\n  st_set_geometry(NULL) %>%\n  select(\"TS.x\", \"RADIO_PR\", \"TV_PR\", \"LLPHONE_PR\", \"MPHONE_PR\", \"COMPUTER_PR\")\nhead(cluster_vars,10)\n\n        TS.x RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\n1    Mongmit 286.1852 554.1313   35.30618  260.6944    12.15939\n2    Pindaya 417.4647 505.1300   19.83584  162.3917    12.88190\n3    Ywangan 484.5215 260.5734   11.93591  120.2856     4.41465\n4   Pinlaung 231.6499 541.7189   28.54454  249.4903    13.76255\n5     Mabein 449.4903 708.6423   72.75255  392.6089    16.45042\n6      Kalaw 280.7624 611.6204   42.06478  408.7951    29.63160\n7      Pekon 318.6118 535.8494   39.83270  214.8476    18.97032\n8   Lawksawk 387.1017 630.0035   31.51366  320.5686    21.76677\n9  Nawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\n10   Kyaukme 210.9548 601.1773   39.58267  372.4930    30.94709\n\n\nThe code chunk below uses row.names() to change the rows by township name instead of row number.\n\nrow.names(cluster_vars) <- cluster_vars$\"TS.x\"\nhead(cluster_vars,10)\n\n               TS.x RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\nMongmit     Mongmit 286.1852 554.1313   35.30618  260.6944    12.15939\nPindaya     Pindaya 417.4647 505.1300   19.83584  162.3917    12.88190\nYwangan     Ywangan 484.5215 260.5734   11.93591  120.2856     4.41465\nPinlaung   Pinlaung 231.6499 541.7189   28.54454  249.4903    13.76255\nMabein       Mabein 449.4903 708.6423   72.75255  392.6089    16.45042\nKalaw         Kalaw 280.7624 611.6204   42.06478  408.7951    29.63160\nPekon         Pekon 318.6118 535.8494   39.83270  214.8476    18.97032\nLawksawk   Lawksawk 387.1017 630.0035   31.51366  320.5686    21.76677\nNawnghkio Nawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\nKyaukme     Kyaukme 210.9548 601.1773   39.58267  372.4930    30.94709\n\n\nThe code chunk below keeps field 2 to 6, deleting TS.x field.\n\nshan_ict <- select(cluster_vars, c(2:6))\nhead(shan_ict, 10)\n\n          RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\nMongmit   286.1852 554.1313   35.30618  260.6944    12.15939\nPindaya   417.4647 505.1300   19.83584  162.3917    12.88190\nYwangan   484.5215 260.5734   11.93591  120.2856     4.41465\nPinlaung  231.6499 541.7189   28.54454  249.4903    13.76255\nMabein    449.4903 708.6423   72.75255  392.6089    16.45042\nKalaw     280.7624 611.6204   42.06478  408.7951    29.63160\nPekon     318.6118 535.8494   39.83270  214.8476    18.97032\nLawksawk  387.1017 630.0035   31.51366  320.5686    21.76677\nNawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\nKyaukme   210.9548 601.1773   39.58267  372.4930    30.94709\n\n\n\n\nMin-Max standardization\nThe code chunk below uses normalize() of heatmaply package to standardize the clustering variables by Min-Max method.\n\nshan_ict.std <- normalize(shan_ict)\nsummary(shan_ict.std)\n\n    RADIO_PR          TV_PR          LLPHONE_PR       MPHONE_PR     \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.2544   1st Qu.:0.4600   1st Qu.:0.1123   1st Qu.:0.2199  \n Median :0.4097   Median :0.5523   Median :0.1948   Median :0.3846  \n Mean   :0.4199   Mean   :0.5416   Mean   :0.2703   Mean   :0.3972  \n 3rd Qu.:0.5330   3rd Qu.:0.6750   3rd Qu.:0.3746   3rd Qu.:0.5608  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n  COMPUTER_PR     \n Min.   :0.00000  \n 1st Qu.:0.09598  \n Median :0.17607  \n Mean   :0.23692  \n 3rd Qu.:0.29868  \n Max.   :1.00000  \n\n\n\n\nZ-score standardization\nThe code chunk below uses scale() of Base R to standardize the clustering variables by Z-score method.\ndescribe() of psych package is used to provide standard deviation.\n\nshan_ict.z <- scale(shan_ict)\ndescribe(shan_ict.z)\n\n            vars  n mean sd median trimmed  mad   min  max range  skew kurtosis\nRADIO_PR       1 55    0  1  -0.04   -0.06 0.94 -1.85 2.55  4.40  0.48    -0.27\nTV_PR          2 55    0  1   0.05    0.04 0.78 -2.47 2.09  4.56 -0.38    -0.23\nLLPHONE_PR     3 55    0  1  -0.33   -0.15 0.68 -1.19 3.20  4.39  1.37     1.49\nMPHONE_PR      4 55    0  1  -0.05   -0.06 1.01 -1.58 2.40  3.98  0.48    -0.34\nCOMPUTER_PR    5 55    0  1  -0.26   -0.18 0.64 -1.03 3.31  4.34  1.80     2.96\n              se\nRADIO_PR    0.13\nTV_PR       0.13\nLLPHONE_PR  0.13\nMPHONE_PR   0.13\nCOMPUTER_PR 0.13\n\n\n\n\nVisualizing the standardized clustering variables\nThe code chunk below plot the scaled Radio_PR field.\n\nr <- ggplot(data=ict_derived, \n             aes(x= `RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\nshan_ict_s_df <- as.data.frame(shan_ict.std)\ns <- ggplot(data=shan_ict_s_df, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  ggtitle(\"Min-Max Standardisation\")\n\nshan_ict_z_df <- as.data.frame(shan_ict.z)\nz <- ggplot(data=shan_ict_z_df, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  ggtitle(\"Z-score Standardisation\")\n\nggarrange(r, s, z,\n          ncol = 3,\n          nrow = 1)\n\n\n\n\n\n\nComputing proximity matrix\nThe code chunk below uses dist() of R to calculate distance matrix by euclidean method.\n\nproxmat <- dist(shan_ict, method = 'euclidean')\nproxmat\n\n             Mongmit   Pindaya   Ywangan  Pinlaung    Mabein     Kalaw\nPindaya    171.86828                                                  \nYwangan    381.88259 257.31610                                        \nPinlaung    57.46286 208.63519 400.05492                              \nMabein     263.37099 313.45776 529.14689 312.66966                    \nKalaw      160.05997 302.51785 499.53297 181.96406 198.14085          \nPekon       59.61977 117.91580 336.50410  94.61225 282.26877 211.91531\nLawksawk   140.11550 204.32952 432.16535 192.57320 130.36525 140.01101\nNawnghkio   89.07103 180.64047 377.87702 139.27495 204.63154 127.74787\nKyaukme    144.02475 311.01487 505.89191 139.67966 264.88283  79.42225\nMuse       563.01629 704.11252 899.44137 571.58335 453.27410 412.46033\nLaihka     141.87227 298.61288 491.83321 101.10150 345.00222 197.34633\nMongnai    115.86190 258.49346 422.71934  64.52387 358.86053 200.34668\nMawkmai    434.92968 437.99577 397.03752 398.11227 693.24602 562.59200\nKutkai      97.61092 212.81775 360.11861  78.07733 340.55064 204.93018\nMongton    192.67961 283.35574 361.23257 163.42143 425.16902 267.87522\nMongyai    256.72744 287.41816 333.12853 220.56339 516.40426 386.74701\nMongkaing  503.61965 481.71125 364.98429 476.29056 747.17454 625.24500\nLashio     251.29457 398.98167 602.17475 262.51735 231.28227 106.69059\nMongpan    193.32063 335.72896 483.68125 192.78316 301.52942 114.69105\nMatman     401.25041 354.39039 255.22031 382.40610 637.53975 537.63884\nTachileik  529.63213 635.51774 807.44220 555.01039 365.32538 373.64459\nNarphan    406.15714 474.50209 452.95769 371.26895 630.34312 463.53759\nMongkhet   349.45980 391.74783 408.97731 305.86058 610.30557 465.52013\nHsipaw     118.18050 245.98884 388.63147  76.55260 366.42787 212.36711\nMonghsat   214.20854 314.71506 432.98028 160.44703 470.48135 317.96188\nMongmao    242.54541 402.21719 542.85957 217.58854 384.91867 195.18913\nNansang    104.91839 275.44246 472.77637  85.49572 287.92364 124.30500\nLaukkaing  568.27732 726.85355 908.82520 563.81750 520.67373 427.77791\nPangsang   272.67383 428.24958 556.82263 244.47146 418.54016 224.03998\nNamtu      179.62251 225.40822 444.66868 170.04533 366.16094 307.27427\nMonghpyak  177.76325 221.30579 367.44835 222.20020 212.69450 167.08436\nKonkyan    403.39082 500.86933 528.12533 365.44693 613.51206 444.75859\nMongping   265.12574 310.64850 337.94020 229.75261 518.16310 375.64739\nHopong     136.93111 223.06050 352.85844  98.14855 398.00917 264.16294\nNyaungshwe  99.38590 216.52463 407.11649 138.12050 210.21337  95.66782\nHsihseng   131.49728 172.00796 342.91035 111.61846 381.20187 287.11074\nMongla     384.30076 549.42389 728.16301 372.59678 406.09124 260.26411\nHseni      189.37188 337.98982 534.44679 204.47572 213.61240  38.52842\nKunlong    224.12169 355.47066 531.63089 194.76257 396.61508 273.01375\nHopang     281.05362 443.26362 596.19312 265.96924 368.55167 185.14704\nNamhkan    386.02794 543.81859 714.43173 382.78835 379.56035 246.39577\nKengtung   246.45691 385.68322 573.23173 263.48638 219.47071  88.29335\nLangkho    164.26299 323.28133 507.78892 168.44228 253.84371  67.19580\nMonghsu    109.15790 198.35391 340.42789  80.86834 367.19820 237.34578\nTaunggyi   399.84278 503.75471 697.98323 429.54386 226.24011 252.26066\nPangwaun   381.51246 512.13162 580.13146 356.37963 523.44632 338.35194\nKyethi     202.92551 175.54012 287.29358 189.47065 442.07679 360.17247\nLoilen     145.48666 293.61143 469.51621  91.56527 375.06406 217.19877\nManton     430.64070 402.42888 306.16379 405.83081 674.01120 560.16577\nMongyang   309.51302 475.93982 630.71590 286.03834 411.88352 233.56349\nKunhing    173.50424 318.23811 449.67218 141.58836 375.82140 197.63683\nMongyawng  214.21738 332.92193 570.56521 235.55497 193.49994 173.43078\nTangyan    195.92520 208.43740 324.77002 169.50567 448.59948 348.06617\nNamhsan    237.78494 228.41073 286.16305 214.33352 488.33873 385.88676\n               Pekon  Lawksawk Nawnghkio   Kyaukme      Muse    Laihka\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk   157.51129                                                  \nNawnghkio  113.15370  90.82891                                        \nKyaukme    202.12206 186.29066 157.04230                              \nMuse       614.56144 510.13288 533.68806 434.75768                    \nLaihka     182.23667 246.74469 211.88187 128.24979 526.65211          \nMongnai    151.60031 241.71260 182.21245 142.45669 571.97975 100.53457\nMawkmai    416.00669 567.52693 495.15047 512.02846 926.93007 429.96554\nKutkai     114.98048 224.64646 147.44053 170.93318 592.90743 144.67198\nMongton    208.14888 311.07742 225.81118 229.28509 634.71074 212.07320\nMongyai    242.52301 391.26989 319.57938 339.27780 763.91399 264.13364\nMongkaing  480.23965 625.18712 546.69447 586.05094 995.66496 522.96309\nLashio     303.80011 220.75270 230.55346 129.95255 313.15288 238.64533\nMongpan    243.30037 228.54223 172.84425 110.37831 447.49969 210.76951\nMatman     368.25761 515.39711 444.05061 505.52285 929.11283 443.25453\nTachileik  573.39528 441.82621 470.45533 429.15493 221.19950 549.08985\nNarphan    416.84901 523.69580 435.59661 420.30003 770.40234 392.32592\nMongkhet   342.08722 487.41102 414.10280 409.03553 816.44931 324.97428\nHsipaw     145.37542 249.35081 176.09570 163.95741 591.03355 128.42987\nMonghsat   225.64279 352.31496 289.83220 253.25370 663.76026 158.93517\nMongmao    293.70625 314.64777 257.76465 146.09228 451.82530 185.99082\nNansang    160.37607 188.78869 151.13185  60.32773 489.35308  78.78999\nLaukkaing  624.82399 548.83928 552.65554 428.74978 149.26996 507.39700\nPangsang   321.81214 345.91486 287.10769 175.35273 460.24292 214.19291\nNamtu      165.02707 260.95300 257.52713 270.87277 659.16927 185.86794\nMonghpyak  190.93173 142.31691  93.03711 217.64419 539.43485 293.22640\nKonkyan    421.48797 520.31264 439.34272 393.79911 704.86973 351.75354\nMongping   259.68288 396.47081 316.14719 330.28984 744.44948 272.82761\nHopong     138.86577 274.91604 204.88286 218.84211 648.68011 157.48857\nNyaungshwe 139.31874 104.17830  43.26545 126.50414 505.88581 201.71653\nHsihseng   105.30573 257.11202 209.88026 250.27059 677.66886 175.89761\nMongla     441.20998 393.18472 381.40808 241.58966 256.80556 315.93218\nHseni      243.98001 171.50398 164.05304  81.20593 381.30567 204.49010\nKunlong    249.36301 318.30406 285.04608 215.63037 547.24297 122.68682\nHopang     336.38582 321.16462 279.84188 154.91633 377.44407 230.78652\nNamhkan    442.77120 379.41126 367.33575 247.81990 238.67060 342.43665\nKengtung   297.67761 209.38215 208.29647 136.23356 330.08211 258.23950\nLangkho    219.21623 190.30257 156.51662  51.67279 413.64173 160.94435\nMonghsu    113.84636 242.04063 170.09168 200.77712 633.21624 163.28926\nTaunggyi   440.66133 304.96838 344.79200 312.60547 250.81471 425.36916\nPangwaun   423.81347 453.02765 381.67478 308.31407 541.97887 351.78203\nKyethi     162.43575 317.74604 267.21607 328.14177 757.16745 255.83275\nLoilen     181.94596 265.29318 219.26405 146.92675 560.43400  59.69478\nManton     403.82131 551.13000 475.77296 522.86003 941.49778 458.30232\nMongyang   363.58788 363.37684 323.32123 188.59489 389.59919 229.71502\nKunhing    213.46379 278.68953 206.15773 145.00266 533.00162 142.03682\nMongyawng  248.43910 179.07229 220.61209 181.55295 422.37358 211.99976\nTangyan    167.79937 323.14701 269.07880 306.78359 736.93741 224.29176\nNamhsan    207.16559 362.84062 299.74967 347.85944 778.52971 273.79672\n             Mongnai   Mawkmai    Kutkai   Mongton   Mongyai Mongkaing\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai    374.50873                                                  \nKutkai      91.15307 364.95519                                        \nMongton    131.67061 313.35220 107.06341                              \nMongyai    203.23607 178.70499 188.94166 159.79790                    \nMongkaing  456.00842 133.29995 428.96133 365.50032 262.84016          \nLashio     270.86983 638.60773 289.82513 347.11584 466.36472 708.65819\nMongpan    178.09554 509.99632 185.18173 200.31803 346.39710 563.56780\nMatman     376.33870 147.83545 340.86349 303.04574 186.95158 135.51424\nTachileik  563.95232 919.38755 568.99109 608.76740 750.29555 967.14087\nNarphan    329.31700 273.75350 314.27683 215.97925 248.82845 285.65085\nMongkhet   275.76855 115.58388 273.91673 223.22828 104.98924 222.60577\nHsipaw      52.68195 351.34601  51.46282  90.69766 177.33790 423.77868\nMonghsat   125.25968 275.09705 154.32012 150.98053 127.35225 375.60376\nMongmao    188.29603 485.52853 204.69232 206.57001 335.61300 552.31959\nNansang     92.79567 462.41938 130.04549 199.58124 288.55962 542.16609\nLaukkaing  551.56800 882.51110 580.38112 604.66190 732.68347 954.11795\nPangsang   204.25746 484.14757 228.33583 210.77938 343.30638 548.40662\nNamtu      209.35473 427.95451 225.28268 308.71751 278.02761 525.04057\nMonghpyak  253.26470 536.71695 206.61627 258.04282 370.01575 568.21089\nKonkyan    328.82831 339.01411 310.60810 248.25265 287.87384 380.92091\nMongping   202.99615 194.31049 182.75266 119.86993  65.38727 257.18572\nHopong      91.53795 302.84362  73.45899 106.21031 124.62791 379.37916\nNyaungshwe 169.63695 502.99026 152.15482 219.72196 327.13541 557.32112\nHsihseng   142.36728 329.29477 128.21054 194.64317 162.27126 411.59788\nMongla     354.10985 686.88950 388.40984 411.06668 535.28615 761.48327\nHseni      216.81639 582.53670 229.37894 286.75945 408.23212 648.04408\nKunlong    202.92529 446.53763 204.54010 270.02165 299.36066 539.91284\nHopang     243.00945 561.24281 263.31986 273.50305 408.73288 626.17673\nNamhkan    370.05669 706.47792 392.48568 414.53594 550.62819 771.39688\nKengtung   272.28711 632.54638 279.19573 329.38387 460.39706 692.74693\nLangkho    174.67678 531.08019 180.51419 236.70878 358.95672 597.42714\nMonghsu     84.11238 332.07962  62.60859 107.04894 154.86049 400.71816\nTaunggyi   448.55282 810.74692 450.33382 508.40925 635.94105 866.21117\nPangwaun   312.13429 500.68857 321.80465 257.50434 394.07696 536.95736\nKyethi     210.50453 278.85535 184.23422 222.52947 137.79420 352.06533\nLoilen      58.41263 388.73386 131.56529 176.16001 224.79239 482.18190\nManton     391.54062 109.08779 361.82684 310.20581 195.59882  81.75337\nMongyang   260.39387 558.83162 285.33223 295.60023 414.31237 631.91325\nKunhing    110.55197 398.43973 108.84990 114.03609 238.99570 465.03971\nMongyawng  275.77546 620.04321 281.03383 375.22688 445.78964 700.98284\nTangyan    180.37471 262.66006 166.61820 198.88460 109.08506 348.56123\nNamhsan    218.10003 215.19289 191.32762 196.76188  77.35900 288.66231\n              Lashio   Mongpan    Matman Tachileik   Narphan  Mongkhet\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan    172.33279                                                  \nMatman     628.11049 494.81014                                        \nTachileik  311.95286 411.03849 890.12935                              \nNarphan    525.63854 371.13393 312.05193 760.29566                    \nMongkhet   534.44463 412.17123 203.02855 820.50164 217.28718          \nHsipaw     290.86435 179.52054 344.45451 576.18780 295.40170 253.80950\nMonghsat   377.86793 283.30992 313.59911 677.09508 278.21548 167.98445\nMongmao    214.23677 131.59966 501.59903 472.95568 331.42618 375.35820\nNansang    184.47950 144.77393 458.06573 486.77266 398.13308 360.99219\nLaukkaing  334.65738 435.58047 903.72094 325.06329 708.82887 769.06406\nPangsang   236.72516 140.23910 506.29940 481.31907 316.30314 375.58139\nNamtu      365.88437 352.91394 416.65397 659.56458 494.36143 355.99713\nMonghpyak  262.09281 187.85699 470.46845 444.04411 448.40651 462.63265\nKonkyan    485.51312 365.87588 392.40306 730.92980 158.82353 254.24424\nMongping   454.52548 318.47482 201.65224 727.08969 188.64567 113.80917\nHopong     345.31042 239.43845 291.84351 632.45718 294.40441 212.99485\nNyaungshwe 201.58191 137.29734 460.91883 445.81335 427.94086 417.08639\nHsihseng   369.00833 295.87811 304.02806 658.87060 377.52977 256.70338\nMongla     179.95877 253.20001 708.17595 347.33155 531.46949 574.40292\nHseni       79.41836 120.66550 564.64051 354.90063 474.12297 481.88406\nKunlong    295.23103 288.03320 468.27436 595.70536 413.07823 341.68641\nHopang     170.63913 135.62913 573.55355 403.82035 397.85908 451.51070\nNamhkan    173.27153 240.34131 715.42102 295.91660 536.85519 596.19944\nKengtung    59.85893 142.21554 613.01033 295.90429 505.40025 531.35998\nLangkho    115.18145  94.98486 518.86151 402.33622 420.65204 428.08061\nMonghsu    325.71557 216.25326 308.13805 605.02113 311.92379 247.73318\nTaunggyi   195.14541 319.81385 778.45810 150.84117 684.20905 712.80752\nPangwaun   362.45608 232.52209 523.43600 540.60474 264.64997 407.02947\nKyethi     447.10266 358.89620 233.83079 728.87329 374.90376 233.25039\nLoilen     268.92310 207.25000 406.56282 573.75476 354.79137 284.76895\nManton     646.66493 507.96808  59.52318 910.23039 280.26395 181.33894\nMongyang   209.33700 194.93467 585.61776 448.79027 401.39475 445.40621\nKunhing    255.10832 137.85278 403.66587 532.26397 281.62645 292.49814\nMongyawng  172.70139 275.15989 601.80824 432.10118 572.76394 522.91815\nTangyan    429.84475 340.39128 242.78233 719.84066 348.84991 201.49393\nNamhsan    472.04024 364.77086 180.09747 754.03913 316.54695 170.90848\n              Hsipaw  Monghsat   Mongmao   Nansang Laukkaing  Pangsang\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat   121.78922                                                  \nMongmao    185.99483 247.17708                                        \nNansang    120.24428 201.92690 164.99494                              \nLaukkaing  569.06099 626.44910 404.00848 480.60074                    \nPangsang   205.04337 256.37933  57.60801 193.36162 408.04016          \nNamtu      229.44658 231.78673 365.03882 217.61884 664.06286 392.97391\nMonghpyak  237.67919 356.84917 291.88846 227.52638 565.84279 315.11651\nKonkyan    296.74316 268.25060 281.87425 374.70456 635.92043 274.81900\nMongping   168.92101 140.95392 305.57166 287.36626 708.13447 308.33123\nHopong      62.86179 100.45714 244.16253 167.66291 628.48557 261.51075\nNyaungshwe 169.92664 286.37238 230.45003 131.18943 520.24345 257.77823\nHsihseng   136.54610 153.49551 311.98001 193.53779 670.74564 335.52974\nMongla     373.47509 429.00536 216.24705 289.45119 202.55831 217.88123\nHseni      231.48538 331.22632 184.67099 136.45492 391.74585 214.66375\nKunlong    205.10051 202.31862 224.43391 183.01388 521.88657 258.49342\nHopang     248.72536 317.64824  78.29342 196.47091 331.67199  92.57672\nNamhkan    382.79302 455.10875 223.32205 302.89487 196.46063 231.38484\nKengtung   284.08582 383.72138 207.58055 193.67980 351.48520 229.85484\nLangkho    183.05109 279.52329 134.50170  99.39859 410.41270 167.65920\nMonghsu     58.55724 137.24737 242.43599 153.59962 619.01766 260.52971\nTaunggyi   462.31183 562.88102 387.33906 365.04897 345.98041 405.59730\nPangwaun   298.12447 343.53898 187.40057 326.12960 470.63605 157.48757\nKyethi     195.17677 190.50609 377.89657 273.02385 749.99415 396.89963\nLoilen      98.04789 118.65144 190.26490  94.23028 535.57527 207.94433\nManton     359.60008 317.15603 503.79786 476.55544 907.38406 504.75214\nMongyang   267.10497 312.64797  91.06281 218.49285 326.19219 108.37735\nKunhing     90.77517 165.38834 103.91040 128.20940 500.41640 123.18870\nMongyawng  294.70967 364.40429 296.40789 191.11990 454.80044 336.16703\nTangyan    167.69794 144.59626 347.14183 249.70235 722.40954 364.76893\nNamhsan    194.47928 169.56962 371.71448 294.16284 760.45960 385.65526\n               Namtu Monghpyak   Konkyan  Mongping    Hopong Nyaungshwe\nPindaya                                                                \nYwangan                                                                \nPinlaung                                                               \nMabein                                                                 \nKalaw                                                                  \nPekon                                                                  \nLawksawk                                                               \nNawnghkio                                                              \nKyaukme                                                                \nMuse                                                                   \nLaihka                                                                 \nMongnai                                                                \nMawkmai                                                                \nKutkai                                                                 \nMongton                                                                \nMongyai                                                                \nMongkaing                                                              \nLashio                                                                 \nMongpan                                                                \nMatman                                                                 \nTachileik                                                              \nNarphan                                                                \nMongkhet                                                               \nHsipaw                                                                 \nMonghsat                                                               \nMongmao                                                                \nNansang                                                                \nLaukkaing                                                              \nPangsang                                                               \nNamtu                                                                  \nMonghpyak  346.57799                                                   \nKonkyan    478.37690 463.39594                                         \nMongping   321.66441 354.76537 242.02901                               \nHopong     206.82668 267.95563 304.49287 134.00139                     \nNyaungshwe 271.41464 103.97300 432.35040 319.32583 209.32532           \nHsihseng   131.89940 285.37627 383.49700 199.64389  91.65458  225.80242\nMongla     483.49434 408.03397 468.09747 512.61580 432.31105  347.60273\nHseni      327.41448 200.26876 448.84563 395.58453 286.41193  130.86310\nKunlong    233.60474 357.44661 329.11433 309.05385 219.06817  285.13095\nHopang     408.24516 304.26577 348.18522 379.27212 309.77356  247.19891\nNamhkan    506.32466 379.50202 481.59596 523.74815 444.13246  333.32428\nKengtung   385.33554 221.47613 474.82621 442.80821 340.47382  177.75714\nLangkho    305.03473 200.27496 386.95022 343.96455 239.63685  128.26577\nMonghsu    209.64684 232.17823 331.72187 158.90478  43.40665  173.82799\nTaunggyi   518.72748 334.17439 650.56905 621.53039 513.76415  325.09619\nPangwaun   517.03554 381.95144 263.97576 340.37881 346.00673  352.92324\nKyethi     186.90932 328.16234 400.10989 187.43974 136.49038  288.06872\nLoilen     194.24075 296.99681 334.19820 231.99959 124.74445  206.40432\nManton     448.58230 502.20840 366.66876 200.48082 310.58885  488.79874\nMongyang   413.26052 358.17599 329.39338 387.80686 323.35704  294.29500\nKunhing    296.43996 250.74435 253.74202 212.59619 145.15617  189.97131\nMongyawng  262.24331 285.56475 522.38580 455.59190 326.59925  218.12104\nTangyan    178.69483 335.26416 367.46064 161.67411 106.82328  284.14692\nNamhsan    240.95555 352.70492 352.20115 130.23777 132.70541  315.91750\n            Hsihseng    Mongla     Hseni   Kunlong    Hopang   Namhkan\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla     478.66210                                                  \nHseni      312.74375 226.82048                                        \nKunlong    231.85967 346.46200 276.19175                              \nHopang     370.01334 147.02444 162.80878 271.34451                    \nNamhkan    492.09476  77.21355 212.11323 375.73885 146.18632          \nKengtung   370.72441 202.45004  66.12817 317.14187 164.29921 175.63015\nLangkho    276.27441 229.01675  66.66133 224.52741 134.24847 224.40029\nMonghsu     97.82470 424.51868 262.28462 239.89665 301.84458 431.32637\nTaunggyi   528.14240 297.09863 238.19389 471.29032 329.95252 257.29147\nPangwaun   433.06326 319.18643 330.70182 392.45403 206.98364 310.44067\nKyethi      84.04049 556.02500 388.33498 298.55859 440.48114 567.86202\nLoilen     158.84853 338.67408 227.10984 166.53599 242.89326 364.90647\nManton     334.87758 712.51416 584.63341 479.76855 577.52046 721.86149\nMongyang   382.59743 146.66661 210.19929 247.22785  69.25859 167.72448\nKunhing    220.15490 306.47566 206.47448 193.77551 172.96164 314.92119\nMongyawng  309.51462 315.57550 173.86004 240.39800 290.51360 321.21112\nTangyan     70.27241 526.80849 373.07575 268.07983 412.22167 542.64078\nNamhsan    125.74240 564.02740 411.96125 310.40560 440.51555 576.42717\n            Kengtung   Langkho   Monghsu  Taunggyi  Pangwaun    Kyethi\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla                                                                \nHseni                                                                 \nKunlong                                                               \nHopang                                                                \nNamhkan                                                               \nKengtung                                                              \nLangkho    107.16213                                                  \nMonghsu    316.91914 221.84918                                        \nTaunggyi   186.28225 288.27478 486.91951                              \nPangwaun   337.48335 295.38434 343.38498 497.61245                    \nKyethi     444.26274 350.91512 146.61572 599.57407 476.62610          \nLoilen     282.22935 184.10672 131.55208 455.91617 331.69981 232.32965\nManton     631.99123 535.95620 330.76503 803.08034 510.79265 272.03299\nMongyang   217.08047 175.35413 323.95988 374.58247 225.25026 453.86726\nKunhing    245.95083 146.38284 146.78891 429.98509 229.09986 278.95182\nMongyawng  203.87199 186.11584 312.85089 287.73864 475.33116 387.71518\nTangyan    429.95076 332.02048 127.42203 592.65262 447.05580  47.79331\nNamhsan    466.20497 368.20978 153.22576 631.49232 448.58030  68.67929\n              Loilen    Manton  Mongyang   Kunhing Mongyawng   Tangyan\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla                                                                \nHseni                                                                 \nKunlong                                                               \nHopang                                                                \nNamhkan                                                               \nKengtung                                                              \nLangkho                                                               \nMonghsu                                                               \nTaunggyi                                                              \nPangwaun                                                              \nKyethi                                                                \nLoilen                                                                \nManton     419.06087                                                  \nMongyang   246.76592 585.70558                                        \nKunhing    130.39336 410.49230 188.89405                              \nMongyawng  261.75211 629.43339 304.21734 295.35984                    \nTangyan    196.60826 271.82672 421.06366 249.74161 377.52279          \nNamhsan    242.15271 210.48485 450.97869 270.79121 430.02019  63.67613\n\n\n\n\nComputing hierarchical clustering\nThe code chunk below uses hclust() of R stats to perform hierarchical cluster analysis by ward.D method.\n\nhclust_ward <- hclust(proxmat, method = 'ward.D')\n\nThe code chunk below uses plot() of R Graphics to plot hierarchical tree.\n\nplot(hclust_ward, cex = 0.6)\n\n\n\n\n\n\nSelecting the optimal clustering algorithm\nThe code chunk below uses agnes() of cluster package to identify stronger clustering structures when performing hierarchical analysis.\n\nm <- c( \"average\", \"single\", \"complete\", \"ward\")\nnames(m) <- c( \"average\", \"single\", \"complete\", \"ward\")\n\nac <- function(x) {\n  agnes(shan_ict, method = x)$ac\n}\n\nmap_dbl(m, ac)\n\n  average    single  complete      ward \n0.8131144 0.6628705 0.8950702 0.9427730 \n\n\n\n\nDetermining optimal clusters using Gap Statistic Method\nThe code chunk below uses clusGap() of cluster package to compute the gap statistic.\n\nset.seed(12345)\ngap_stat <- clusGap(shan_ict, \n                    FUN = hcut, \n                    nstart = 25, \n                    K.max = 10, \n                    B = 50)\n\nprint(gap_stat, method = \"firstmax\")\n\nClustering Gap statistic [\"clusGap\"] from call:\nclusGap(x = shan_ict, FUNcluster = hcut, K.max = 10, B = 50, nstart = 25)\nB=50 simulated reference sets, k = 1..10; spaceH0=\"scaledPCA\"\n --> Number of clusters (method 'firstmax'): 1\n          logW   E.logW       gap     SE.sim\n [1,] 8.407129 8.680794 0.2736651 0.04460994\n [2,] 8.130029 8.350712 0.2206824 0.03880130\n [3,] 7.992265 8.202550 0.2102844 0.03362652\n [4,] 7.862224 8.080655 0.2184311 0.03784781\n [5,] 7.756461 7.978022 0.2215615 0.03897071\n [6,] 7.665594 7.887777 0.2221833 0.03973087\n [7,] 7.590919 7.806333 0.2154145 0.04054939\n [8,] 7.526680 7.731619 0.2049390 0.04198644\n [9,] 7.458024 7.660795 0.2027705 0.04421874\n[10,] 7.377412 7.593858 0.2164465 0.04540947\n\n\nThe code chunk below uses fviz_gap_stat() of factoextra package to visualize the gap statistic.\n\nfviz_gap_stat(gap_stat)\n\n\n\n\n\n\nInterpreting the dendrograms\nThe code chunk below uses rect.hclust() of R stats to draw the dendrogram with a border around the selected clusters. border argument is used to specify the rectangles’ border colors.\n\nplot(hclust_ward, cex = 0.6)\nrect.hclust(hclust_ward, \n            k = 6, \n            border = 2:5)\n\n\n\n\n\n\nVisually-driven hierarchical clustering analysis\nThe code chunks below performs visually-driven hiearchical clustering analysis.\nThe code chunk below uses data.matrix() to transform shan_ict data frame into data matrix.\n\nshan_ict_mat <- data.matrix(shan_ict)\n\nThe code chunk below uses heatmaply() of heatmaply package to build an interactive cluster heatmap.\n\nheatmaply(normalize(shan_ict_mat),\n          Colv=NA,\n          dist_method = \"euclidean\",\n          hclust_method = \"ward.D\",\n          seriate = \"OLO\",\n          colors = Blues,\n          k_row = 6,\n          margins = c(NA,200,60,NA),\n          fontsize_row = 4,\n          fontsize_col = 5,\n          main=\"Geographic Segmentation of Shan State by ICT indicators\",\n          xlab = \"ICT Indicators\",\n          ylab = \"Townships of Shan State\"\n          )\n\n\n\n\n\n\n\nMapping the clusters formed\nThe code chunk below uses cutree() of R Base to derive a 6-cluster model after examining the dendragram above.\n\ngroups <- as.factor(cutree(hclust_ward, k=6))\n\nThe code chunk below uses cbind() of mice package to append groups object onto shan_sf simple feature object.\nas,matrix() converts groups into a matrix. rename() then renames as.matrix.groups as CLUSTER.\nqtm() of tmap package is used to plot a choropleth map showing the cluster formed.\n\nshan_sf_cluster <- cbind(shan_sf, as.matrix(groups)) %>%\n  rename(`CLUSTER`=`as.matrix.groups.`)\n\nqtm(shan_sf_cluster, \"CLUSTER\")"
  },
  {
    "objectID": "Hands-on_Ex3/Hands-on_Ex3.html#spatially-constrained-clustering---skater-approach",
    "href": "Hands-on_Ex3/Hands-on_Ex3.html#spatially-constrained-clustering---skater-approach",
    "title": "Hands-on Exercise 3: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "Spatially Constrained Clustering - SKATER approach",
    "text": "Spatially Constrained Clustering - SKATER approach\nIn this section, I learn how to derive spatially constrained cluster.\n\nConverting into SpatialPolygonsDataFrame\nThe code chunk below uses as_Spatial() of sf package to convert shan_sf into a SpatialPolygonDataFrame called shan_sp.\n\nshan_sp <- as_Spatial(shan_sf)\n\nThe code chunk below uses poly2nd() of spdep package to compute the neighbours list from polygon list.\n\nshan.nb <- poly2nb(shan_sp)\nsummary(shan.nb)\n\nNeighbour list object:\nNumber of regions: 55 \nNumber of nonzero links: 264 \nPercentage nonzero weights: 8.727273 \nAverage number of links: 4.8 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 \n 5  9  7 21  4  3  5  1 \n5 least connected regions:\n3 5 7 9 47 with 2 links\n1 most connected region:\n8 with 9 links\n\n\nThe code chunk below plots the neighbors list on shan_sp.\n\nplot(shan_sp, \n     border=grey(.5))\nplot(shan.nb, \n     coordinates(shan_sp), \n     col=\"blue\", \n     add=TRUE)\n\n\n\n\n\n\nCalculating edge costs\nThe code chunk below usesnbcosts() of spdep package to compute the cost of each edge, which is the distance between nodes.\n\nlcosts <- nbcosts(shan.nb, shan_ict)\n\nThe code chunk below uses nb2listw() of spdep package to convert the neighbour list to a list weights object by specifying the lcosts computed above as the weights. “style” argument is set as “B” to make sure the cost values are not row-standardized.\n\nshan.w <- nb2listw(shan.nb, \n                   lcosts, \n                   style=\"B\")\nsummary(shan.w)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 55 \nNumber of nonzero links: 264 \nPercentage nonzero weights: 8.727273 \nAverage number of links: 4.8 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 \n 5  9  7 21  4  3  5  1 \n5 least connected regions:\n3 5 7 9 47 with 2 links\n1 most connected region:\n8 with 9 links\n\nWeights style: B \nWeights constants summary:\n   n   nn       S0       S1        S2\nB 55 3025 76267.65 58260785 522016004\n\n\n\n\nComputing minimum spanning tree\nThe code chunk below uses mstree() of spdep package to compute minimum spanning tree.\nclass() and dim() check the class and dimension of shan.mst.\nhead() displays the content of shan.mst\n\nshan.mst <- mstree(shan.w)\nclass(shan.mst)\n\n[1] \"mst\"    \"matrix\"\n\ndim(shan.mst)\n\n[1] 54  3\n\nhead(shan.mst)\n\n     [,1] [,2]      [,3]\n[1,]   31   25 229.44658\n[2,]   25   10 163.95741\n[3,]   10    1 144.02475\n[4,]   10    9 157.04230\n[5,]    9    8  90.82891\n[6,]    8    6 140.01101\n\n\nThe code chunk below plots the neighbors list on shan_sp and shows the observation number of the nodes.\n\nplot(shan_sp, border=gray(.5))\nplot.mst(shan.mst, \n         coordinates(shan_sp), \n         col=\"blue\", \n         cex.lab=0.7, \n         cex.circles=0.005, \n         add=TRUE)\n\n\n\n\n\n\nComputing spatially constrained clusters using SKATER method\nThe code chunk below uses skater() of spdep package to compute the spatially constrained cluster.\nstr() examines the content of clust6.\n\nclust6 <- skater(edges = shan.mst[,1:2], \n                 data = shan_ict, \n                 method = \"euclidean\", \n                 ncuts = 5)\nstr(clust6)\n\nList of 8\n $ groups      : num [1:55] 3 3 6 3 3 3 3 3 3 3 ...\n $ edges.groups:List of 6\n  ..$ :List of 3\n  .. ..$ node: num [1:22] 13 48 54 55 45 37 34 16 25 31 ...\n  .. ..$ edge: num [1:21, 1:3] 48 55 54 37 34 16 45 31 13 13 ...\n  .. ..$ ssw : num 3423\n  ..$ :List of 3\n  .. ..$ node: num [1:18] 47 27 53 38 42 15 41 51 43 32 ...\n  .. ..$ edge: num [1:17, 1:3] 53 15 42 38 41 51 15 27 15 43 ...\n  .. ..$ ssw : num 3759\n  ..$ :List of 3\n  .. ..$ node: num [1:11] 2 6 8 1 36 4 10 9 46 5 ...\n  .. ..$ edge: num [1:10, 1:3] 6 1 8 36 4 6 8 10 10 9 ...\n  .. ..$ ssw : num 1458\n  ..$ :List of 3\n  .. ..$ node: num [1:2] 44 20\n  .. ..$ edge: num [1, 1:3] 44 20 95\n  .. ..$ ssw : num 95\n  ..$ :List of 3\n  .. ..$ node: num 23\n  .. ..$ edge: num[0 , 1:3] \n  .. ..$ ssw : num 0\n  ..$ :List of 3\n  .. ..$ node: num 3\n  .. ..$ edge: num[0 , 1:3] \n  .. ..$ ssw : num 0\n $ not.prune   : NULL\n $ candidates  : int [1:6] 1 2 3 4 5 6\n $ ssto        : num 12613\n $ ssw         : num [1:6] 12613 10977 9962 9540 9123 ...\n $ crit        : num [1:2] 1 Inf\n $ vec.crit    : num [1:55] 1 1 1 1 1 1 1 1 1 1 ...\n - attr(*, \"class\")= chr \"skater\"\n\n\nThe code chunk below checks the cluster assignment.\n\nccs6 <- clust6$groups\nccs6\n\n [1] 3 3 6 3 3 3 3 3 3 3 2 1 1 1 2 1 1 1 2 4 1 2 5 1 1 1 2 1 2 2 1 2 2 1 1 3 1 2\n[39] 2 2 2 2 2 4 1 3 2 1 1 1 2 1 2 1 1\n\ntable(ccs6)\n\nccs6\n 1  2  3  4  5  6 \n22 18 11  2  1  1 \n\n\nThe code chunk below plots the pruned tree that shows the five clusters on top of the township area.\n\nplot(shan_sp, border=gray(.5))\nplot(clust6, \n     coordinates(shan_sp), \n     cex.lab=.7,\n     groups.colors=c(\"red\",\"green\",\"blue\", \"brown\", \"pink\"),\n     cex.circles=0.005, \n     add=TRUE)\n\n\n\n\n\n\nVisualizing the clusters in choropleth map\nThe code chunk below plots the newly derived clusters by using SKATER method, and shows both the hierarchical clustering and spatially constrained hierarchical clustering maps.\n\ngroups_mat <- as.matrix(clust6$groups)\nshan_sf_spatialcluster <- cbind(shan_sf_cluster, as.factor(groups_mat)) %>%\n  rename(`SP_CLUSTER`=`as.factor.groups_mat.`)\n\nhclust.map <- qtm(shan_sf_cluster,\n                  \"CLUSTER\") + \n  tm_borders(alpha = 0.5) \n\nshclust.map <- qtm(shan_sf_spatialcluster,\n                   \"SP_CLUSTER\") + \n  tm_borders(alpha = 0.5) \n\ntmap_arrange(hclust.map, shclust.map,\n             asp=NA, ncol=2)"
  },
  {
    "objectID": "In-class_Ex3/In-class_Ex3.html",
    "href": "In-class_Ex3/In-class_Ex3.html",
    "title": "In-class Exercise 3: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "",
    "text": "In this in-class exercise, there are some additional explanations and sections on top of hands-on exercise 3."
  },
  {
    "objectID": "In-class_Ex3/In-class_Ex3.html#getting-started",
    "href": "In-class_Ex3/In-class_Ex3.html#getting-started",
    "title": "In-class Exercise 3: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "Getting Started",
    "text": "Getting Started\nThe code chunk below installs and launch the R packages into R environment."
  },
  {
    "objectID": "In-class_Ex3/In-class_Ex3.html#importing-data-into-r-environment",
    "href": "In-class_Ex3/In-class_Ex3.html#importing-data-into-r-environment",
    "title": "In-class Exercise 3: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "Importing Data into R environment",
    "text": "Importing Data into R environment\n\nImporting geospatial data into R environment\nThe code chunk below uses st_read() of sf package to import Myanmar Township Boundary GIS data shapefile myanmar_township_boundaries into R and save as simple feature data frame called shan_sf.\n\n\nReading layer `myanmar_township_boundaries' from data source \n  `D:\\GuanboShao\\ISSS624\\In-class_Ex3\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 330 features and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.17275 ymin: 9.671252 xmax: 101.1699 ymax: 28.54554\nGeodetic CRS:  WGS 84\n\n\n\n\nImporting aspatial data into R environment\nThe code chunk below uses read_csv() of readr package to import Shan-ICT csv file and save in R’s tibble data.frame format called ict.\n\n\n\n\n\nDeriving new variables using dplyr package\nThe code chunk below derives the penetration rate of each ICT variable."
  },
  {
    "objectID": "In-class_Ex3/In-class_Ex3.html#exploratory-data-analysis-eda",
    "href": "In-class_Ex3/In-class_Ex3.html#exploratory-data-analysis-eda",
    "title": "In-class Exercise 3: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "Exploratory Data Analysis (EDA)",
    "text": "Exploratory Data Analysis (EDA)\n\nEDA using statistical graphics\nThe code chunk below plots multiple histograms to reveal the distribution of selected variables in derived ict data frame called ict_derived.\nggarange() of ggpubr package is used to group the histograms together.\n\n\n\n\n\n\n\nEDA using choropleth map\n\nJoining geospatial data with aspatial data\nThe code chunk below uses left_join() of dplyr package to combine shan_sf and ict_derived by column field “TS_PCODE”. shan_sf is base data object and ict_derived is the join table."
  },
  {
    "objectID": "In-class_Ex3/In-class_Ex3.html#correlation-analysis",
    "href": "In-class_Ex3/In-class_Ex3.html#correlation-analysis",
    "title": "In-class Exercise 3: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "Correlation Analysis",
    "text": "Correlation Analysis\nThe code chunk below uses corrplot.mixed()of corrplot package to visualise and analyse the correlation of the input variables."
  },
  {
    "objectID": "In-class_Ex3/In-class_Ex3.html#hierarchy-cluster-analysis",
    "href": "In-class_Ex3/In-class_Ex3.html#hierarchy-cluster-analysis",
    "title": "In-class Exercise 3: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "Hierarchy Cluster Analysis",
    "text": "Hierarchy Cluster Analysis\nIn this section, I learn how to perform hierarchical cluster analysis.\n\nExtracting clustering variables\nThe code chunk below extracts the clustering variables from shan_sf.\n\n\n        TS.x RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\n1    Mongmit 286.1852 554.1313   35.30618  260.6944    12.15939\n2    Pindaya 417.4647 505.1300   19.83584  162.3917    12.88190\n3    Ywangan 484.5215 260.5734   11.93591  120.2856     4.41465\n4   Pinlaung 231.6499 541.7189   28.54454  249.4903    13.76255\n5     Mabein 449.4903 708.6423   72.75255  392.6089    16.45042\n6      Kalaw 280.7624 611.6204   42.06478  408.7951    29.63160\n7      Pekon 318.6118 535.8494   39.83270  214.8476    18.97032\n8   Lawksawk 387.1017 630.0035   31.51366  320.5686    21.76677\n9  Nawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\n10   Kyaukme 210.9548 601.1773   39.58267  372.4930    30.94709\n\n\nThe code chunk below uses row.names() to change the rows by township name instead of row number.\n\n\n               TS.x RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\nMongmit     Mongmit 286.1852 554.1313   35.30618  260.6944    12.15939\nPindaya     Pindaya 417.4647 505.1300   19.83584  162.3917    12.88190\nYwangan     Ywangan 484.5215 260.5734   11.93591  120.2856     4.41465\nPinlaung   Pinlaung 231.6499 541.7189   28.54454  249.4903    13.76255\nMabein       Mabein 449.4903 708.6423   72.75255  392.6089    16.45042\nKalaw         Kalaw 280.7624 611.6204   42.06478  408.7951    29.63160\nPekon         Pekon 318.6118 535.8494   39.83270  214.8476    18.97032\nLawksawk   Lawksawk 387.1017 630.0035   31.51366  320.5686    21.76677\nNawnghkio Nawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\nKyaukme     Kyaukme 210.9548 601.1773   39.58267  372.4930    30.94709\n\n\nThe code chunk below keeps field 2 to 6, deleting TS.x field.\n\n\n          RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\nMongmit   286.1852 554.1313   35.30618  260.6944    12.15939\nPindaya   417.4647 505.1300   19.83584  162.3917    12.88190\nYwangan   484.5215 260.5734   11.93591  120.2856     4.41465\nPinlaung  231.6499 541.7189   28.54454  249.4903    13.76255\nMabein    449.4903 708.6423   72.75255  392.6089    16.45042\nKalaw     280.7624 611.6204   42.06478  408.7951    29.63160\nPekon     318.6118 535.8494   39.83270  214.8476    18.97032\nLawksawk  387.1017 630.0035   31.51366  320.5686    21.76677\nNawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\nKyaukme   210.9548 601.1773   39.58267  372.4930    30.94709\n\n\n\n\nComputing proximity matrix\nThe code chunk below uses dist() of R to calculate distance matrix by euclidean method.\n\n\n             Mongmit   Pindaya   Ywangan  Pinlaung    Mabein     Kalaw\nPindaya    171.86828                                                  \nYwangan    381.88259 257.31610                                        \nPinlaung    57.46286 208.63519 400.05492                              \nMabein     263.37099 313.45776 529.14689 312.66966                    \nKalaw      160.05997 302.51785 499.53297 181.96406 198.14085          \nPekon       59.61977 117.91580 336.50410  94.61225 282.26877 211.91531\nLawksawk   140.11550 204.32952 432.16535 192.57320 130.36525 140.01101\nNawnghkio   89.07103 180.64047 377.87702 139.27495 204.63154 127.74787\nKyaukme    144.02475 311.01487 505.89191 139.67966 264.88283  79.42225\nMuse       563.01629 704.11252 899.44137 571.58335 453.27410 412.46033\nLaihka     141.87227 298.61288 491.83321 101.10150 345.00222 197.34633\nMongnai    115.86190 258.49346 422.71934  64.52387 358.86053 200.34668\nMawkmai    434.92968 437.99577 397.03752 398.11227 693.24602 562.59200\nKutkai      97.61092 212.81775 360.11861  78.07733 340.55064 204.93018\nMongton    192.67961 283.35574 361.23257 163.42143 425.16902 267.87522\nMongyai    256.72744 287.41816 333.12853 220.56339 516.40426 386.74701\nMongkaing  503.61965 481.71125 364.98429 476.29056 747.17454 625.24500\nLashio     251.29457 398.98167 602.17475 262.51735 231.28227 106.69059\nMongpan    193.32063 335.72896 483.68125 192.78316 301.52942 114.69105\nMatman     401.25041 354.39039 255.22031 382.40610 637.53975 537.63884\nTachileik  529.63213 635.51774 807.44220 555.01039 365.32538 373.64459\nNarphan    406.15714 474.50209 452.95769 371.26895 630.34312 463.53759\nMongkhet   349.45980 391.74783 408.97731 305.86058 610.30557 465.52013\nHsipaw     118.18050 245.98884 388.63147  76.55260 366.42787 212.36711\nMonghsat   214.20854 314.71506 432.98028 160.44703 470.48135 317.96188\nMongmao    242.54541 402.21719 542.85957 217.58854 384.91867 195.18913\nNansang    104.91839 275.44246 472.77637  85.49572 287.92364 124.30500\nLaukkaing  568.27732 726.85355 908.82520 563.81750 520.67373 427.77791\nPangsang   272.67383 428.24958 556.82263 244.47146 418.54016 224.03998\nNamtu      179.62251 225.40822 444.66868 170.04533 366.16094 307.27427\nMonghpyak  177.76325 221.30579 367.44835 222.20020 212.69450 167.08436\nKonkyan    403.39082 500.86933 528.12533 365.44693 613.51206 444.75859\nMongping   265.12574 310.64850 337.94020 229.75261 518.16310 375.64739\nHopong     136.93111 223.06050 352.85844  98.14855 398.00917 264.16294\nNyaungshwe  99.38590 216.52463 407.11649 138.12050 210.21337  95.66782\nHsihseng   131.49728 172.00796 342.91035 111.61846 381.20187 287.11074\nMongla     384.30076 549.42389 728.16301 372.59678 406.09124 260.26411\nHseni      189.37188 337.98982 534.44679 204.47572 213.61240  38.52842\nKunlong    224.12169 355.47066 531.63089 194.76257 396.61508 273.01375\nHopang     281.05362 443.26362 596.19312 265.96924 368.55167 185.14704\nNamhkan    386.02794 543.81859 714.43173 382.78835 379.56035 246.39577\nKengtung   246.45691 385.68322 573.23173 263.48638 219.47071  88.29335\nLangkho    164.26299 323.28133 507.78892 168.44228 253.84371  67.19580\nMonghsu    109.15790 198.35391 340.42789  80.86834 367.19820 237.34578\nTaunggyi   399.84278 503.75471 697.98323 429.54386 226.24011 252.26066\nPangwaun   381.51246 512.13162 580.13146 356.37963 523.44632 338.35194\nKyethi     202.92551 175.54012 287.29358 189.47065 442.07679 360.17247\nLoilen     145.48666 293.61143 469.51621  91.56527 375.06406 217.19877\nManton     430.64070 402.42888 306.16379 405.83081 674.01120 560.16577\nMongyang   309.51302 475.93982 630.71590 286.03834 411.88352 233.56349\nKunhing    173.50424 318.23811 449.67218 141.58836 375.82140 197.63683\nMongyawng  214.21738 332.92193 570.56521 235.55497 193.49994 173.43078\nTangyan    195.92520 208.43740 324.77002 169.50567 448.59948 348.06617\nNamhsan    237.78494 228.41073 286.16305 214.33352 488.33873 385.88676\n               Pekon  Lawksawk Nawnghkio   Kyaukme      Muse    Laihka\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk   157.51129                                                  \nNawnghkio  113.15370  90.82891                                        \nKyaukme    202.12206 186.29066 157.04230                              \nMuse       614.56144 510.13288 533.68806 434.75768                    \nLaihka     182.23667 246.74469 211.88187 128.24979 526.65211          \nMongnai    151.60031 241.71260 182.21245 142.45669 571.97975 100.53457\nMawkmai    416.00669 567.52693 495.15047 512.02846 926.93007 429.96554\nKutkai     114.98048 224.64646 147.44053 170.93318 592.90743 144.67198\nMongton    208.14888 311.07742 225.81118 229.28509 634.71074 212.07320\nMongyai    242.52301 391.26989 319.57938 339.27780 763.91399 264.13364\nMongkaing  480.23965 625.18712 546.69447 586.05094 995.66496 522.96309\nLashio     303.80011 220.75270 230.55346 129.95255 313.15288 238.64533\nMongpan    243.30037 228.54223 172.84425 110.37831 447.49969 210.76951\nMatman     368.25761 515.39711 444.05061 505.52285 929.11283 443.25453\nTachileik  573.39528 441.82621 470.45533 429.15493 221.19950 549.08985\nNarphan    416.84901 523.69580 435.59661 420.30003 770.40234 392.32592\nMongkhet   342.08722 487.41102 414.10280 409.03553 816.44931 324.97428\nHsipaw     145.37542 249.35081 176.09570 163.95741 591.03355 128.42987\nMonghsat   225.64279 352.31496 289.83220 253.25370 663.76026 158.93517\nMongmao    293.70625 314.64777 257.76465 146.09228 451.82530 185.99082\nNansang    160.37607 188.78869 151.13185  60.32773 489.35308  78.78999\nLaukkaing  624.82399 548.83928 552.65554 428.74978 149.26996 507.39700\nPangsang   321.81214 345.91486 287.10769 175.35273 460.24292 214.19291\nNamtu      165.02707 260.95300 257.52713 270.87277 659.16927 185.86794\nMonghpyak  190.93173 142.31691  93.03711 217.64419 539.43485 293.22640\nKonkyan    421.48797 520.31264 439.34272 393.79911 704.86973 351.75354\nMongping   259.68288 396.47081 316.14719 330.28984 744.44948 272.82761\nHopong     138.86577 274.91604 204.88286 218.84211 648.68011 157.48857\nNyaungshwe 139.31874 104.17830  43.26545 126.50414 505.88581 201.71653\nHsihseng   105.30573 257.11202 209.88026 250.27059 677.66886 175.89761\nMongla     441.20998 393.18472 381.40808 241.58966 256.80556 315.93218\nHseni      243.98001 171.50398 164.05304  81.20593 381.30567 204.49010\nKunlong    249.36301 318.30406 285.04608 215.63037 547.24297 122.68682\nHopang     336.38582 321.16462 279.84188 154.91633 377.44407 230.78652\nNamhkan    442.77120 379.41126 367.33575 247.81990 238.67060 342.43665\nKengtung   297.67761 209.38215 208.29647 136.23356 330.08211 258.23950\nLangkho    219.21623 190.30257 156.51662  51.67279 413.64173 160.94435\nMonghsu    113.84636 242.04063 170.09168 200.77712 633.21624 163.28926\nTaunggyi   440.66133 304.96838 344.79200 312.60547 250.81471 425.36916\nPangwaun   423.81347 453.02765 381.67478 308.31407 541.97887 351.78203\nKyethi     162.43575 317.74604 267.21607 328.14177 757.16745 255.83275\nLoilen     181.94596 265.29318 219.26405 146.92675 560.43400  59.69478\nManton     403.82131 551.13000 475.77296 522.86003 941.49778 458.30232\nMongyang   363.58788 363.37684 323.32123 188.59489 389.59919 229.71502\nKunhing    213.46379 278.68953 206.15773 145.00266 533.00162 142.03682\nMongyawng  248.43910 179.07229 220.61209 181.55295 422.37358 211.99976\nTangyan    167.79937 323.14701 269.07880 306.78359 736.93741 224.29176\nNamhsan    207.16559 362.84062 299.74967 347.85944 778.52971 273.79672\n             Mongnai   Mawkmai    Kutkai   Mongton   Mongyai Mongkaing\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai    374.50873                                                  \nKutkai      91.15307 364.95519                                        \nMongton    131.67061 313.35220 107.06341                              \nMongyai    203.23607 178.70499 188.94166 159.79790                    \nMongkaing  456.00842 133.29995 428.96133 365.50032 262.84016          \nLashio     270.86983 638.60773 289.82513 347.11584 466.36472 708.65819\nMongpan    178.09554 509.99632 185.18173 200.31803 346.39710 563.56780\nMatman     376.33870 147.83545 340.86349 303.04574 186.95158 135.51424\nTachileik  563.95232 919.38755 568.99109 608.76740 750.29555 967.14087\nNarphan    329.31700 273.75350 314.27683 215.97925 248.82845 285.65085\nMongkhet   275.76855 115.58388 273.91673 223.22828 104.98924 222.60577\nHsipaw      52.68195 351.34601  51.46282  90.69766 177.33790 423.77868\nMonghsat   125.25968 275.09705 154.32012 150.98053 127.35225 375.60376\nMongmao    188.29603 485.52853 204.69232 206.57001 335.61300 552.31959\nNansang     92.79567 462.41938 130.04549 199.58124 288.55962 542.16609\nLaukkaing  551.56800 882.51110 580.38112 604.66190 732.68347 954.11795\nPangsang   204.25746 484.14757 228.33583 210.77938 343.30638 548.40662\nNamtu      209.35473 427.95451 225.28268 308.71751 278.02761 525.04057\nMonghpyak  253.26470 536.71695 206.61627 258.04282 370.01575 568.21089\nKonkyan    328.82831 339.01411 310.60810 248.25265 287.87384 380.92091\nMongping   202.99615 194.31049 182.75266 119.86993  65.38727 257.18572\nHopong      91.53795 302.84362  73.45899 106.21031 124.62791 379.37916\nNyaungshwe 169.63695 502.99026 152.15482 219.72196 327.13541 557.32112\nHsihseng   142.36728 329.29477 128.21054 194.64317 162.27126 411.59788\nMongla     354.10985 686.88950 388.40984 411.06668 535.28615 761.48327\nHseni      216.81639 582.53670 229.37894 286.75945 408.23212 648.04408\nKunlong    202.92529 446.53763 204.54010 270.02165 299.36066 539.91284\nHopang     243.00945 561.24281 263.31986 273.50305 408.73288 626.17673\nNamhkan    370.05669 706.47792 392.48568 414.53594 550.62819 771.39688\nKengtung   272.28711 632.54638 279.19573 329.38387 460.39706 692.74693\nLangkho    174.67678 531.08019 180.51419 236.70878 358.95672 597.42714\nMonghsu     84.11238 332.07962  62.60859 107.04894 154.86049 400.71816\nTaunggyi   448.55282 810.74692 450.33382 508.40925 635.94105 866.21117\nPangwaun   312.13429 500.68857 321.80465 257.50434 394.07696 536.95736\nKyethi     210.50453 278.85535 184.23422 222.52947 137.79420 352.06533\nLoilen      58.41263 388.73386 131.56529 176.16001 224.79239 482.18190\nManton     391.54062 109.08779 361.82684 310.20581 195.59882  81.75337\nMongyang   260.39387 558.83162 285.33223 295.60023 414.31237 631.91325\nKunhing    110.55197 398.43973 108.84990 114.03609 238.99570 465.03971\nMongyawng  275.77546 620.04321 281.03383 375.22688 445.78964 700.98284\nTangyan    180.37471 262.66006 166.61820 198.88460 109.08506 348.56123\nNamhsan    218.10003 215.19289 191.32762 196.76188  77.35900 288.66231\n              Lashio   Mongpan    Matman Tachileik   Narphan  Mongkhet\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan    172.33279                                                  \nMatman     628.11049 494.81014                                        \nTachileik  311.95286 411.03849 890.12935                              \nNarphan    525.63854 371.13393 312.05193 760.29566                    \nMongkhet   534.44463 412.17123 203.02855 820.50164 217.28718          \nHsipaw     290.86435 179.52054 344.45451 576.18780 295.40170 253.80950\nMonghsat   377.86793 283.30992 313.59911 677.09508 278.21548 167.98445\nMongmao    214.23677 131.59966 501.59903 472.95568 331.42618 375.35820\nNansang    184.47950 144.77393 458.06573 486.77266 398.13308 360.99219\nLaukkaing  334.65738 435.58047 903.72094 325.06329 708.82887 769.06406\nPangsang   236.72516 140.23910 506.29940 481.31907 316.30314 375.58139\nNamtu      365.88437 352.91394 416.65397 659.56458 494.36143 355.99713\nMonghpyak  262.09281 187.85699 470.46845 444.04411 448.40651 462.63265\nKonkyan    485.51312 365.87588 392.40306 730.92980 158.82353 254.24424\nMongping   454.52548 318.47482 201.65224 727.08969 188.64567 113.80917\nHopong     345.31042 239.43845 291.84351 632.45718 294.40441 212.99485\nNyaungshwe 201.58191 137.29734 460.91883 445.81335 427.94086 417.08639\nHsihseng   369.00833 295.87811 304.02806 658.87060 377.52977 256.70338\nMongla     179.95877 253.20001 708.17595 347.33155 531.46949 574.40292\nHseni       79.41836 120.66550 564.64051 354.90063 474.12297 481.88406\nKunlong    295.23103 288.03320 468.27436 595.70536 413.07823 341.68641\nHopang     170.63913 135.62913 573.55355 403.82035 397.85908 451.51070\nNamhkan    173.27153 240.34131 715.42102 295.91660 536.85519 596.19944\nKengtung    59.85893 142.21554 613.01033 295.90429 505.40025 531.35998\nLangkho    115.18145  94.98486 518.86151 402.33622 420.65204 428.08061\nMonghsu    325.71557 216.25326 308.13805 605.02113 311.92379 247.73318\nTaunggyi   195.14541 319.81385 778.45810 150.84117 684.20905 712.80752\nPangwaun   362.45608 232.52209 523.43600 540.60474 264.64997 407.02947\nKyethi     447.10266 358.89620 233.83079 728.87329 374.90376 233.25039\nLoilen     268.92310 207.25000 406.56282 573.75476 354.79137 284.76895\nManton     646.66493 507.96808  59.52318 910.23039 280.26395 181.33894\nMongyang   209.33700 194.93467 585.61776 448.79027 401.39475 445.40621\nKunhing    255.10832 137.85278 403.66587 532.26397 281.62645 292.49814\nMongyawng  172.70139 275.15989 601.80824 432.10118 572.76394 522.91815\nTangyan    429.84475 340.39128 242.78233 719.84066 348.84991 201.49393\nNamhsan    472.04024 364.77086 180.09747 754.03913 316.54695 170.90848\n              Hsipaw  Monghsat   Mongmao   Nansang Laukkaing  Pangsang\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat   121.78922                                                  \nMongmao    185.99483 247.17708                                        \nNansang    120.24428 201.92690 164.99494                              \nLaukkaing  569.06099 626.44910 404.00848 480.60074                    \nPangsang   205.04337 256.37933  57.60801 193.36162 408.04016          \nNamtu      229.44658 231.78673 365.03882 217.61884 664.06286 392.97391\nMonghpyak  237.67919 356.84917 291.88846 227.52638 565.84279 315.11651\nKonkyan    296.74316 268.25060 281.87425 374.70456 635.92043 274.81900\nMongping   168.92101 140.95392 305.57166 287.36626 708.13447 308.33123\nHopong      62.86179 100.45714 244.16253 167.66291 628.48557 261.51075\nNyaungshwe 169.92664 286.37238 230.45003 131.18943 520.24345 257.77823\nHsihseng   136.54610 153.49551 311.98001 193.53779 670.74564 335.52974\nMongla     373.47509 429.00536 216.24705 289.45119 202.55831 217.88123\nHseni      231.48538 331.22632 184.67099 136.45492 391.74585 214.66375\nKunlong    205.10051 202.31862 224.43391 183.01388 521.88657 258.49342\nHopang     248.72536 317.64824  78.29342 196.47091 331.67199  92.57672\nNamhkan    382.79302 455.10875 223.32205 302.89487 196.46063 231.38484\nKengtung   284.08582 383.72138 207.58055 193.67980 351.48520 229.85484\nLangkho    183.05109 279.52329 134.50170  99.39859 410.41270 167.65920\nMonghsu     58.55724 137.24737 242.43599 153.59962 619.01766 260.52971\nTaunggyi   462.31183 562.88102 387.33906 365.04897 345.98041 405.59730\nPangwaun   298.12447 343.53898 187.40057 326.12960 470.63605 157.48757\nKyethi     195.17677 190.50609 377.89657 273.02385 749.99415 396.89963\nLoilen      98.04789 118.65144 190.26490  94.23028 535.57527 207.94433\nManton     359.60008 317.15603 503.79786 476.55544 907.38406 504.75214\nMongyang   267.10497 312.64797  91.06281 218.49285 326.19219 108.37735\nKunhing     90.77517 165.38834 103.91040 128.20940 500.41640 123.18870\nMongyawng  294.70967 364.40429 296.40789 191.11990 454.80044 336.16703\nTangyan    167.69794 144.59626 347.14183 249.70235 722.40954 364.76893\nNamhsan    194.47928 169.56962 371.71448 294.16284 760.45960 385.65526\n               Namtu Monghpyak   Konkyan  Mongping    Hopong Nyaungshwe\nPindaya                                                                \nYwangan                                                                \nPinlaung                                                               \nMabein                                                                 \nKalaw                                                                  \nPekon                                                                  \nLawksawk                                                               \nNawnghkio                                                              \nKyaukme                                                                \nMuse                                                                   \nLaihka                                                                 \nMongnai                                                                \nMawkmai                                                                \nKutkai                                                                 \nMongton                                                                \nMongyai                                                                \nMongkaing                                                              \nLashio                                                                 \nMongpan                                                                \nMatman                                                                 \nTachileik                                                              \nNarphan                                                                \nMongkhet                                                               \nHsipaw                                                                 \nMonghsat                                                               \nMongmao                                                                \nNansang                                                                \nLaukkaing                                                              \nPangsang                                                               \nNamtu                                                                  \nMonghpyak  346.57799                                                   \nKonkyan    478.37690 463.39594                                         \nMongping   321.66441 354.76537 242.02901                               \nHopong     206.82668 267.95563 304.49287 134.00139                     \nNyaungshwe 271.41464 103.97300 432.35040 319.32583 209.32532           \nHsihseng   131.89940 285.37627 383.49700 199.64389  91.65458  225.80242\nMongla     483.49434 408.03397 468.09747 512.61580 432.31105  347.60273\nHseni      327.41448 200.26876 448.84563 395.58453 286.41193  130.86310\nKunlong    233.60474 357.44661 329.11433 309.05385 219.06817  285.13095\nHopang     408.24516 304.26577 348.18522 379.27212 309.77356  247.19891\nNamhkan    506.32466 379.50202 481.59596 523.74815 444.13246  333.32428\nKengtung   385.33554 221.47613 474.82621 442.80821 340.47382  177.75714\nLangkho    305.03473 200.27496 386.95022 343.96455 239.63685  128.26577\nMonghsu    209.64684 232.17823 331.72187 158.90478  43.40665  173.82799\nTaunggyi   518.72748 334.17439 650.56905 621.53039 513.76415  325.09619\nPangwaun   517.03554 381.95144 263.97576 340.37881 346.00673  352.92324\nKyethi     186.90932 328.16234 400.10989 187.43974 136.49038  288.06872\nLoilen     194.24075 296.99681 334.19820 231.99959 124.74445  206.40432\nManton     448.58230 502.20840 366.66876 200.48082 310.58885  488.79874\nMongyang   413.26052 358.17599 329.39338 387.80686 323.35704  294.29500\nKunhing    296.43996 250.74435 253.74202 212.59619 145.15617  189.97131\nMongyawng  262.24331 285.56475 522.38580 455.59190 326.59925  218.12104\nTangyan    178.69483 335.26416 367.46064 161.67411 106.82328  284.14692\nNamhsan    240.95555 352.70492 352.20115 130.23777 132.70541  315.91750\n            Hsihseng    Mongla     Hseni   Kunlong    Hopang   Namhkan\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla     478.66210                                                  \nHseni      312.74375 226.82048                                        \nKunlong    231.85967 346.46200 276.19175                              \nHopang     370.01334 147.02444 162.80878 271.34451                    \nNamhkan    492.09476  77.21355 212.11323 375.73885 146.18632          \nKengtung   370.72441 202.45004  66.12817 317.14187 164.29921 175.63015\nLangkho    276.27441 229.01675  66.66133 224.52741 134.24847 224.40029\nMonghsu     97.82470 424.51868 262.28462 239.89665 301.84458 431.32637\nTaunggyi   528.14240 297.09863 238.19389 471.29032 329.95252 257.29147\nPangwaun   433.06326 319.18643 330.70182 392.45403 206.98364 310.44067\nKyethi      84.04049 556.02500 388.33498 298.55859 440.48114 567.86202\nLoilen     158.84853 338.67408 227.10984 166.53599 242.89326 364.90647\nManton     334.87758 712.51416 584.63341 479.76855 577.52046 721.86149\nMongyang   382.59743 146.66661 210.19929 247.22785  69.25859 167.72448\nKunhing    220.15490 306.47566 206.47448 193.77551 172.96164 314.92119\nMongyawng  309.51462 315.57550 173.86004 240.39800 290.51360 321.21112\nTangyan     70.27241 526.80849 373.07575 268.07983 412.22167 542.64078\nNamhsan    125.74240 564.02740 411.96125 310.40560 440.51555 576.42717\n            Kengtung   Langkho   Monghsu  Taunggyi  Pangwaun    Kyethi\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla                                                                \nHseni                                                                 \nKunlong                                                               \nHopang                                                                \nNamhkan                                                               \nKengtung                                                              \nLangkho    107.16213                                                  \nMonghsu    316.91914 221.84918                                        \nTaunggyi   186.28225 288.27478 486.91951                              \nPangwaun   337.48335 295.38434 343.38498 497.61245                    \nKyethi     444.26274 350.91512 146.61572 599.57407 476.62610          \nLoilen     282.22935 184.10672 131.55208 455.91617 331.69981 232.32965\nManton     631.99123 535.95620 330.76503 803.08034 510.79265 272.03299\nMongyang   217.08047 175.35413 323.95988 374.58247 225.25026 453.86726\nKunhing    245.95083 146.38284 146.78891 429.98509 229.09986 278.95182\nMongyawng  203.87199 186.11584 312.85089 287.73864 475.33116 387.71518\nTangyan    429.95076 332.02048 127.42203 592.65262 447.05580  47.79331\nNamhsan    466.20497 368.20978 153.22576 631.49232 448.58030  68.67929\n              Loilen    Manton  Mongyang   Kunhing Mongyawng   Tangyan\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla                                                                \nHseni                                                                 \nKunlong                                                               \nHopang                                                                \nNamhkan                                                               \nKengtung                                                              \nLangkho                                                               \nMonghsu                                                               \nTaunggyi                                                              \nPangwaun                                                              \nKyethi                                                                \nLoilen                                                                \nManton     419.06087                                                  \nMongyang   246.76592 585.70558                                        \nKunhing    130.39336 410.49230 188.89405                              \nMongyawng  261.75211 629.43339 304.21734 295.35984                    \nTangyan    196.60826 271.82672 421.06366 249.74161 377.52279          \nNamhsan    242.15271 210.48485 450.97869 270.79121 430.02019  63.67613\n\n\n\n\nComputing hierarchical clustering\nThe code chunk below uses hclust() of R stats to perform hierarchical cluster analysis by ward.D method.\n\n\n\nThe code chunk below uses plot() of R Graphics to plot hierarchical tree.\n\n\n\n\n\n\n\nSelecting the optimal clustering algorithm\nThe code chunk below uses agnes() of cluster package to identify stronger clustering structures when performing hierarchical analysis.\n\n\n  average    single  complete      ward \n0.8131144 0.6628705 0.8950702 0.9427730 \n\n\n\n\nDetermining optimal clusters using Gap Statistic Method\nThe code chunk below uses clusGap() of cluster package to compute the gap statistic.\n\n\nClustering Gap statistic [\"clusGap\"] from call:\nclusGap(x = shan_ict, FUNcluster = hcut, K.max = 10, B = 50, nstart = 25)\nB=50 simulated reference sets, k = 1..10; spaceH0=\"scaledPCA\"\n --> Number of clusters (method 'firstmax'): 1\n          logW   E.logW       gap     SE.sim\n [1,] 8.407129 8.680794 0.2736651 0.04460994\n [2,] 8.130029 8.350712 0.2206824 0.03880130\n [3,] 7.992265 8.202550 0.2102844 0.03362652\n [4,] 7.862224 8.080655 0.2184311 0.03784781\n [5,] 7.756461 7.978022 0.2215615 0.03897071\n [6,] 7.665594 7.887777 0.2221833 0.03973087\n [7,] 7.590919 7.806333 0.2154145 0.04054939\n [8,] 7.526680 7.731619 0.2049390 0.04198644\n [9,] 7.458024 7.660795 0.2027705 0.04421874\n[10,] 7.377412 7.593858 0.2164465 0.04540947\n\n\nThe code chunk below uses fviz_gap_stat() of factoextra package to visualize the gap statistic.\n\n\n\n\n\n\n\nInterpreting the dendrograms\nThe code chunk below uses rect.hclust() of R stats to draw the dendrogram with a border around the selected clusters. border argument is used to specify the rectangles’ border colors.\n\n\n\n\n\n\n\nVisually-driven hierarchical clustering analysis\nThe code chunks below performs visually-driven hiearchical clustering analysis.\nThe code chunk below uses data.matrix() to transform shan_ict data frame into data matrix.\n\n\n\nThe code chunk below uses heatmaply() of heatmaply package to build an interactive cluster heatmap.\n\n\n\n\n\n\n\n\nMapping the clusters formed\nThe code chunk below uses cutree() of R Base to derive a 6-cluster model after examining the dendragram above.\n\n\n\nThe code chunk below uses cbind() of mice package to append groups object onto shan_sf simple feature object.\nas,matrix() converts groups into a matrix.\nrename() then renames as.matrix.groups as CLUSTER.\nqtm() of tmap package is used to plot a choropleth map showing the cluster formed."
  },
  {
    "objectID": "In-class_Ex3/In-class_Ex3.html#spatially-constrained-clustering---skater-approach",
    "href": "In-class_Ex3/In-class_Ex3.html#spatially-constrained-clustering---skater-approach",
    "title": "In-class Exercise 3: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "Spatially Constrained Clustering - SKATER approach",
    "text": "Spatially Constrained Clustering - SKATER approach\nIn this section, I learn how to derive spatially constrained cluster.\n\nConverting into SpatialPolygonsDataFrame\nThe code chunk below uses as_Spatial() of sf package to convert shan_sf into a SpatialPolygonDataFrame called shan_sp.\npoly2nd() of spdep package is used to compute the neighbours list from polygon list.\nThe neighbors list on shan_sp is then plotted.\n\n\n\n\n\n\n\nCalculating edge costs\nThe code chunk below usesnbcosts() of spdep package to compute the cost of each edge, which is the distance between nodes.\n\n\n\nThe code chunk below uses nb2listw() of spdep package to convert the neighbour list to a list weights object by specifying the lcosts computed above as the weights. “style” argument is set as “B” to make sure the cost values are not row-standardized.\n\n\n\n\n\nComputing minimum spanning tree\nThe code chunk below uses mstree() of spdep package to compute minimum spanning tree.\nclass() and dim() check the class and dimension of shan.mst.\nhead() displays the content of shan.mst\n\n\n[1] \"mst\"    \"matrix\"\n\n\n[1] 54  3\n\n\n     [,1] [,2]      [,3]\n[1,]   31   25 229.44658\n[2,]   25   10 163.95741\n[3,]   10    1 144.02475\n[4,]   10    9 157.04230\n[5,]    9    8  90.82891\n[6,]    8    6 140.01101\n\n\nThe code chunk below plots the neighbors list on shan_sp and shows the observation number of the nodes.\n\n\n\n\n\n\n\nComputing spatially constrained clusters using SKATER method\nThe code chunk below uses skater() of spdep package to compute the spatially constrained cluster.\nstr() examines the content of clust6.\n\n\nList of 8\n $ groups      : num [1:55] 3 3 6 3 3 3 3 3 3 3 ...\n $ edges.groups:List of 6\n  ..$ :List of 3\n  .. ..$ node: num [1:22] 13 48 54 55 45 37 34 16 25 31 ...\n  .. ..$ edge: num [1:21, 1:3] 48 55 54 37 34 16 45 31 13 13 ...\n  .. ..$ ssw : num 3423\n  ..$ :List of 3\n  .. ..$ node: num [1:18] 47 27 53 38 42 15 41 51 43 32 ...\n  .. ..$ edge: num [1:17, 1:3] 53 15 42 38 41 51 15 27 15 43 ...\n  .. ..$ ssw : num 3759\n  ..$ :List of 3\n  .. ..$ node: num [1:11] 2 6 8 1 36 4 10 9 46 5 ...\n  .. ..$ edge: num [1:10, 1:3] 6 1 8 36 4 6 8 10 10 9 ...\n  .. ..$ ssw : num 1458\n  ..$ :List of 3\n  .. ..$ node: num [1:2] 44 20\n  .. ..$ edge: num [1, 1:3] 44 20 95\n  .. ..$ ssw : num 95\n  ..$ :List of 3\n  .. ..$ node: num 23\n  .. ..$ edge: num[0 , 1:3] \n  .. ..$ ssw : num 0\n  ..$ :List of 3\n  .. ..$ node: num 3\n  .. ..$ edge: num[0 , 1:3] \n  .. ..$ ssw : num 0\n $ not.prune   : NULL\n $ candidates  : int [1:6] 1 2 3 4 5 6\n $ ssto        : num 12613\n $ ssw         : num [1:6] 12613 10977 9962 9540 9123 ...\n $ crit        : num [1:2] 1 Inf\n $ vec.crit    : num [1:55] 1 1 1 1 1 1 1 1 1 1 ...\n - attr(*, \"class\")= chr \"skater\"\n\n\nThe code chunk below checks the cluster assignment.\n\n\n [1] 3 3 6 3 3 3 3 3 3 3 2 1 1 1 2 1 1 1 2 4 1 2 5 1 1 1 2 1 2 2 1 2 2 1 1 3 1 2\n[39] 2 2 2 2 2 4 1 3 2 1 1 1 2 1 2 1 1\n\n\nccs6\n 1  2  3  4  5  6 \n22 18 11  2  1  1 \n\n\nThe code chunk below plots the pruned tree that shows the five clusters on top of the township area.\n\n\n\n\n\n\n\nVisualizing the clusters in choropleth map\nThe code chunk below plots the newly derived clusters by using SKATER method, and shows both the hierarchical clustering and spatially constrained hierarchical clustering maps."
  },
  {
    "objectID": "In-class_Ex3/In-class_Ex3.html#spatially-constrained-clustering-clustergeo-method",
    "href": "In-class_Ex3/In-class_Ex3.html#spatially-constrained-clustering-clustergeo-method",
    "title": "In-class Exercise 3: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "Spatially Constrained Clustering: ClusterGeo Method",
    "text": "Spatially Constrained Clustering: ClusterGeo Method\nIn this section, I learn how to use ClustGeo package to perform non-spatially constrained hierarchical cluster analysis and spatially constrained cluster analysis.\nWard-like hierarchical clustering: ClustGeo\nThe code chunk below uses hclustgeo() of ClustGeo package to perform a typical Ward-like hierarchical clustering.\n\n\n\n\n\nThe code chunk below plots the clusters on a categorical area shaded map.\n\n\n\n\n\ncbind() of mice package is used to append groups object onto shan_sf simple feature object.\nas,matrix() converts groups into a matrix.\nrename() then renames as.matrix.groups as CLUSTER.\nqtm() of tmap package is used to plot a choropleth map showing the cluster formed.\n\nSpatially constrained hierarchical clustering\nThe code chunk below uses st_distance() of sf package to derive a spatial distance matrix.\nas.dist() is used to convert data frame into matrix.\n\n\n\nThe code chunk below uses choicealpha() is used to determine a suitable value for the mixing parameter alpha.\n\n\n\n\n\n\n\n\nThe black color line refers to attribute space, the red color line refers to geographical space\nAt value 0 we don’t look at spatial homogeneity, at value 1 we only care about spatial homogeneity.\nBased on the graphs above, in hclustgeo() alpha is set to 3.\ncutree() is used to derive the cluster object.\ncbind() is used to join back the group list with shan_sf polygon feature data frame.\nqtm() is used to plot the map of the newly delineated spatially constrained clusters."
  },
  {
    "objectID": "Hands-on_Ex4/Hands-on_Ex4.html",
    "href": "Hands-on_Ex4/Hands-on_Ex4.html",
    "title": "Hands-on Exercise 4: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "",
    "text": "In this hands-on exercise, I learn how to use geographically weighted regression (GWR) to build hedonic pricing models."
  },
  {
    "objectID": "Hands-on_Ex4/Hands-on_Ex4.html#getting-started",
    "href": "Hands-on_Ex4/Hands-on_Ex4.html#getting-started",
    "title": "Hands-on Exercise 4: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "Getting Started",
    "text": "Getting Started\nIn this exercise, the following R packages will be used:\n\nsf for importing, managing, and processing geospatial data\nspdep for computing spatial weights, global and local spatial autocorrelation statistics\nrgdal for providing bindings to the ‘Geospatial’ Data Abstraction Library (GDAL) and access to projection operation from the ‘PROJ’ library.\ntidyverse for importing, wrangling, and visualizing data\n\ntidyr for manipulating data\ndplyr for transforming data\nggplot2 for visualizing data\n\ntmap for plotting cartographic quality choropleth map\ncorrplot for providing a visual exploratory tool on correlation matrix that supports automatic variable reordering to help detect hidden patterns among variables\nolsrr for building OLS and performing diagnostics tests\nGWmodel for calibrating geographical weighted family of models\n\nThe code chunk below installs and launch the R packages into R environment.\n\npacman::p_load(olsrr, corrplot, ggpubr, sf, spdep, GWmodel, tmap, tidyverse, gtsummary)"
  },
  {
    "objectID": "Hands-on_Ex4/Hands-on_Ex4.html#importing-data-into-r-environment",
    "href": "Hands-on_Ex4/Hands-on_Ex4.html#importing-data-into-r-environment",
    "title": "Hands-on Exercise 4: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "Importing Data into R environment",
    "text": "Importing Data into R environment\n\nImporting geospatial data into R environment\nThe code chunk below uses st_read() of sf package to import MP14_SUBZONE_WEB_PL shapefile into R and save as simple feature data frame called mpsz.\n\nmpsz = st_read(dsn = \"data/geospatial\",\n               layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `D:\\GuanboShao\\ISSS624\\Hands-on_Ex4\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\n\nUpdating CRS information\nThe code chunk below updates mpsz with correct ESPG code.\nst_transform() of sf package is used to transform original geographic coordinate reference system (CRS) svy21 to EPSG: 3414.\nst_crs() of sf package is used to verify the projection of mpsz_svy21.\n\nmpsz_svy21 <- st_transform(mpsz, 3414)\nst_crs(mpsz_svy21)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nst_bbox() of sf package is used to reveal the extent of mpsz_svy21.\n\nst_bbox(mpsz_svy21)\n\n     xmin      ymin      xmax      ymax \n 2667.538 15748.721 56396.440 50256.334 \n\n\n\n\nImporting aspatial data into R environment\nThe code chunk below uses read_csv() of readr package to import condo_resale_2015 csv file and save in R’s tibble data.frame format called condo_resale.\n\ncondo_resale = read_csv(\"data/aspatial/Condo_resale_2015.csv\")\n\nThe codes chunk below uses glimpse() to display the data structure.\n\nglimpse(condo_resale)\n\nRows: 1,436\nColumns: 23\n$ LATITUDE             <dbl> 1.287145, 1.328698, 1.313727, 1.308563, 1.321437,…\n$ LONGITUDE            <dbl> 103.7802, 103.8123, 103.7971, 103.8247, 103.9505,…\n$ POSTCODE             <dbl> 118635, 288420, 267833, 258380, 467169, 466472, 3…\n$ SELLING_PRICE        <dbl> 3000000, 3880000, 3325000, 4250000, 1400000, 1320…\n$ AREA_SQM             <dbl> 309, 290, 248, 127, 145, 139, 218, 141, 165, 168,…\n$ AGE                  <dbl> 30, 32, 33, 7, 28, 22, 24, 24, 27, 31, 17, 22, 6,…\n$ PROX_CBD             <dbl> 7.941259, 6.609797, 6.898000, 4.038861, 11.783402…\n$ PROX_CHILDCARE       <dbl> 0.16597932, 0.28027246, 0.42922669, 0.39473543, 0…\n$ PROX_ELDERLYCARE     <dbl> 2.5198118, 1.9333338, 0.5021395, 1.9910316, 1.121…\n$ PROX_URA_GROWTH_AREA <dbl> 6.618741, 7.505109, 6.463887, 4.906512, 6.410632,…\n$ PROX_HAWKER_MARKET   <dbl> 1.76542207, 0.54507614, 0.37789301, 1.68259969, 0…\n$ PROX_KINDERGARTEN    <dbl> 0.05835552, 0.61592412, 0.14120309, 0.38200076, 0…\n$ PROX_MRT             <dbl> 0.5607188, 0.6584461, 0.3053433, 0.6910183, 0.528…\n$ PROX_PARK            <dbl> 1.1710446, 0.1992269, 0.2779886, 0.9832843, 0.116…\n$ PROX_PRIMARY_SCH     <dbl> 1.6340256, 0.9747834, 1.4715016, 1.4546324, 0.709…\n$ PROX_TOP_PRIMARY_SCH <dbl> 3.3273195, 0.9747834, 1.4715016, 2.3006394, 0.709…\n$ PROX_SHOPPING_MALL   <dbl> 2.2102717, 2.9374279, 1.2256850, 0.3525671, 1.307…\n$ PROX_SUPERMARKET     <dbl> 0.9103958, 0.5900617, 0.4135583, 0.4162219, 0.581…\n$ PROX_BUS_STOP        <dbl> 0.10336166, 0.28673408, 0.28504777, 0.29872340, 0…\n$ NO_Of_UNITS          <dbl> 18, 20, 27, 30, 30, 31, 32, 32, 32, 32, 34, 34, 3…\n$ FAMILY_FRIENDLY      <dbl> 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0…\n$ FREEHOLD             <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1…\n$ LEASEHOLD_99YR       <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n\n\nThe code chunk below uses summary() to reveal the summary statistics.\n\nsummary(condo_resale)\n\n    LATITUDE       LONGITUDE        POSTCODE      SELLING_PRICE     \n Min.   :1.240   Min.   :103.7   Min.   : 18965   Min.   :  540000  \n 1st Qu.:1.309   1st Qu.:103.8   1st Qu.:259849   1st Qu.: 1100000  \n Median :1.328   Median :103.8   Median :469298   Median : 1383222  \n Mean   :1.334   Mean   :103.8   Mean   :440439   Mean   : 1751211  \n 3rd Qu.:1.357   3rd Qu.:103.9   3rd Qu.:589486   3rd Qu.: 1950000  \n Max.   :1.454   Max.   :104.0   Max.   :828833   Max.   :18000000  \n    AREA_SQM          AGE           PROX_CBD       PROX_CHILDCARE    \n Min.   : 34.0   Min.   : 0.00   Min.   : 0.3869   Min.   :0.004927  \n 1st Qu.:103.0   1st Qu.: 5.00   1st Qu.: 5.5574   1st Qu.:0.174481  \n Median :121.0   Median :11.00   Median : 9.3567   Median :0.258135  \n Mean   :136.5   Mean   :12.14   Mean   : 9.3254   Mean   :0.326313  \n 3rd Qu.:156.0   3rd Qu.:18.00   3rd Qu.:12.6661   3rd Qu.:0.368293  \n Max.   :619.0   Max.   :37.00   Max.   :19.1804   Max.   :3.465726  \n PROX_ELDERLYCARE  PROX_URA_GROWTH_AREA PROX_HAWKER_MARKET PROX_KINDERGARTEN \n Min.   :0.05451   Min.   :0.2145       Min.   :0.05182    Min.   :0.004927  \n 1st Qu.:0.61254   1st Qu.:3.1643       1st Qu.:0.55245    1st Qu.:0.276345  \n Median :0.94179   Median :4.6186       Median :0.90842    Median :0.413385  \n Mean   :1.05351   Mean   :4.5981       Mean   :1.27987    Mean   :0.458903  \n 3rd Qu.:1.35122   3rd Qu.:5.7550       3rd Qu.:1.68578    3rd Qu.:0.578474  \n Max.   :3.94916   Max.   :9.1554       Max.   :5.37435    Max.   :2.229045  \n    PROX_MRT         PROX_PARK       PROX_PRIMARY_SCH  PROX_TOP_PRIMARY_SCH\n Min.   :0.05278   Min.   :0.02906   Min.   :0.07711   Min.   :0.07711     \n 1st Qu.:0.34646   1st Qu.:0.26211   1st Qu.:0.44024   1st Qu.:1.34451     \n Median :0.57430   Median :0.39926   Median :0.63505   Median :1.88213     \n Mean   :0.67316   Mean   :0.49802   Mean   :0.75471   Mean   :2.27347     \n 3rd Qu.:0.84844   3rd Qu.:0.65592   3rd Qu.:0.95104   3rd Qu.:2.90954     \n Max.   :3.48037   Max.   :2.16105   Max.   :3.92899   Max.   :6.74819     \n PROX_SHOPPING_MALL PROX_SUPERMARKET PROX_BUS_STOP       NO_Of_UNITS    \n Min.   :0.0000     Min.   :0.0000   Min.   :0.001595   Min.   :  18.0  \n 1st Qu.:0.5258     1st Qu.:0.3695   1st Qu.:0.098356   1st Qu.: 188.8  \n Median :0.9357     Median :0.5687   Median :0.151710   Median : 360.0  \n Mean   :1.0455     Mean   :0.6141   Mean   :0.193974   Mean   : 409.2  \n 3rd Qu.:1.3994     3rd Qu.:0.7862   3rd Qu.:0.220466   3rd Qu.: 590.0  \n Max.   :3.4774     Max.   :2.2441   Max.   :2.476639   Max.   :1703.0  \n FAMILY_FRIENDLY     FREEHOLD      LEASEHOLD_99YR  \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.0000   1st Qu.:0.0000   1st Qu.:0.0000  \n Median :0.0000   Median :0.0000   Median :0.0000  \n Mean   :0.4868   Mean   :0.4227   Mean   :0.4882  \n 3rd Qu.:1.0000   3rd Qu.:1.0000   3rd Qu.:1.0000  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n\n\n\n\nConverting aspatial data frame into sf object\nThe code chunk below uses st_as_sf() of sf packages to convert condo_resale data frame into a simple feature data frame called condo_resale.sf.\nst_transform() of sf package is used to convert the coordinates from wgs84 to svy21.\n\ncondo_resale.sf <- st_as_sf(condo_resale,\n                            coords = c(\"LONGITUDE\", \"LATITUDE\"),\n                            crs=4326) %>%\n  st_transform(crs=3414)\n\nThe code chunk below uses head() to list the content of condo_resale.sf object.\n\nhead(condo_resale.sf)\n\nSimple feature collection with 6 features and 21 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 22085.12 ymin: 29951.54 xmax: 41042.56 ymax: 34546.2\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 6 × 22\n  POSTCODE SELLI…¹ AREA_…²   AGE PROX_…³ PROX_…⁴ PROX_…⁵ PROX_…⁶ PROX_…⁷ PROX_…⁸\n     <dbl>   <dbl>   <dbl> <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n1   118635 3000000     309    30    7.94   0.166   2.52     6.62   1.77   0.0584\n2   288420 3880000     290    32    6.61   0.280   1.93     7.51   0.545  0.616 \n3   267833 3325000     248    33    6.90   0.429   0.502    6.46   0.378  0.141 \n4   258380 4250000     127     7    4.04   0.395   1.99     4.91   1.68   0.382 \n5   467169 1400000     145    28   11.8    0.119   1.12     6.41   0.565  0.461 \n6   466472 1320000     139    22   10.3    0.125   0.789    5.09   0.781  0.0994\n# … with 12 more variables: PROX_MRT <dbl>, PROX_PARK <dbl>,\n#   PROX_PRIMARY_SCH <dbl>, PROX_TOP_PRIMARY_SCH <dbl>,\n#   PROX_SHOPPING_MALL <dbl>, PROX_SUPERMARKET <dbl>, PROX_BUS_STOP <dbl>,\n#   NO_Of_UNITS <dbl>, FAMILY_FRIENDLY <dbl>, FREEHOLD <dbl>,\n#   LEASEHOLD_99YR <dbl>, geometry <POINT [m]>, and abbreviated variable names\n#   ¹​SELLING_PRICE, ²​AREA_SQM, ³​PROX_CBD, ⁴​PROX_CHILDCARE, ⁵​PROX_ELDERLYCARE,\n#   ⁶​PROX_URA_GROWTH_AREA, ⁷​PROX_HAWKER_MARKET, ⁸​PROX_KINDERGARTEN"
  },
  {
    "objectID": "Hands-on_Ex4/Hands-on_Ex4.html#exploratory-data-analysis-eda",
    "href": "Hands-on_Ex4/Hands-on_Ex4.html#exploratory-data-analysis-eda",
    "title": "Hands-on Exercise 4: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "Exploratory Data Analysis (EDA)",
    "text": "Exploratory Data Analysis (EDA)\nIn this section, I learn how to use statistical graphics functions of ggplot2 package to perform EDA.\n\nEDA using statistical graphics\nThe code chunk below uses geom_histogram() to plot histogram to identify the overall distribution of SELLING_PRICE.\n\nggplot(data=condo_resale.sf, aes(x=`SELLING_PRICE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\n\n\n\nThe code chunk below uses mutate() of dplyr package to derive a new variable called LOG_SELLING_PRICE by using a log transformation on the variable SELLING_PRICE.\n\ncondo_resale.sf <- condo_resale.sf %>%\n  mutate(`LOG_SELLING_PRICE` = log(SELLING_PRICE))\n\nThe code chunk below uses geom_histogram() to plot histogram to identify the overall distribution of LOG_SELLING_PRICE.\n\nggplot(data=condo_resale.sf, aes(x=`LOG_SELLING_PRICE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\n\n\n\n\n\nMultiple histogram plots distribution of variables\nThe code chunk below plots 12 histograms to reveal the distribution of selected variables.\nggarange() of ggpubr package is used to organize the histograms together into 3 columns by 4 rows.\n\nAREA_SQM <- ggplot(data=condo_resale.sf, aes(x= `AREA_SQM`)) + \n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nAGE <- ggplot(data=condo_resale.sf, aes(x= `AGE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_CBD <- ggplot(data=condo_resale.sf, aes(x= `PROX_CBD`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_CHILDCARE <- ggplot(data=condo_resale.sf, aes(x= `PROX_CHILDCARE`)) + \n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_ELDERLYCARE <- ggplot(data=condo_resale.sf, aes(x= `PROX_ELDERLYCARE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_URA_GROWTH_AREA <- ggplot(data=condo_resale.sf, \n                               aes(x= `PROX_URA_GROWTH_AREA`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_HAWKER_MARKET <- ggplot(data=condo_resale.sf, aes(x= `PROX_HAWKER_MARKET`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_KINDERGARTEN <- ggplot(data=condo_resale.sf, aes(x= `PROX_KINDERGARTEN`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_MRT <- ggplot(data=condo_resale.sf, aes(x= `PROX_MRT`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_PARK <- ggplot(data=condo_resale.sf, aes(x= `PROX_PARK`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_PRIMARY_SCH <- ggplot(data=condo_resale.sf, aes(x= `PROX_PRIMARY_SCH`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_TOP_PRIMARY_SCH <- ggplot(data=condo_resale.sf, \n                               aes(x= `PROX_TOP_PRIMARY_SCH`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nggarrange(AREA_SQM, AGE, PROX_CBD, PROX_CHILDCARE, PROX_ELDERLYCARE, \n          PROX_URA_GROWTH_AREA, PROX_HAWKER_MARKET, PROX_KINDERGARTEN, PROX_MRT,\n          PROX_PARK, PROX_PRIMARY_SCH, PROX_TOP_PRIMARY_SCH,  \n          ncol = 3, nrow = 4)\n\n\n\n\n\n\nDrawing statistical point map\nThe code chunk below uses tmap_mode() of tmap package to turn on the interactive mode.\ntmap package is used to reveal the geospatial distribution of SELLING_PRICE.\nset.zoom.limits argument of tm_view() sets the minimum and maximum zoom level to 11 and 14 respectively.\n\ntmap_mode(\"view\")\n\n\ntm_shape(mpsz_svy21)+\n  tmap_options(check.and.fix = TRUE) +\n  tm_polygons() +\ntm_shape(condo_resale.sf) +  \n  tm_dots(col = \"SELLING_PRICE\",\n          alpha = 0.6,\n          style=\"quantile\") +\n  tm_view(set.zoom.limits = c(11,14))\n\n\n\n\n\n\nThe code chunk below changes R display to plot mode.\n\ntmap_mode(\"plot\")"
  },
  {
    "objectID": "Hands-on_Ex4/Hands-on_Ex4.html#hedonic-pricing-modelling-in-r",
    "href": "Hands-on_Ex4/Hands-on_Ex4.html#hedonic-pricing-modelling-in-r",
    "title": "Hands-on Exercise 4: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "Hedonic Pricing Modelling in R",
    "text": "Hedonic Pricing Modelling in R\nIn this section, I learn how to build hedonic pricing models for condominium resale units using lm() of R base.\n\nSimple linear regression method\nThe code chunk below uses lm() of R base to build a simple linear regression model by using SELLING_PRICE as the dependent variable and AREA_SQM as the independent variable.\n\ncondo.slr <- lm(formula=SELLING_PRICE ~ AREA_SQM, data = condo_resale.sf)\n\nThe code chunk below shows the summary of variance table of the results.\n\nsummary(condo.slr)\n\n\nCall:\nlm(formula = SELLING_PRICE ~ AREA_SQM, data = condo_resale.sf)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-3695815  -391764   -87517   258900 13503875 \n\nCoefficients:\n             Estimate Std. Error t value Pr(>|t|)    \n(Intercept) -258121.1    63517.2  -4.064 5.09e-05 ***\nAREA_SQM      14719.0      428.1  34.381  < 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 942700 on 1434 degrees of freedom\nMultiple R-squared:  0.4518,    Adjusted R-squared:  0.4515 \nF-statistic:  1182 on 1 and 1434 DF,  p-value: < 2.2e-16\n\n\nThe formula is y= -258121.1 + 14719x\nThe R-squared = 0.4518 reveals that the simple regression model built is able to explain about 45% of the resale prices.\nSince p-value is much smaller than 0.0001, we will reject the null hypothesis that mean is a good estimator of SELLING_PRICE. This will allow us to infer that simple linear regression model above is a good estimator of SELLING_PRICE.\nThe code chunk below visualize the best fit line curve on a scatterplot.\n\nggplot(data=condo_resale.sf,  \n       aes(x=`AREA_SQM`, y=`SELLING_PRICE`)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\n\n\n\n\n\nMultiple linear regression method\nBefore building a multiple regression model, I must make sure the independent variables are not highly correlated to each other.\n\nVisualizing the relationship of the independent variables\nThe code chunk below uses corrplot package to plot a scatterplot matrix of the relationship between the independent variables in condo_resale data frame.\n\ncorrplot(cor(condo_resale[, 5:23]), diag = FALSE, order = \"AOE\",\n         tl.pos = \"td\", tl.cex = 0.5, method = \"number\", type = \"upper\")\n\n\n\n\nFrom the above matrix, Freehold is highly correlated to LEASE_99YEAR.\n\n\nBuilding a hedonic pricing model using multiple linear regression method\nThe code chunk below uses lm() to calibrate the multiple linear regression model.\n\ncondo.mlr <- lm(formula = SELLING_PRICE ~ AREA_SQM + AGE    + \n                  PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE +\n                  PROX_URA_GROWTH_AREA + PROX_HAWKER_MARKET + PROX_KINDERGARTEN + \n                  PROX_MRT  + PROX_PARK + PROX_PRIMARY_SCH + \n                  PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_SUPERMARKET + \n                  PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                data=condo_resale.sf)\nsummary(condo.mlr)\n\n\nCall:\nlm(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + PROX_CHILDCARE + \n    PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + PROX_HAWKER_MARKET + \n    PROX_KINDERGARTEN + PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + \n    PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_SUPERMARKET + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sf)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-3475964  -293923   -23069   241043 12260381 \n\nCoefficients:\n                       Estimate Std. Error t value Pr(>|t|)    \n(Intercept)           481728.40  121441.01   3.967 7.65e-05 ***\nAREA_SQM               12708.32     369.59  34.385  < 2e-16 ***\nAGE                   -24440.82    2763.16  -8.845  < 2e-16 ***\nPROX_CBD              -78669.78    6768.97 -11.622  < 2e-16 ***\nPROX_CHILDCARE       -351617.91  109467.25  -3.212  0.00135 ** \nPROX_ELDERLYCARE      171029.42   42110.51   4.061 5.14e-05 ***\nPROX_URA_GROWTH_AREA   38474.53   12523.57   3.072  0.00217 ** \nPROX_HAWKER_MARKET     23746.10   29299.76   0.810  0.41782    \nPROX_KINDERGARTEN     147468.99   82668.87   1.784  0.07466 .  \nPROX_MRT             -314599.68   57947.44  -5.429 6.66e-08 ***\nPROX_PARK             563280.50   66551.68   8.464  < 2e-16 ***\nPROX_PRIMARY_SCH      180186.08   65237.95   2.762  0.00582 ** \nPROX_TOP_PRIMARY_SCH    2280.04   20410.43   0.112  0.91107    \nPROX_SHOPPING_MALL   -206604.06   42840.60  -4.823 1.57e-06 ***\nPROX_SUPERMARKET      -44991.80   77082.64  -0.584  0.55953    \nPROX_BUS_STOP         683121.35  138353.28   4.938 8.85e-07 ***\nNO_Of_UNITS             -231.18      89.03  -2.597  0.00951 ** \nFAMILY_FRIENDLY       140340.77   47020.55   2.985  0.00289 ** \nFREEHOLD              359913.01   49220.22   7.312 4.38e-13 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 755800 on 1417 degrees of freedom\nMultiple R-squared:  0.6518,    Adjusted R-squared:  0.6474 \nF-statistic: 147.4 on 18 and 1417 DF,  p-value: < 2.2e-16\n\n\n\n\nPreparing publication quality table using olsrr method\nThe code chunk below uses lm() to calibrate revised multiple linear regression model by removing the independent variables that are not statistically significant.\n\ncondo.mlr1 <- lm(formula = SELLING_PRICE ~ AREA_SQM + AGE + \n                   PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE +\n                   PROX_URA_GROWTH_AREA + PROX_MRT  + PROX_PARK + \n                   PROX_PRIMARY_SCH + PROX_SHOPPING_MALL    + PROX_BUS_STOP + \n                   NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD,\n                 data=condo_resale.sf)\nols_regress(condo.mlr1)\n\n                             Model Summary                               \n------------------------------------------------------------------------\nR                       0.807       RMSE                     755957.289 \nR-Squared               0.651       Coef. Var                    43.168 \nAdj. R-Squared          0.647       MSE                571471422208.591 \nPred R-Squared          0.638       MAE                      414819.628 \n------------------------------------------------------------------------\n RMSE: Root Mean Square Error \n MSE: Mean Square Error \n MAE: Mean Absolute Error \n\n                                     ANOVA                                       \n--------------------------------------------------------------------------------\n                    Sum of                                                      \n                   Squares          DF         Mean Square       F         Sig. \n--------------------------------------------------------------------------------\nRegression    1.512586e+15          14        1.080418e+14    189.059    0.0000 \nResidual      8.120609e+14        1421    571471422208.591                      \nTotal         2.324647e+15        1435                                          \n--------------------------------------------------------------------------------\n\n                                               Parameter Estimates                                                \n-----------------------------------------------------------------------------------------------------------------\n               model           Beta    Std. Error    Std. Beta       t        Sig           lower          upper \n-----------------------------------------------------------------------------------------------------------------\n         (Intercept)     527633.222    108183.223                   4.877    0.000     315417.244     739849.200 \n            AREA_SQM      12777.523       367.479        0.584     34.771    0.000      12056.663      13498.382 \n                 AGE     -24687.739      2754.845       -0.167     -8.962    0.000     -30091.739     -19283.740 \n            PROX_CBD     -77131.323      5763.125       -0.263    -13.384    0.000     -88436.469     -65826.176 \n      PROX_CHILDCARE    -318472.751    107959.512       -0.084     -2.950    0.003    -530249.889    -106695.613 \n    PROX_ELDERLYCARE     185575.623     39901.864        0.090      4.651    0.000     107302.737     263848.510 \nPROX_URA_GROWTH_AREA      39163.254     11754.829        0.060      3.332    0.001      16104.571      62221.936 \n            PROX_MRT    -294745.107     56916.367       -0.112     -5.179    0.000    -406394.234    -183095.980 \n           PROX_PARK     570504.807     65507.029        0.150      8.709    0.000     442003.938     699005.677 \n    PROX_PRIMARY_SCH     159856.136     60234.599        0.062      2.654    0.008      41697.849     278014.424 \n  PROX_SHOPPING_MALL    -220947.251     36561.832       -0.115     -6.043    0.000    -292668.213    -149226.288 \n       PROX_BUS_STOP     682482.221    134513.243        0.134      5.074    0.000     418616.359     946348.082 \n         NO_Of_UNITS       -245.480        87.947       -0.053     -2.791    0.005       -418.000        -72.961 \n     FAMILY_FRIENDLY     146307.576     46893.021        0.057      3.120    0.002      54320.593     238294.560 \n            FREEHOLD     350599.812     48506.485        0.136      7.228    0.000     255447.802     445751.821 \n-----------------------------------------------------------------------------------------------------------------\n\n\n\n\nPreparing publication quality table using gtsummary method\nThe code chunk below uses tbl_regression() of gtsummary package to create a well formatted regression report.\n\ntbl_regression(condo.mlr1, intercept = TRUE)\n\n\n\n\n\n  \n  \n    \n      Characteristic\n      Beta\n      95% CI1\n      p-value\n    \n  \n  \n    (Intercept)\n527,633\n315,417, 739,849\n<0.001\n    AREA_SQM\n12,778\n12,057, 13,498\n<0.001\n    AGE\n-24,688\n-30,092, -19,284\n<0.001\n    PROX_CBD\n-77,131\n-88,436, -65,826\n<0.001\n    PROX_CHILDCARE\n-318,473\n-530,250, -106,696\n0.003\n    PROX_ELDERLYCARE\n185,576\n107,303, 263,849\n<0.001\n    PROX_URA_GROWTH_AREA\n39,163\n16,105, 62,222\n<0.001\n    PROX_MRT\n-294,745\n-406,394, -183,096\n<0.001\n    PROX_PARK\n570,505\n442,004, 699,006\n<0.001\n    PROX_PRIMARY_SCH\n159,856\n41,698, 278,014\n0.008\n    PROX_SHOPPING_MALL\n-220,947\n-292,668, -149,226\n<0.001\n    PROX_BUS_STOP\n682,482\n418,616, 946,348\n<0.001\n    NO_Of_UNITS\n-245\n-418, -73\n0.005\n    FAMILY_FRIENDLY\n146,308\n54,321, 238,295\n0.002\n    FREEHOLD\n350,600\n255,448, 445,752\n<0.001\n  \n  \n  \n    \n      1 CI = Confidence Interval\n    \n  \n\n\n\n\nThe code chunk below uses add_glance_source_note() to add model statistics as a table source note.\n\ntbl_regression(condo.mlr1, \n               intercept = TRUE) %>% \n  add_glance_source_note(\n    label = list(sigma ~ \"\\U03C3\"),\n    include = c(r.squared, adj.r.squared, \n                AIC, statistic,\n                p.value, sigma))\n\n\n\n\n\n  \n  \n    \n      Characteristic\n      Beta\n      95% CI1\n      p-value\n    \n  \n  \n    (Intercept)\n527,633\n315,417, 739,849\n<0.001\n    AREA_SQM\n12,778\n12,057, 13,498\n<0.001\n    AGE\n-24,688\n-30,092, -19,284\n<0.001\n    PROX_CBD\n-77,131\n-88,436, -65,826\n<0.001\n    PROX_CHILDCARE\n-318,473\n-530,250, -106,696\n0.003\n    PROX_ELDERLYCARE\n185,576\n107,303, 263,849\n<0.001\n    PROX_URA_GROWTH_AREA\n39,163\n16,105, 62,222\n<0.001\n    PROX_MRT\n-294,745\n-406,394, -183,096\n<0.001\n    PROX_PARK\n570,505\n442,004, 699,006\n<0.001\n    PROX_PRIMARY_SCH\n159,856\n41,698, 278,014\n0.008\n    PROX_SHOPPING_MALL\n-220,947\n-292,668, -149,226\n<0.001\n    PROX_BUS_STOP\n682,482\n418,616, 946,348\n<0.001\n    NO_Of_UNITS\n-245\n-418, -73\n0.005\n    FAMILY_FRIENDLY\n146,308\n54,321, 238,295\n0.002\n    FREEHOLD\n350,600\n255,448, 445,752\n<0.001\n  \n  \n    \n      R² = 0.651; Adjusted R² = 0.647; AIC = 42,967; Statistic = 189; p-value = <0.001; σ = 755,957\n    \n  \n  \n    \n      1 CI = Confidence Interval\n    \n  \n\n\n\n\n\n\nChecking for multicollinearity\nThe code chunk below uses ols_vif_tol() of olsrr package to test if there is sign of multicollinearity.\n\nols_vif_tol(condo.mlr1)\n\n              Variables Tolerance      VIF\n1              AREA_SQM 0.8728554 1.145665\n2                   AGE 0.7071275 1.414172\n3              PROX_CBD 0.6356147 1.573280\n4        PROX_CHILDCARE 0.3066019 3.261559\n5      PROX_ELDERLYCARE 0.6598479 1.515501\n6  PROX_URA_GROWTH_AREA 0.7510311 1.331503\n7              PROX_MRT 0.5236090 1.909822\n8             PROX_PARK 0.8279261 1.207837\n9      PROX_PRIMARY_SCH 0.4524628 2.210126\n10   PROX_SHOPPING_MALL 0.6738795 1.483945\n11        PROX_BUS_STOP 0.3514118 2.845664\n12          NO_Of_UNITS 0.6901036 1.449058\n13      FAMILY_FRIENDLY 0.7244157 1.380423\n14             FREEHOLD 0.6931163 1.442759\n\n\nSince the VIF of the independent variables are less than 10. We can safely conclude that there are no sign of multicollinearity among the independent variables.\n\n\nTest for non-linearity\nThe code chunk below uses ols_plot_resid_fit() of olsrr package to perform linearity assumption test.\n\nols_plot_resid_fit(condo.mlr1)\n\n\n\n\nThe figure above reveals that most of the data poitns are scattered around the 0 line, hence we can safely conclude that the relationships between the dependent variable and independent variables are linear.\n\n\nTest for normality assumption\nThe code chunk below uses ols_plot_resid_hist() of olsrr package to perform normality assumption test.\n\nols_plot_resid_hist(condo.mlr1)\n\n\n\n\nThe figure reveals that the residual of the multiple linear regression model (i.e. condo.mlr1) is resemble normal distribution.\nThe code chunk below uses ols_test_normality() of olsrr package to perform statistical test.\n\nols_test_normality(condo.mlr1)\n\n-----------------------------------------------\n       Test             Statistic       pvalue  \n-----------------------------------------------\nShapiro-Wilk              0.6856         0.0000 \nKolmogorov-Smirnov        0.1366         0.0000 \nCramer-von Mises         121.0768        0.0000 \nAnderson-Darling         67.9551         0.0000 \n-----------------------------------------------\n\n\nThe summary table above reveals that the p-values of the four tests are way smaller than the alpha value of 0.05. Hence we will reject the null hypothesis and infer that there is statistical evidence that the residual are not normally distributed.\n\n\nTest for spatial autocorrelation\nThe code chunk below exports the residual of the hedonic pricing model and save it as a data frame.\n\nmlr.output <- as.data.frame(condo.mlr1$residuals)\n\nThe code chunk below joins the above data frame with condo_resale.sf object.\n\ncondo_resale.res.sf <- cbind(condo_resale.sf, \n                        condo.mlr1$residuals) %>%\nrename(`MLR_RES` = `condo.mlr1.residuals`)\n\nThe code chunk below converts condo_resale.res.sf from simple feature object into a spatial points data frame because spdep package can only process sp conformed spatial data objects.\n\ncondo_resale.sp <- as_Spatial(condo_resale.res.sf)\ncondo_resale.sp\n\nclass       : SpatialPointsDataFrame \nfeatures    : 1436 \nextent      : 14940.85, 43352.45, 24765.67, 48382.81  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 23\nnames       : POSTCODE, SELLING_PRICE, AREA_SQM, AGE,    PROX_CBD, PROX_CHILDCARE, PROX_ELDERLYCARE, PROX_URA_GROWTH_AREA, PROX_HAWKER_MARKET, PROX_KINDERGARTEN,    PROX_MRT,   PROX_PARK, PROX_PRIMARY_SCH, PROX_TOP_PRIMARY_SCH, PROX_SHOPPING_MALL, ... \nmin values  :    18965,        540000,       34,   0, 0.386916393,    0.004927023,      0.054508623,          0.214539508,        0.051817113,       0.004927023, 0.052779424, 0.029064164,      0.077106132,          0.077106132,                  0, ... \nmax values  :   828833,       1.8e+07,      619,  37, 19.18042832,     3.46572633,      3.949157205,           9.15540001,        5.374348075,       2.229045366,  3.48037319,  2.16104919,      3.928989144,          6.748192062,        3.477433767, ... \n\n\nThe code chunk below uses tmap package to display the distribution of the residuals on an interactive map.\n\ntmap_mode(\"view\")\n\ntm_shape(mpsz_svy21)+\n  tmap_options(check.and.fix = TRUE) +\n  tm_polygons(alpha = 0.4) +\ntm_shape(condo_resale.res.sf) +  \n  tm_dots(col = \"MLR_RES\",\n          alpha = 0.6,\n          style=\"quantile\") +\n  tm_view(set.zoom.limits = c(11,14))\n\n\n\n\n\n\nThe code chunk below changes R display to plot mode.\n\ntmap_mode(\"plot\")\n\nThe figure above reveal that there is sign of spatial autocorrelation. We use Moran’s I test to proof the observation.\nThe code chunk below uses dnearneigh() of spdep package to compute the distance-based weight matrix.\n\nnb <- dnearneigh(coordinates(condo_resale.sp), 0, 1500, longlat = FALSE)\nsummary(nb)\n\nNeighbour list object:\nNumber of regions: 1436 \nNumber of nonzero links: 66266 \nPercentage nonzero weights: 3.213526 \nAverage number of links: 46.14624 \nLink number distribution:\n\n  1   3   5   7   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24 \n  3   3   9   4   3  15  10  19  17  45  19   5  14  29  19   6  35  45  18  47 \n 25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44 \n 16  43  22  26  21  11   9  23  22  13  16  25  21  37  16  18   8  21   4  12 \n 45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64 \n  8  36  18  14  14  43  11  12   8  13  12  13   4   5   6  12  11  20  29  33 \n 65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84 \n 15  20  10  14  15  15  11  16  12  10   8  19  12  14   9   8   4  13  11   6 \n 85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 \n  4   9   4   4   4   6   2  16   9   4   5   9   3   9   4   2   1   2   1   1 \n105 106 107 108 109 110 112 116 125 \n  1   5   9   2   1   3   1   1   1 \n3 least connected regions:\n193 194 277 with 1 link\n1 most connected region:\n285 with 125 links\n\n\nThe code chunk below uses nb2listw() of spdep package to convert the output neighbor lists into a spatial weights.\n\nnb_lw <- nb2listw(nb, style = 'W')\nsummary(nb_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 1436 \nNumber of nonzero links: 66266 \nPercentage nonzero weights: 3.213526 \nAverage number of links: 46.14624 \nLink number distribution:\n\n  1   3   5   7   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24 \n  3   3   9   4   3  15  10  19  17  45  19   5  14  29  19   6  35  45  18  47 \n 25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44 \n 16  43  22  26  21  11   9  23  22  13  16  25  21  37  16  18   8  21   4  12 \n 45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64 \n  8  36  18  14  14  43  11  12   8  13  12  13   4   5   6  12  11  20  29  33 \n 65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84 \n 15  20  10  14  15  15  11  16  12  10   8  19  12  14   9   8   4  13  11   6 \n 85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 \n  4   9   4   4   4   6   2  16   9   4   5   9   3   9   4   2   1   2   1   1 \n105 106 107 108 109 110 112 116 125 \n  1   5   9   2   1   3   1   1   1 \n3 least connected regions:\n193 194 277 with 1 link\n1 most connected region:\n285 with 125 links\n\nWeights style: W \nWeights constants summary:\n     n      nn   S0       S1       S2\nW 1436 2062096 1436 94.81916 5798.341\n\n\nThe code chunk below uses lm.morantest() of spdep package to perform Moran’s I test for residual spatial autocorrelation.\n\nlm.morantest(condo.mlr1, nb_lw)\n\n\n    Global Moran I for regression residuals\n\ndata:  \nmodel: lm(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD +\nPROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + PROX_MRT +\nPROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_BUS_STOP +\nNO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, data = condo_resale.sf)\nweights: nb_lw\n\nMoran I statistic standard deviate = 24.366, p-value < 2.2e-16\nalternative hypothesis: greater\nsample estimates:\nObserved Moran I      Expectation         Variance \n    1.438876e-01    -5.487594e-03     3.758259e-05 \n\n\nThe Global Moran’s I test for residual spatial autocorrelation shows that it’s p-value is less than the alpha value of 0.05. Hence, we will reject the null hypothesis that the residuals are randomly distributed.\nSince the Observed Global Moran I = 0.1424418 which is greater than 0, we can infer that the residuals resemble cluster distribution."
  },
  {
    "objectID": "Hands-on_Ex4/Hands-on_Ex4.html#building-hedonic-pricing-models-using-gwmodel",
    "href": "Hands-on_Ex4/Hands-on_Ex4.html#building-hedonic-pricing-models-using-gwmodel",
    "title": "Hands-on Exercise 4: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "Building Hedonic Pricing Models using GWModel",
    "text": "Building Hedonic Pricing Models using GWModel\nIn this section, I learn how to model hedonic pricing using both the fixed and adaptive bandwidth schemes.\n\nBuilding fixed bandwidth GWR model\n\nComputing fixed bandwidth\nThe code chunk below uses bw.gwr() of GWModel package to determine the optimal fixed bandwidth. Notice that the argument adaptive is set to FALSE indicates that we are interested to compute the fixed bandwidth.\n\nbw.fixed <- bw.gwr(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n                     PROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + \n                     PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + \n                     PROX_SHOPPING_MALL + PROX_BUS_STOP + NO_Of_UNITS + \n                     FAMILY_FRIENDLY + FREEHOLD, \n                   data=condo_resale.sp, \n                   approach=\"CV\", \n                   kernel=\"gaussian\", \n                   adaptive=FALSE, \n                   longlat=FALSE)\n\nFixed bandwidth: 17660.96 CV score: 8.259118e+14 \nFixed bandwidth: 10917.26 CV score: 7.970454e+14 \nFixed bandwidth: 6749.419 CV score: 7.273273e+14 \nFixed bandwidth: 4173.553 CV score: 6.300006e+14 \nFixed bandwidth: 2581.58 CV score: 5.404958e+14 \nFixed bandwidth: 1597.687 CV score: 4.857515e+14 \nFixed bandwidth: 989.6077 CV score: 4.722431e+14 \nFixed bandwidth: 613.7939 CV score: 1.378294e+16 \nFixed bandwidth: 1221.873 CV score: 4.778717e+14 \nFixed bandwidth: 846.0596 CV score: 4.791629e+14 \nFixed bandwidth: 1078.325 CV score: 4.751406e+14 \nFixed bandwidth: 934.7772 CV score: 4.72518e+14 \nFixed bandwidth: 1023.495 CV score: 4.730305e+14 \nFixed bandwidth: 968.6643 CV score: 4.721317e+14 \nFixed bandwidth: 955.7206 CV score: 4.722072e+14 \nFixed bandwidth: 976.6639 CV score: 4.721387e+14 \nFixed bandwidth: 963.7202 CV score: 4.721484e+14 \nFixed bandwidth: 971.7199 CV score: 4.721293e+14 \nFixed bandwidth: 973.6083 CV score: 4.721309e+14 \nFixed bandwidth: 970.5527 CV score: 4.721295e+14 \nFixed bandwidth: 972.4412 CV score: 4.721296e+14 \nFixed bandwidth: 971.2741 CV score: 4.721292e+14 \nFixed bandwidth: 970.9985 CV score: 4.721293e+14 \nFixed bandwidth: 971.4443 CV score: 4.721292e+14 \nFixed bandwidth: 971.5496 CV score: 4.721293e+14 \nFixed bandwidth: 971.3793 CV score: 4.721292e+14 \nFixed bandwidth: 971.3391 CV score: 4.721292e+14 \nFixed bandwidth: 971.3143 CV score: 4.721292e+14 \nFixed bandwidth: 971.3545 CV score: 4.721292e+14 \nFixed bandwidth: 971.3296 CV score: 4.721292e+14 \nFixed bandwidth: 971.345 CV score: 4.721292e+14 \nFixed bandwidth: 971.3355 CV score: 4.721292e+14 \nFixed bandwidth: 971.3413 CV score: 4.721292e+14 \nFixed bandwidth: 971.3377 CV score: 4.721292e+14 \nFixed bandwidth: 971.34 CV score: 4.721292e+14 \nFixed bandwidth: 971.3405 CV score: 4.721292e+14 \nFixed bandwidth: 971.3408 CV score: 4.721292e+14 \nFixed bandwidth: 971.3403 CV score: 4.721292e+14 \nFixed bandwidth: 971.3406 CV score: 4.721292e+14 \nFixed bandwidth: 971.3404 CV score: 4.721292e+14 \nFixed bandwidth: 971.3405 CV score: 4.721292e+14 \nFixed bandwidth: 971.3405 CV score: 4.721292e+14 \n\n\nThe result shows that the recommended bandwidth is 971.3405 meters.\n\n\nGWModel method using fixed bandwidth\nThe code chunk below uses gwr.basic() of GWModel package to calibrate the GWR model using fixed bandwidth and Gaussian kernel.\n\ngwr.fixed <- gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n                         PROX_CHILDCARE + PROX_ELDERLYCARE +\n                         PROX_URA_GROWTH_AREA + PROX_MRT + PROX_PARK +\n                         PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_BUS_STOP +\n                         NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                       data=condo_resale.sp, \n                       bw=bw.fixed, \n                       kernel = 'gaussian', \n                       longlat = FALSE)\ngwr.fixed\n\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2022-12-10 11:40:34 \n   Call:\n   gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n    PROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + \n    PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sp, bw = bw.fixed, kernel = \"gaussian\", \n    longlat = FALSE)\n\n   Dependent (y) variable:  SELLING_PRICE\n   Independent variables:  AREA_SQM AGE PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE PROX_URA_GROWTH_AREA PROX_MRT PROX_PARK PROX_PRIMARY_SCH PROX_SHOPPING_MALL PROX_BUS_STOP NO_Of_UNITS FAMILY_FRIENDLY FREEHOLD\n   Number of data points: 1436\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n     Min       1Q   Median       3Q      Max \n-3470778  -298119   -23481   248917 12234210 \n\n   Coefficients:\n                          Estimate Std. Error t value Pr(>|t|)    \n   (Intercept)           527633.22  108183.22   4.877 1.20e-06 ***\n   AREA_SQM               12777.52     367.48  34.771  < 2e-16 ***\n   AGE                   -24687.74    2754.84  -8.962  < 2e-16 ***\n   PROX_CBD              -77131.32    5763.12 -13.384  < 2e-16 ***\n   PROX_CHILDCARE       -318472.75  107959.51  -2.950 0.003231 ** \n   PROX_ELDERLYCARE      185575.62   39901.86   4.651 3.61e-06 ***\n   PROX_URA_GROWTH_AREA   39163.25   11754.83   3.332 0.000885 ***\n   PROX_MRT             -294745.11   56916.37  -5.179 2.56e-07 ***\n   PROX_PARK             570504.81   65507.03   8.709  < 2e-16 ***\n   PROX_PRIMARY_SCH      159856.14   60234.60   2.654 0.008046 ** \n   PROX_SHOPPING_MALL   -220947.25   36561.83  -6.043 1.93e-09 ***\n   PROX_BUS_STOP         682482.22  134513.24   5.074 4.42e-07 ***\n   NO_Of_UNITS             -245.48      87.95  -2.791 0.005321 ** \n   FAMILY_FRIENDLY       146307.58   46893.02   3.120 0.001845 ** \n   FREEHOLD              350599.81   48506.48   7.228 7.98e-13 ***\n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 756000 on 1421 degrees of freedom\n   Multiple R-squared: 0.6507\n   Adjusted R-squared: 0.6472 \n   F-statistic: 189.1 on 14 and 1421 DF,  p-value: < 2.2e-16 \n   ***Extra Diagnostic information\n   Residual sum of squares: 8.120609e+14\n   Sigma(hat): 752522.9\n   AIC:  42966.76\n   AICc:  42967.14\n   BIC:  41731.39\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Fixed bandwidth: 971.3405 \n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                               Min.     1st Qu.      Median     3rd Qu.\n   Intercept            -3.5988e+07 -5.1998e+05  7.6780e+05  1.7412e+06\n   AREA_SQM              1.0003e+03  5.2758e+03  7.4740e+03  1.2301e+04\n   AGE                  -1.3475e+05 -2.0813e+04 -8.6260e+03 -3.7784e+03\n   PROX_CBD             -7.7047e+07 -2.3608e+05 -8.3600e+04  3.4646e+04\n   PROX_CHILDCARE       -6.0097e+06 -3.3667e+05 -9.7425e+04  2.9007e+05\n   PROX_ELDERLYCARE     -3.5000e+06 -1.5970e+05  3.1971e+04  1.9577e+05\n   PROX_URA_GROWTH_AREA -3.0170e+06 -8.2013e+04  7.0749e+04  2.2612e+05\n   PROX_MRT             -3.5282e+06 -6.5836e+05 -1.8833e+05  3.6922e+04\n   PROX_PARK            -1.2062e+06 -2.1732e+05  3.5383e+04  4.1335e+05\n   PROX_PRIMARY_SCH     -2.2695e+07 -1.7066e+05  4.8472e+04  5.1555e+05\n   PROX_SHOPPING_MALL   -7.2585e+06 -1.6684e+05 -1.0517e+04  1.5923e+05\n   PROX_BUS_STOP        -1.4676e+06 -4.5207e+04  3.7601e+05  1.1664e+06\n   NO_Of_UNITS          -1.3170e+03 -2.4822e+02 -3.0846e+01  2.5496e+02\n   FAMILY_FRIENDLY      -2.2749e+06 -1.1140e+05  7.6214e+03  1.6107e+05\n   FREEHOLD             -9.2067e+06  3.8073e+04  1.5169e+05  3.7528e+05\n                             Max.\n   Intercept            112793548\n   AREA_SQM                 21575\n   AGE                     434201\n   PROX_CBD               2704596\n   PROX_CHILDCARE         1654087\n   PROX_ELDERLYCARE      38867814\n   PROX_URA_GROWTH_AREA  78515730\n   PROX_MRT               3124316\n   PROX_PARK             18122425\n   PROX_PRIMARY_SCH       4637503\n   PROX_SHOPPING_MALL     1529952\n   PROX_BUS_STOP         11342182\n   NO_Of_UNITS              12907\n   FAMILY_FRIENDLY        1720744\n   FREEHOLD               6073636\n   ************************Diagnostic information*************************\n   Number of data points: 1436 \n   Effective number of parameters (2trace(S) - trace(S'S)): 438.3804 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 997.6196 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 42263.61 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 41632.36 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 42515.71 \n   Residual sum of squares: 2.53407e+14 \n   R-square value:  0.8909912 \n   Adjusted R-square value:  0.8430417 \n\n   ***********************************************************************\n   Program stops at: 2022-12-10 11:40:35 \n\n\nThe report shows that the adjusted R-square of the GWR is 0.8430 which is significantly better than the globel multiple linear regression model of 0.6472.\n\n\n\nBuilding adaptive bandwidth GWR model\n\nComputing adaptive bandwidth\nThe code chunk below uses bw.gwr() of GWModel package to determine the optimal adaptive bandwidth. Notice that the argument adaptive is set to TRUE indicates that we are interested to compute the adaptive bandwidth.\n\nbw.adaptive <- bw.gwr(formula = SELLING_PRICE ~ AREA_SQM + AGE  + \n                        PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE + \n                        PROX_URA_GROWTH_AREA + PROX_MRT + PROX_PARK + \n                        PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_BUS_STOP +\n                        NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                      data=condo_resale.sp, \n                      approach=\"CV\", \n                      kernel=\"gaussian\", \n                      adaptive=TRUE, \n                      longlat=FALSE)\n\nAdaptive bandwidth: 895 CV score: 7.952401e+14 \nAdaptive bandwidth: 561 CV score: 7.667364e+14 \nAdaptive bandwidth: 354 CV score: 6.953454e+14 \nAdaptive bandwidth: 226 CV score: 6.15223e+14 \nAdaptive bandwidth: 147 CV score: 5.674373e+14 \nAdaptive bandwidth: 98 CV score: 5.426745e+14 \nAdaptive bandwidth: 68 CV score: 5.168117e+14 \nAdaptive bandwidth: 49 CV score: 4.859631e+14 \nAdaptive bandwidth: 37 CV score: 4.646518e+14 \nAdaptive bandwidth: 30 CV score: 4.422088e+14 \nAdaptive bandwidth: 25 CV score: 4.430816e+14 \nAdaptive bandwidth: 32 CV score: 4.505602e+14 \nAdaptive bandwidth: 27 CV score: 4.462172e+14 \nAdaptive bandwidth: 30 CV score: 4.422088e+14 \n\n\nThe result shows that the 30 is the recommended data points to be used.\n\n\nGWModel method using adaptive bandwidth\nThe code chunk below uses gwr.basic() of GWModel package to calibrate the GWR model using adaptive bandwidth and Gaussian kernel.\n\ngwr.adaptive <- gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + \n                            PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE + \n                            PROX_URA_GROWTH_AREA + PROX_MRT + PROX_PARK + \n                            PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_BUS_STOP +\n                            NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                          data=condo_resale.sp, bw=bw.adaptive, \n                          kernel = 'gaussian', \n                          adaptive=TRUE, \n                          longlat = FALSE)\ngwr.adaptive\n\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2022-12-10 11:40:44 \n   Call:\n   gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n    PROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + \n    PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sp, bw = bw.adaptive, kernel = \"gaussian\", \n    adaptive = TRUE, longlat = FALSE)\n\n   Dependent (y) variable:  SELLING_PRICE\n   Independent variables:  AREA_SQM AGE PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE PROX_URA_GROWTH_AREA PROX_MRT PROX_PARK PROX_PRIMARY_SCH PROX_SHOPPING_MALL PROX_BUS_STOP NO_Of_UNITS FAMILY_FRIENDLY FREEHOLD\n   Number of data points: 1436\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n     Min       1Q   Median       3Q      Max \n-3470778  -298119   -23481   248917 12234210 \n\n   Coefficients:\n                          Estimate Std. Error t value Pr(>|t|)    \n   (Intercept)           527633.22  108183.22   4.877 1.20e-06 ***\n   AREA_SQM               12777.52     367.48  34.771  < 2e-16 ***\n   AGE                   -24687.74    2754.84  -8.962  < 2e-16 ***\n   PROX_CBD              -77131.32    5763.12 -13.384  < 2e-16 ***\n   PROX_CHILDCARE       -318472.75  107959.51  -2.950 0.003231 ** \n   PROX_ELDERLYCARE      185575.62   39901.86   4.651 3.61e-06 ***\n   PROX_URA_GROWTH_AREA   39163.25   11754.83   3.332 0.000885 ***\n   PROX_MRT             -294745.11   56916.37  -5.179 2.56e-07 ***\n   PROX_PARK             570504.81   65507.03   8.709  < 2e-16 ***\n   PROX_PRIMARY_SCH      159856.14   60234.60   2.654 0.008046 ** \n   PROX_SHOPPING_MALL   -220947.25   36561.83  -6.043 1.93e-09 ***\n   PROX_BUS_STOP         682482.22  134513.24   5.074 4.42e-07 ***\n   NO_Of_UNITS             -245.48      87.95  -2.791 0.005321 ** \n   FAMILY_FRIENDLY       146307.58   46893.02   3.120 0.001845 ** \n   FREEHOLD              350599.81   48506.48   7.228 7.98e-13 ***\n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 756000 on 1421 degrees of freedom\n   Multiple R-squared: 0.6507\n   Adjusted R-squared: 0.6472 \n   F-statistic: 189.1 on 14 and 1421 DF,  p-value: < 2.2e-16 \n   ***Extra Diagnostic information\n   Residual sum of squares: 8.120609e+14\n   Sigma(hat): 752522.9\n   AIC:  42966.76\n   AICc:  42967.14\n   BIC:  41731.39\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Adaptive bandwidth: 30 (number of nearest neighbours)\n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                               Min.     1st Qu.      Median     3rd Qu.\n   Intercept            -1.3487e+08 -2.4669e+05  7.7928e+05  1.6194e+06\n   AREA_SQM              3.3188e+03  5.6285e+03  7.7825e+03  1.2738e+04\n   AGE                  -9.6746e+04 -2.9288e+04 -1.4043e+04 -5.6119e+03\n   PROX_CBD             -2.5330e+06 -1.6256e+05 -7.7242e+04  2.6624e+03\n   PROX_CHILDCARE       -1.2790e+06 -2.0175e+05  8.7158e+03  3.7778e+05\n   PROX_ELDERLYCARE     -1.6212e+06 -9.2050e+04  6.1029e+04  2.8184e+05\n   PROX_URA_GROWTH_AREA -7.2686e+06 -3.0350e+04  4.5869e+04  2.4613e+05\n   PROX_MRT             -4.3781e+07 -6.7282e+05 -2.2115e+05 -7.4593e+04\n   PROX_PARK            -2.9020e+06 -1.6782e+05  1.1601e+05  4.6572e+05\n   PROX_PRIMARY_SCH     -8.6418e+05 -1.6627e+05 -7.7853e+03  4.3222e+05\n   PROX_SHOPPING_MALL   -1.8272e+06 -1.3175e+05 -1.4049e+04  1.3799e+05\n   PROX_BUS_STOP        -2.0579e+06 -7.1461e+04  4.1104e+05  1.2071e+06\n   NO_Of_UNITS          -2.1993e+03 -2.3685e+02 -3.4699e+01  1.1657e+02\n   FAMILY_FRIENDLY      -5.9879e+05 -5.0927e+04  2.6173e+04  2.2481e+05\n   FREEHOLD             -1.6340e+05  4.0765e+04  1.9023e+05  3.7960e+05\n                            Max.\n   Intercept            18758355\n   AREA_SQM                23064\n   AGE                     13303\n   PROX_CBD             11346650\n   PROX_CHILDCARE        2892127\n   PROX_ELDERLYCARE      2465671\n   PROX_URA_GROWTH_AREA  7384059\n   PROX_MRT              1186242\n   PROX_PARK             2588497\n   PROX_PRIMARY_SCH      3381462\n   PROX_SHOPPING_MALL   38038564\n   PROX_BUS_STOP        12081592\n   NO_Of_UNITS              1010\n   FAMILY_FRIENDLY       2072414\n   FREEHOLD              1813995\n   ************************Diagnostic information*************************\n   Number of data points: 1436 \n   Effective number of parameters (2trace(S) - trace(S'S)): 350.3088 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 1085.691 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 41982.22 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 41546.74 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 41914.08 \n   Residual sum of squares: 2.528227e+14 \n   R-square value:  0.8912425 \n   Adjusted R-square value:  0.8561185 \n\n   ***********************************************************************\n   Program stops at: 2022-12-10 11:40:45 \n\n\nThe report shows that the adjusted R-square of the GWR is 0.8561 which is significantly better than the global multiple linear regression model of 0.6472.\n\n\n\nVisualizing GWR output\n\nConverting SDF into sf data frame\nThe code chunk below converts SDF to sf data frame to visualize the fields in SDF.\n\ncondo_resale.sf.adaptive <- st_as_sf(gwr.adaptive$SDF) %>%\n  st_transform(crs=3414)\n\n\n# condo_resale.sf.adaptive.svy21 <- st_transform(condo_resale.sf.adaptive, 3414)\n# condo_resale.sf.adaptive.svy21  \n\n\n# gwr.adaptive.output <- as.data.frame(gwr.adaptive$SDF)\n# condo_resale.sf.adaptive <- cbind(condo_resale.res.sf, as.matrix(gwr.adaptive.output))\n\nThe code chunk below uses glimpse() and summary() to display the content and summary of condo_resale.sf.adaptive sf data frame.\n\nglimpse(condo_resale.sf.adaptive)\n\nRows: 1,436\nColumns: 52\n$ Intercept               <dbl> 2050011.67, 1633128.24, 3433608.17, 234358.91,…\n$ AREA_SQM                <dbl> 9561.892, 16576.853, 13091.861, 20730.601, 672…\n$ AGE                     <dbl> -9514.634, -58185.479, -26707.386, -93308.988,…\n$ PROX_CBD                <dbl> -120681.94, -149434.22, -259397.77, 2426853.66…\n$ PROX_CHILDCARE          <dbl> 319266.925, 441102.177, -120116.816, 480825.28…\n$ PROX_ELDERLYCARE        <dbl> -393417.795, 325188.741, 535855.806, 314783.72…\n$ PROX_URA_GROWTH_AREA    <dbl> -159980.203, -142290.389, -253621.206, -267929…\n$ PROX_MRT                <dbl> -299742.96, -2510522.23, -936853.28, -2039479.…\n$ PROX_PARK               <dbl> -172104.47, 523379.72, 209099.85, -759153.26, …\n$ PROX_PRIMARY_SCH        <dbl> 242668.03, 1106830.66, 571462.33, 3127477.21, …\n$ PROX_SHOPPING_MALL      <dbl> 300881.390, -87693.378, -126732.712, -29593.34…\n$ PROX_BUS_STOP           <dbl> 1210615.44, 1843587.22, 1411924.90, 7225577.51…\n$ NO_Of_UNITS             <dbl> 104.8290640, -288.3441183, -9.5532945, -161.35…\n$ FAMILY_FRIENDLY         <dbl> -9075.370, 310074.664, 5949.746, 1556178.531, …\n$ FREEHOLD                <dbl> 303955.61, 396221.27, 168821.75, 1212515.58, 3…\n$ y                       <dbl> 3000000, 3880000, 3325000, 4250000, 1400000, 1…\n$ yhat                    <dbl> 2886531.8, 3466801.5, 3616527.2, 5435481.6, 13…\n$ residual                <dbl> 113468.16, 413198.52, -291527.20, -1185481.63,…\n$ CV_Score                <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ Stud_residual           <dbl> 0.38207013, 1.01433140, -0.83780678, -2.846146…\n$ Intercept_SE            <dbl> 516105.5, 488083.5, 963711.4, 444185.5, 211962…\n$ AREA_SQM_SE             <dbl> 823.2860, 825.2380, 988.2240, 617.4007, 1376.2…\n$ AGE_SE                  <dbl> 5889.782, 6226.916, 6510.236, 6010.511, 8180.3…\n$ PROX_CBD_SE             <dbl> 37411.22, 23615.06, 56103.77, 469337.41, 41064…\n$ PROX_CHILDCARE_SE       <dbl> 319111.1, 299705.3, 349128.5, 304965.2, 698720…\n$ PROX_ELDERLYCARE_SE     <dbl> 120633.34, 84546.69, 129687.07, 127150.69, 327…\n$ PROX_URA_GROWTH_AREA_SE <dbl> 56207.39, 76956.50, 95774.60, 470762.12, 47433…\n$ PROX_MRT_SE             <dbl> 185181.3, 281133.9, 275483.7, 279877.1, 363830…\n$ PROX_PARK_SE            <dbl> 205499.6, 229358.7, 314124.3, 227249.4, 364580…\n$ PROX_PRIMARY_SCH_SE     <dbl> 152400.7, 165150.7, 196662.6, 240878.9, 249087…\n$ PROX_SHOPPING_MALL_SE   <dbl> 109268.8, 98906.8, 119913.3, 177104.1, 301032.…\n$ PROX_BUS_STOP_SE        <dbl> 600668.6, 410222.1, 464156.7, 562810.8, 740922…\n$ NO_Of_UNITS_SE          <dbl> 218.1258, 208.9410, 210.9828, 361.7767, 299.50…\n$ FAMILY_FRIENDLY_SE      <dbl> 131474.73, 114989.07, 146607.22, 108726.62, 16…\n$ FREEHOLD_SE             <dbl> 115954.0, 130110.0, 141031.5, 138239.1, 210641…\n$ Intercept_TV            <dbl> 3.9720784, 3.3460017, 3.5629010, 0.5276150, 1.…\n$ AREA_SQM_TV             <dbl> 11.614302, 20.087361, 13.247868, 33.577223, 4.…\n$ AGE_TV                  <dbl> -1.6154474, -9.3441881, -4.1023685, -15.524301…\n$ PROX_CBD_TV             <dbl> -3.22582173, -6.32792021, -4.62353528, 5.17080…\n$ PROX_CHILDCARE_TV       <dbl> 1.000488185, 1.471786337, -0.344047555, 1.5766…\n$ PROX_ELDERLYCARE_TV     <dbl> -3.26126929, 3.84626245, 4.13191383, 2.4756745…\n$ PROX_URA_GROWTH_AREA_TV <dbl> -2.846248368, -1.848971738, -2.648105057, -5.6…\n$ PROX_MRT_TV             <dbl> -1.61864578, -8.92998600, -3.40075727, -7.2870…\n$ PROX_PARK_TV            <dbl> -0.83749312, 2.28192684, 0.66565951, -3.340617…\n$ PROX_PRIMARY_SCH_TV     <dbl> 1.59230221, 6.70194543, 2.90580089, 12.9836104…\n$ PROX_SHOPPING_MALL_TV   <dbl> 2.753588422, -0.886626400, -1.056869486, -0.16…\n$ PROX_BUS_STOP_TV        <dbl> 2.0154464, 4.4941192, 3.0419145, 12.8383775, 0…\n$ NO_Of_UNITS_TV          <dbl> 0.480589953, -1.380026395, -0.045279967, -0.44…\n$ FAMILY_FRIENDLY_TV      <dbl> -0.06902748, 2.69655779, 0.04058290, 14.312764…\n$ FREEHOLD_TV             <dbl> 2.6213469, 3.0452799, 1.1970499, 8.7711485, 1.…\n$ Local_R2                <dbl> 0.8846744, 0.8899773, 0.8947007, 0.9073605, 0.…\n$ geometry                <POINT [m]> POINT (22085.12 29951.54), POINT (25656.…\n\n\n\nsummary(gwr.adaptive$SDF$yhat)\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n  171347  1102001  1385528  1751842  1982307 13887901 \n\n\n\n\n\nVisualizing local R2\nThe code chunk below uses tmap package to create an interactive point symbol map.\n\ntmap_mode(\"view\")\ntm_shape(mpsz_svy21)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(condo_resale.sf.adaptive) +  \n  tm_dots(col = \"Local_R2\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\n\nThe code chunk below visualizes local R2 by URA planning region\n\ntm_shape(mpsz_svy21[mpsz_svy21$REGION_N==\"CENTRAL REGION\", ])+\n  tm_polygons()+\ntm_shape(condo_resale.sf.adaptive) + \n  tm_bubbles(col = \"Local_R2\",\n           size = 0.15,\n           border.col = \"gray60\",\n           border.lwd = 1)"
  },
  {
    "objectID": "In-class_Ex4/In-class_Ex4.html",
    "href": "In-class_Ex4/In-class_Ex4.html",
    "title": "In-class Exercise 4: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "",
    "text": "In this in-class exercise, I add in additional notes to hands-on exercise 4 and learn how to use geographically weighted regression (GWR) to build hedonic pricing models."
  },
  {
    "objectID": "In-class_Ex4/In-class_Ex4.html#getting-started",
    "href": "In-class_Ex4/In-class_Ex4.html#getting-started",
    "title": "In-class Exercise 4: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "Getting Started",
    "text": "Getting Started\nIn this exercise, the following R packages will be used:\n\nsf for importing, managing, and processing geospatial data\nspdep for computing spatial weights, global and local spatial autocorrelation statistics\nrgdal for providing bindings to the ‘Geospatial’ Data Abstraction Library (GDAL) and access to projection operation from the ‘PROJ’ library.\ntidyverse for importing, wrangling, and visualizing data\n\ntidyr for manipulating data\ndplyr for transforming data\nggplot2 for visualizing data\n\ntmap for plotting cartographic quality choropleth map\ncorrplot for providing a visual exploratory tool on correlation matrix that supports automatic variable reordering to help detect hidden patterns among variables\nolsrr for building OLS and performing diagnostics tests\nGWmodel for calibrating geographical weighted family of models\n\nThe code chunk below installs and launch the R packages into R environment.\n\npacman::p_load(olsrr, corrplot, ggpubr, sf, spdep, GWmodel, tmap, tidyverse, gtsummary)"
  },
  {
    "objectID": "In-class_Ex4/In-class_Ex4.html#importing-data-into-r-environment",
    "href": "In-class_Ex4/In-class_Ex4.html#importing-data-into-r-environment",
    "title": "In-class Exercise 4: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "Importing Data into R environment",
    "text": "Importing Data into R environment\n\nImporting geospatial data into R environment\nThe code chunk below uses st_read() of sf package to import MP14_SUBZONE_WEB_PL shapefile into R and save as simple feature data frame called mpsz.\n\nmpsz = st_read(dsn = \"data/geospatial\",\n               layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `D:\\GuanboShao\\ISSS624\\In-class_Ex4\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\n\nUpdating CRS information\nThe code chunk below updates mpsz with correct ESPG code.\nst_transform() of sf package is used to transform original geographic coordinate reference system (CRS) svy21 to EPSG: 3414.\nst_crs() of sf package is used to verify the projection of mpsz_svy21.\n\nmpsz_svy21 <- st_transform(mpsz, 3414)\nst_crs(mpsz_svy21)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nst_bbox() of sf package is used to reveal the extent of mpsz_svy21.\n\nst_bbox(mpsz_svy21)\n\n     xmin      ymin      xmax      ymax \n 2667.538 15748.721 56396.440 50256.334 \n\n\n\n\nImporting aspatial data into R environment\nThe code chunk below uses read_csv() of readr package to import condo_resale_2015 csv file and save in R’s tibble data.frame format called condo_resale.\n\ncondo_resale = read_csv(\"data/aspatial/Condo_resale_2015.csv\")\n\nThe codes chunk below uses glimpse() to display the data structure.\n\nglimpse(condo_resale)\n\nRows: 1,436\nColumns: 23\n$ LATITUDE             <dbl> 1.287145, 1.328698, 1.313727, 1.308563, 1.321437,…\n$ LONGITUDE            <dbl> 103.7802, 103.8123, 103.7971, 103.8247, 103.9505,…\n$ POSTCODE             <dbl> 118635, 288420, 267833, 258380, 467169, 466472, 3…\n$ SELLING_PRICE        <dbl> 3000000, 3880000, 3325000, 4250000, 1400000, 1320…\n$ AREA_SQM             <dbl> 309, 290, 248, 127, 145, 139, 218, 141, 165, 168,…\n$ AGE                  <dbl> 30, 32, 33, 7, 28, 22, 24, 24, 27, 31, 17, 22, 6,…\n$ PROX_CBD             <dbl> 7.941259, 6.609797, 6.898000, 4.038861, 11.783402…\n$ PROX_CHILDCARE       <dbl> 0.16597932, 0.28027246, 0.42922669, 0.39473543, 0…\n$ PROX_ELDERLYCARE     <dbl> 2.5198118, 1.9333338, 0.5021395, 1.9910316, 1.121…\n$ PROX_URA_GROWTH_AREA <dbl> 6.618741, 7.505109, 6.463887, 4.906512, 6.410632,…\n$ PROX_HAWKER_MARKET   <dbl> 1.76542207, 0.54507614, 0.37789301, 1.68259969, 0…\n$ PROX_KINDERGARTEN    <dbl> 0.05835552, 0.61592412, 0.14120309, 0.38200076, 0…\n$ PROX_MRT             <dbl> 0.5607188, 0.6584461, 0.3053433, 0.6910183, 0.528…\n$ PROX_PARK            <dbl> 1.1710446, 0.1992269, 0.2779886, 0.9832843, 0.116…\n$ PROX_PRIMARY_SCH     <dbl> 1.6340256, 0.9747834, 1.4715016, 1.4546324, 0.709…\n$ PROX_TOP_PRIMARY_SCH <dbl> 3.3273195, 0.9747834, 1.4715016, 2.3006394, 0.709…\n$ PROX_SHOPPING_MALL   <dbl> 2.2102717, 2.9374279, 1.2256850, 0.3525671, 1.307…\n$ PROX_SUPERMARKET     <dbl> 0.9103958, 0.5900617, 0.4135583, 0.4162219, 0.581…\n$ PROX_BUS_STOP        <dbl> 0.10336166, 0.28673408, 0.28504777, 0.29872340, 0…\n$ NO_Of_UNITS          <dbl> 18, 20, 27, 30, 30, 31, 32, 32, 32, 32, 34, 34, 3…\n$ FAMILY_FRIENDLY      <dbl> 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0…\n$ FREEHOLD             <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1…\n$ LEASEHOLD_99YR       <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n\n\nThe code chunk below uses summary() to reveal the summary statistics.\n\nsummary(condo_resale)\n\n    LATITUDE       LONGITUDE        POSTCODE      SELLING_PRICE     \n Min.   :1.240   Min.   :103.7   Min.   : 18965   Min.   :  540000  \n 1st Qu.:1.309   1st Qu.:103.8   1st Qu.:259849   1st Qu.: 1100000  \n Median :1.328   Median :103.8   Median :469298   Median : 1383222  \n Mean   :1.334   Mean   :103.8   Mean   :440439   Mean   : 1751211  \n 3rd Qu.:1.357   3rd Qu.:103.9   3rd Qu.:589486   3rd Qu.: 1950000  \n Max.   :1.454   Max.   :104.0   Max.   :828833   Max.   :18000000  \n    AREA_SQM          AGE           PROX_CBD       PROX_CHILDCARE    \n Min.   : 34.0   Min.   : 0.00   Min.   : 0.3869   Min.   :0.004927  \n 1st Qu.:103.0   1st Qu.: 5.00   1st Qu.: 5.5574   1st Qu.:0.174481  \n Median :121.0   Median :11.00   Median : 9.3567   Median :0.258135  \n Mean   :136.5   Mean   :12.14   Mean   : 9.3254   Mean   :0.326313  \n 3rd Qu.:156.0   3rd Qu.:18.00   3rd Qu.:12.6661   3rd Qu.:0.368293  \n Max.   :619.0   Max.   :37.00   Max.   :19.1804   Max.   :3.465726  \n PROX_ELDERLYCARE  PROX_URA_GROWTH_AREA PROX_HAWKER_MARKET PROX_KINDERGARTEN \n Min.   :0.05451   Min.   :0.2145       Min.   :0.05182    Min.   :0.004927  \n 1st Qu.:0.61254   1st Qu.:3.1643       1st Qu.:0.55245    1st Qu.:0.276345  \n Median :0.94179   Median :4.6186       Median :0.90842    Median :0.413385  \n Mean   :1.05351   Mean   :4.5981       Mean   :1.27987    Mean   :0.458903  \n 3rd Qu.:1.35122   3rd Qu.:5.7550       3rd Qu.:1.68578    3rd Qu.:0.578474  \n Max.   :3.94916   Max.   :9.1554       Max.   :5.37435    Max.   :2.229045  \n    PROX_MRT         PROX_PARK       PROX_PRIMARY_SCH  PROX_TOP_PRIMARY_SCH\n Min.   :0.05278   Min.   :0.02906   Min.   :0.07711   Min.   :0.07711     \n 1st Qu.:0.34646   1st Qu.:0.26211   1st Qu.:0.44024   1st Qu.:1.34451     \n Median :0.57430   Median :0.39926   Median :0.63505   Median :1.88213     \n Mean   :0.67316   Mean   :0.49802   Mean   :0.75471   Mean   :2.27347     \n 3rd Qu.:0.84844   3rd Qu.:0.65592   3rd Qu.:0.95104   3rd Qu.:2.90954     \n Max.   :3.48037   Max.   :2.16105   Max.   :3.92899   Max.   :6.74819     \n PROX_SHOPPING_MALL PROX_SUPERMARKET PROX_BUS_STOP       NO_Of_UNITS    \n Min.   :0.0000     Min.   :0.0000   Min.   :0.001595   Min.   :  18.0  \n 1st Qu.:0.5258     1st Qu.:0.3695   1st Qu.:0.098356   1st Qu.: 188.8  \n Median :0.9357     Median :0.5687   Median :0.151710   Median : 360.0  \n Mean   :1.0455     Mean   :0.6141   Mean   :0.193974   Mean   : 409.2  \n 3rd Qu.:1.3994     3rd Qu.:0.7862   3rd Qu.:0.220466   3rd Qu.: 590.0  \n Max.   :3.4774     Max.   :2.2441   Max.   :2.476639   Max.   :1703.0  \n FAMILY_FRIENDLY     FREEHOLD      LEASEHOLD_99YR  \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.0000   1st Qu.:0.0000   1st Qu.:0.0000  \n Median :0.0000   Median :0.0000   Median :0.0000  \n Mean   :0.4868   Mean   :0.4227   Mean   :0.4882  \n 3rd Qu.:1.0000   3rd Qu.:1.0000   3rd Qu.:1.0000  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n\n\n\n\nConverting aspatial data frame into sf object\nThe code chunk below uses st_as_sf() of sf packages to convert condo_resale data frame into a simple feature data frame called condo_resale.sf.\nst_transform() of sf package is used to convert the coordinates from wgs84 to svy21.\n\ncondo_resale.sf <- st_as_sf(condo_resale,\n                            coords = c(\"LONGITUDE\", \"LATITUDE\"),\n                            crs=4326) %>%\n  st_transform(crs=3414)\n\nThe code chunk below uses head() to list the content of condo_resale.sf object.\n\nhead(condo_resale.sf)\n\nSimple feature collection with 6 features and 21 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 22085.12 ymin: 29951.54 xmax: 41042.56 ymax: 34546.2\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 6 × 22\n  POSTCODE SELLI…¹ AREA_…²   AGE PROX_…³ PROX_…⁴ PROX_…⁵ PROX_…⁶ PROX_…⁷ PROX_…⁸\n     <dbl>   <dbl>   <dbl> <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n1   118635 3000000     309    30    7.94   0.166   2.52     6.62   1.77   0.0584\n2   288420 3880000     290    32    6.61   0.280   1.93     7.51   0.545  0.616 \n3   267833 3325000     248    33    6.90   0.429   0.502    6.46   0.378  0.141 \n4   258380 4250000     127     7    4.04   0.395   1.99     4.91   1.68   0.382 \n5   467169 1400000     145    28   11.8    0.119   1.12     6.41   0.565  0.461 \n6   466472 1320000     139    22   10.3    0.125   0.789    5.09   0.781  0.0994\n# … with 12 more variables: PROX_MRT <dbl>, PROX_PARK <dbl>,\n#   PROX_PRIMARY_SCH <dbl>, PROX_TOP_PRIMARY_SCH <dbl>,\n#   PROX_SHOPPING_MALL <dbl>, PROX_SUPERMARKET <dbl>, PROX_BUS_STOP <dbl>,\n#   NO_Of_UNITS <dbl>, FAMILY_FRIENDLY <dbl>, FREEHOLD <dbl>,\n#   LEASEHOLD_99YR <dbl>, geometry <POINT [m]>, and abbreviated variable names\n#   ¹​SELLING_PRICE, ²​AREA_SQM, ³​PROX_CBD, ⁴​PROX_CHILDCARE, ⁵​PROX_ELDERLYCARE,\n#   ⁶​PROX_URA_GROWTH_AREA, ⁷​PROX_HAWKER_MARKET, ⁸​PROX_KINDERGARTEN"
  },
  {
    "objectID": "In-class_Ex4/In-class_Ex4.html#exploratory-data-analysis-eda",
    "href": "In-class_Ex4/In-class_Ex4.html#exploratory-data-analysis-eda",
    "title": "In-class Exercise 4: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "Exploratory Data Analysis (EDA)",
    "text": "Exploratory Data Analysis (EDA)\nIn this section, I learn how to use statistical graphics functions of ggplot2 package to perform EDA.\n\nEDA using statistical graphics\nThe code chunk below uses geom_histogram() to plot histogram to identify the overall distribution of SELLING_PRICE.\n\nggplot(data=condo_resale.sf, aes(x=`SELLING_PRICE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\n\n\n\nThe code chunk below uses mutate() of dplyr package to derive a new variable called LOG_SELLING_PRICE by using a log transformation on the variable SELLING_PRICE.\n\ncondo_resale.sf <- condo_resale.sf %>%\n  mutate(`LOG_SELLING_PRICE` = log(SELLING_PRICE))\n\nThe code chunk below uses geom_histogram() to plot histogram to identify the overall distribution of LOG_SELLING_PRICE.\n\nggplot(data=condo_resale.sf, aes(x=`LOG_SELLING_PRICE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\n\n\n\n\n\nMultiple histogram plots distribution of variables\nThe code chunk below plots 12 histograms to reveal the distribution of selected variables.\nggarange() of ggpubr package is used to organize the histograms together into 3 columns by 4 rows.\n\nAREA_SQM <- ggplot(data=condo_resale.sf, aes(x= `AREA_SQM`)) + \n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nAGE <- ggplot(data=condo_resale.sf, aes(x= `AGE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_CBD <- ggplot(data=condo_resale.sf, aes(x= `PROX_CBD`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_CHILDCARE <- ggplot(data=condo_resale.sf, aes(x= `PROX_CHILDCARE`)) + \n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_ELDERLYCARE <- ggplot(data=condo_resale.sf, aes(x= `PROX_ELDERLYCARE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_URA_GROWTH_AREA <- ggplot(data=condo_resale.sf, \n                               aes(x= `PROX_URA_GROWTH_AREA`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_HAWKER_MARKET <- ggplot(data=condo_resale.sf, aes(x= `PROX_HAWKER_MARKET`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_KINDERGARTEN <- ggplot(data=condo_resale.sf, aes(x= `PROX_KINDERGARTEN`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_MRT <- ggplot(data=condo_resale.sf, aes(x= `PROX_MRT`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_PARK <- ggplot(data=condo_resale.sf, aes(x= `PROX_PARK`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_PRIMARY_SCH <- ggplot(data=condo_resale.sf, aes(x= `PROX_PRIMARY_SCH`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_TOP_PRIMARY_SCH <- ggplot(data=condo_resale.sf, \n                               aes(x= `PROX_TOP_PRIMARY_SCH`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nggarrange(AREA_SQM, AGE, PROX_CBD, PROX_CHILDCARE, PROX_ELDERLYCARE, \n          PROX_URA_GROWTH_AREA, PROX_HAWKER_MARKET, PROX_KINDERGARTEN, PROX_MRT,\n          PROX_PARK, PROX_PRIMARY_SCH, PROX_TOP_PRIMARY_SCH,  \n          ncol = 3, nrow = 4)\n\n\n\n\n\n\nDrawing statistical point map\nThe code chunk below uses tmap_mode() of tmap package to turn on the interactive mode.\ntmap package is used to reveal the geospatial distribution of SELLING_PRICE.\nset.zoom.limits argument of tm_view() sets the minimum and maximum zoom level to 11 and 14 respectively.\ntmap_options(check.and.fix = TRUE) is used to check and fix invalid/broken polygons.\n\ntmap_mode(\"view\")\n\n\ntm_shape(mpsz_svy21)+\n  tmap_options(check.and.fix = TRUE) +\n  tm_polygons() +\ntm_shape(condo_resale.sf) +  \n  tm_dots(col = \"SELLING_PRICE\",\n          alpha = 0.6,\n          style=\"quantile\") +\n  tm_view(set.zoom.limits = c(11,14))\n\n\n\n\n\n\nThe code chunk below changes R display to plot mode.\n\ntmap_mode(\"plot\")"
  },
  {
    "objectID": "In-class_Ex4/In-class_Ex4.html#hedonic-pricing-modelling-in-r",
    "href": "In-class_Ex4/In-class_Ex4.html#hedonic-pricing-modelling-in-r",
    "title": "In-class Exercise 4: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "Hedonic Pricing Modelling in R",
    "text": "Hedonic Pricing Modelling in R\nIn this section, I learn how to build hedonic pricing models for condominium resale units using lm() of R base.\n\nSimple linear regression method\nThe code chunk below uses lm() of R base to build a simple linear regression model by using SELLING_PRICE as the dependent variable and AREA_SQM as the independent variable.\n\ncondo.slr <- lm(formula=SELLING_PRICE ~ AREA_SQM, data = condo_resale.sf)\n\nThe code chunk below shows the summary of variance table of the results.\n\nsummary(condo.slr)\n\n\nCall:\nlm(formula = SELLING_PRICE ~ AREA_SQM, data = condo_resale.sf)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-3695815  -391764   -87517   258900 13503875 \n\nCoefficients:\n             Estimate Std. Error t value Pr(>|t|)    \n(Intercept) -258121.1    63517.2  -4.064 5.09e-05 ***\nAREA_SQM      14719.0      428.1  34.381  < 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 942700 on 1434 degrees of freedom\nMultiple R-squared:  0.4518,    Adjusted R-squared:  0.4515 \nF-statistic:  1182 on 1 and 1434 DF,  p-value: < 2.2e-16\n\n\nThe formula is y= -258121.1 + 14719x\nThe R-squared = 0.4518 reveals that the simple regression model built is able to explain about 45% of the resale prices.\nSince p-value is much smaller than 0.0001, we will reject the null hypothesis that mean is a good estimator of SELLING_PRICE. This will allow us to infer that simple linear regression model above is a good estimator of SELLING_PRICE.\nThe code chunk below visualize the best fit line curve on a scatterplot.\n\nggplot(data=condo_resale.sf,  \n       aes(x=`AREA_SQM`, y=`SELLING_PRICE`)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\n\n\n\n\n\nMultiple linear regression method\nBefore building a multiple regression model, I must make sure the independent variables are not highly correlated to each other.\n\nVisualizing the relationship of the independent variables\nThe code chunk below uses corrplot package to plot a scatterplot matrix of the relationship between the independent variables in condo_resale data frame.\n\ncorrplot(cor(condo_resale[, 5:23]), diag = FALSE, order = \"AOE\",\n         tl.pos = \"td\", tl.cex = 0.5, method = \"number\", type = \"upper\")\n\n\n\n\nUse condo_resale instead of condo_resale.sf because condo_resale.sf has geometry fields and this will give error.\nFrom the above matrix, Freehold is highly correlated to LEASE_99YEAR.\n\n\nBuilding a hedonic pricing model using multiple linear regression method\nThe code chunk below uses lm() to calibrate the multiple linear regression model.\n\ncondo.mlr <- lm(formula = SELLING_PRICE ~ AREA_SQM + AGE    + \n                  PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE +\n                  PROX_URA_GROWTH_AREA + PROX_HAWKER_MARKET + PROX_KINDERGARTEN + \n                  PROX_MRT  + PROX_PARK + PROX_PRIMARY_SCH + \n                  PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_SUPERMARKET + \n                  PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                data=condo_resale.sf)\nsummary(condo.mlr)\n\n\nCall:\nlm(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + PROX_CHILDCARE + \n    PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + PROX_HAWKER_MARKET + \n    PROX_KINDERGARTEN + PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + \n    PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_SUPERMARKET + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sf)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-3475964  -293923   -23069   241043 12260381 \n\nCoefficients:\n                       Estimate Std. Error t value Pr(>|t|)    \n(Intercept)           481728.40  121441.01   3.967 7.65e-05 ***\nAREA_SQM               12708.32     369.59  34.385  < 2e-16 ***\nAGE                   -24440.82    2763.16  -8.845  < 2e-16 ***\nPROX_CBD              -78669.78    6768.97 -11.622  < 2e-16 ***\nPROX_CHILDCARE       -351617.91  109467.25  -3.212  0.00135 ** \nPROX_ELDERLYCARE      171029.42   42110.51   4.061 5.14e-05 ***\nPROX_URA_GROWTH_AREA   38474.53   12523.57   3.072  0.00217 ** \nPROX_HAWKER_MARKET     23746.10   29299.76   0.810  0.41782    \nPROX_KINDERGARTEN     147468.99   82668.87   1.784  0.07466 .  \nPROX_MRT             -314599.68   57947.44  -5.429 6.66e-08 ***\nPROX_PARK             563280.50   66551.68   8.464  < 2e-16 ***\nPROX_PRIMARY_SCH      180186.08   65237.95   2.762  0.00582 ** \nPROX_TOP_PRIMARY_SCH    2280.04   20410.43   0.112  0.91107    \nPROX_SHOPPING_MALL   -206604.06   42840.60  -4.823 1.57e-06 ***\nPROX_SUPERMARKET      -44991.80   77082.64  -0.584  0.55953    \nPROX_BUS_STOP         683121.35  138353.28   4.938 8.85e-07 ***\nNO_Of_UNITS             -231.18      89.03  -2.597  0.00951 ** \nFAMILY_FRIENDLY       140340.77   47020.55   2.985  0.00289 ** \nFREEHOLD              359913.01   49220.22   7.312 4.38e-13 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 755800 on 1417 degrees of freedom\nMultiple R-squared:  0.6518,    Adjusted R-squared:  0.6474 \nF-statistic: 147.4 on 18 and 1417 DF,  p-value: < 2.2e-16\n\n\n\n\nPreparing publication quality table using olsrr method\nThe code chunk below uses lm() to calibrate revised multiple linear regression model by removing the independent variables that are not statistically significant.\n\ncondo.mlr1 <- lm(formula = SELLING_PRICE ~ AREA_SQM + AGE + \n                   PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE +\n                   PROX_URA_GROWTH_AREA + PROX_MRT  + PROX_PARK + \n                   PROX_PRIMARY_SCH + PROX_SHOPPING_MALL    + PROX_BUS_STOP + \n                   NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD,\n                 data=condo_resale.sf)\nols_regress(condo.mlr1)\n\n                             Model Summary                               \n------------------------------------------------------------------------\nR                       0.807       RMSE                     755957.289 \nR-Squared               0.651       Coef. Var                    43.168 \nAdj. R-Squared          0.647       MSE                571471422208.591 \nPred R-Squared          0.638       MAE                      414819.628 \n------------------------------------------------------------------------\n RMSE: Root Mean Square Error \n MSE: Mean Square Error \n MAE: Mean Absolute Error \n\n                                     ANOVA                                       \n--------------------------------------------------------------------------------\n                    Sum of                                                      \n                   Squares          DF         Mean Square       F         Sig. \n--------------------------------------------------------------------------------\nRegression    1.512586e+15          14        1.080418e+14    189.059    0.0000 \nResidual      8.120609e+14        1421    571471422208.591                      \nTotal         2.324647e+15        1435                                          \n--------------------------------------------------------------------------------\n\n                                               Parameter Estimates                                                \n-----------------------------------------------------------------------------------------------------------------\n               model           Beta    Std. Error    Std. Beta       t        Sig           lower          upper \n-----------------------------------------------------------------------------------------------------------------\n         (Intercept)     527633.222    108183.223                   4.877    0.000     315417.244     739849.200 \n            AREA_SQM      12777.523       367.479        0.584     34.771    0.000      12056.663      13498.382 \n                 AGE     -24687.739      2754.845       -0.167     -8.962    0.000     -30091.739     -19283.740 \n            PROX_CBD     -77131.323      5763.125       -0.263    -13.384    0.000     -88436.469     -65826.176 \n      PROX_CHILDCARE    -318472.751    107959.512       -0.084     -2.950    0.003    -530249.889    -106695.613 \n    PROX_ELDERLYCARE     185575.623     39901.864        0.090      4.651    0.000     107302.737     263848.510 \nPROX_URA_GROWTH_AREA      39163.254     11754.829        0.060      3.332    0.001      16104.571      62221.936 \n            PROX_MRT    -294745.107     56916.367       -0.112     -5.179    0.000    -406394.234    -183095.980 \n           PROX_PARK     570504.807     65507.029        0.150      8.709    0.000     442003.938     699005.677 \n    PROX_PRIMARY_SCH     159856.136     60234.599        0.062      2.654    0.008      41697.849     278014.424 \n  PROX_SHOPPING_MALL    -220947.251     36561.832       -0.115     -6.043    0.000    -292668.213    -149226.288 \n       PROX_BUS_STOP     682482.221    134513.243        0.134      5.074    0.000     418616.359     946348.082 \n         NO_Of_UNITS       -245.480        87.947       -0.053     -2.791    0.005       -418.000        -72.961 \n     FAMILY_FRIENDLY     146307.576     46893.021        0.057      3.120    0.002      54320.593     238294.560 \n            FREEHOLD     350599.812     48506.485        0.136      7.228    0.000     255447.802     445751.821 \n-----------------------------------------------------------------------------------------------------------------\n\n\nFor Model summary, look at Adjusted R square value.\nFor ANOVA, look at Sig. values.\nFor Parameter estimates, compare Sig. values with 0.05.\nFrom Parameter estimates table, for any 1 unit increase in Area, the selling price increases by 12777.523; for any 1 unit increase in Age, the selling price reduces by 24687.739.\n\n\nPreparing publication quality table using gtsummary method\nThe code chunk below uses tbl_regression() of gtsummary package to create a well formatted regression report.\n\ntbl_regression(condo.mlr1, intercept = TRUE)\n\n\n\n\n\n  \n  \n    \n      Characteristic\n      Beta\n      95% CI1\n      p-value\n    \n  \n  \n    (Intercept)\n527,633\n315,417, 739,849\n<0.001\n    AREA_SQM\n12,778\n12,057, 13,498\n<0.001\n    AGE\n-24,688\n-30,092, -19,284\n<0.001\n    PROX_CBD\n-77,131\n-88,436, -65,826\n<0.001\n    PROX_CHILDCARE\n-318,473\n-530,250, -106,696\n0.003\n    PROX_ELDERLYCARE\n185,576\n107,303, 263,849\n<0.001\n    PROX_URA_GROWTH_AREA\n39,163\n16,105, 62,222\n<0.001\n    PROX_MRT\n-294,745\n-406,394, -183,096\n<0.001\n    PROX_PARK\n570,505\n442,004, 699,006\n<0.001\n    PROX_PRIMARY_SCH\n159,856\n41,698, 278,014\n0.008\n    PROX_SHOPPING_MALL\n-220,947\n-292,668, -149,226\n<0.001\n    PROX_BUS_STOP\n682,482\n418,616, 946,348\n<0.001\n    NO_Of_UNITS\n-245\n-418, -73\n0.005\n    FAMILY_FRIENDLY\n146,308\n54,321, 238,295\n0.002\n    FREEHOLD\n350,600\n255,448, 445,752\n<0.001\n  \n  \n  \n    \n      1 CI = Confidence Interval\n    \n  \n\n\n\n\nThe code chunk below uses add_glance_source_note() to add model statistics as a table source note.\n\ntbl_regression(condo.mlr1, \n               intercept = TRUE) %>% \n  add_glance_source_note(\n    label = list(sigma ~ \"\\U03C3\"),\n    include = c(r.squared, adj.r.squared, \n                AIC, statistic,\n                p.value, sigma))\n\n\n\n\n\n  \n  \n    \n      Characteristic\n      Beta\n      95% CI1\n      p-value\n    \n  \n  \n    (Intercept)\n527,633\n315,417, 739,849\n<0.001\n    AREA_SQM\n12,778\n12,057, 13,498\n<0.001\n    AGE\n-24,688\n-30,092, -19,284\n<0.001\n    PROX_CBD\n-77,131\n-88,436, -65,826\n<0.001\n    PROX_CHILDCARE\n-318,473\n-530,250, -106,696\n0.003\n    PROX_ELDERLYCARE\n185,576\n107,303, 263,849\n<0.001\n    PROX_URA_GROWTH_AREA\n39,163\n16,105, 62,222\n<0.001\n    PROX_MRT\n-294,745\n-406,394, -183,096\n<0.001\n    PROX_PARK\n570,505\n442,004, 699,006\n<0.001\n    PROX_PRIMARY_SCH\n159,856\n41,698, 278,014\n0.008\n    PROX_SHOPPING_MALL\n-220,947\n-292,668, -149,226\n<0.001\n    PROX_BUS_STOP\n682,482\n418,616, 946,348\n<0.001\n    NO_Of_UNITS\n-245\n-418, -73\n0.005\n    FAMILY_FRIENDLY\n146,308\n54,321, 238,295\n0.002\n    FREEHOLD\n350,600\n255,448, 445,752\n<0.001\n  \n  \n    \n      R² = 0.651; Adjusted R² = 0.647; AIC = 42,967; Statistic = 189; p-value = <0.001; σ = 755,957\n    \n  \n  \n    \n      1 CI = Confidence Interval\n    \n  \n\n\n\n\n\n\nChecking for multicollinearity\nThe code chunk below uses ols_vif_tol() of olsrr package to test if there is sign of multicollinearity.\n\nols_vif_tol(condo.mlr1)\n\n              Variables Tolerance      VIF\n1              AREA_SQM 0.8728554 1.145665\n2                   AGE 0.7071275 1.414172\n3              PROX_CBD 0.6356147 1.573280\n4        PROX_CHILDCARE 0.3066019 3.261559\n5      PROX_ELDERLYCARE 0.6598479 1.515501\n6  PROX_URA_GROWTH_AREA 0.7510311 1.331503\n7              PROX_MRT 0.5236090 1.909822\n8             PROX_PARK 0.8279261 1.207837\n9      PROX_PRIMARY_SCH 0.4524628 2.210126\n10   PROX_SHOPPING_MALL 0.6738795 1.483945\n11        PROX_BUS_STOP 0.3514118 2.845664\n12          NO_Of_UNITS 0.6901036 1.449058\n13      FAMILY_FRIENDLY 0.7244157 1.380423\n14             FREEHOLD 0.6931163 1.442759\n\n\nSince the VIF of the independent variables are less than 10. We can safely conclude that there are no sign of multicollinearity among the independent variables.\n\n\nTest for non-linearity\nThe code chunk below uses ols_plot_resid_fit() of olsrr package to perform linearity assumption test.\n\nols_plot_resid_fit(condo.mlr1)\n\n\n\n\nThe figure above reveals that most of the data poitns are scattered around the 0 line, hence we can safely conclude that the relationships between the dependent variable and independent variables are linear.\n\n\nTest for normality assumption\nThe code chunk below uses ols_plot_resid_hist() of olsrr package to perform normality assumption test.\n\nols_plot_resid_hist(condo.mlr1)\n\n\n\n\nThe figure reveals that the residual of the multiple linear regression model (i.e. condo.mlr1) is resemble normal distribution.\nThe code chunk below uses ols_test_normality() of olsrr package to perform statistical test.\n\nols_test_normality(condo.mlr1)\n\n-----------------------------------------------\n       Test             Statistic       pvalue  \n-----------------------------------------------\nShapiro-Wilk              0.6856         0.0000 \nKolmogorov-Smirnov        0.1366         0.0000 \nCramer-von Mises         121.0768        0.0000 \nAnderson-Darling         67.9551         0.0000 \n-----------------------------------------------\n\n\nThe summary table above reveals that the p-values of the four tests are way smaller than the alpha value of 0.05. Hence we will reject the null hypothesis and infer that there is statistical evidence that the residual are not normally distributed.\n\n\nTest for spatial autocorrelation\nThe code chunk below exports the residual of the hedonic pricing model and save it as a data frame with only 1 column residuals.\n\nmlr.output <- as.data.frame(condo.mlr1$residuals)\n\nThe code chunk below joins the above data frame with condo_resale.sf object.\n\ncondo_resale.res.sf <- cbind(condo_resale.sf, \n                        condo.mlr1$residuals) %>%\nrename(`MLR_RES` = `condo.mlr1.residuals`)\n\nUse ` ` to quote field name.\nThe code chunk below converts condo_resale.res.sf from simple feature object into a spatial points data frame because spdep package can only process sp conformed spatial data objects.\n\ncondo_resale.sp <- as_Spatial(condo_resale.res.sf)\ncondo_resale.sp\n\nclass       : SpatialPointsDataFrame \nfeatures    : 1436 \nextent      : 14940.85, 43352.45, 24765.67, 48382.81  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 23\nnames       : POSTCODE, SELLING_PRICE, AREA_SQM, AGE,    PROX_CBD, PROX_CHILDCARE, PROX_ELDERLYCARE, PROX_URA_GROWTH_AREA, PROX_HAWKER_MARKET, PROX_KINDERGARTEN,    PROX_MRT,   PROX_PARK, PROX_PRIMARY_SCH, PROX_TOP_PRIMARY_SCH, PROX_SHOPPING_MALL, ... \nmin values  :    18965,        540000,       34,   0, 0.386916393,    0.004927023,      0.054508623,          0.214539508,        0.051817113,       0.004927023, 0.052779424, 0.029064164,      0.077106132,          0.077106132,                  0, ... \nmax values  :   828833,       1.8e+07,      619,  37, 19.18042832,     3.46572633,      3.949157205,           9.15540001,        5.374348075,       2.229045366,  3.48037319,  2.16104919,      3.928989144,          6.748192062,        3.477433767, ... \n\n\nThe code chunk below uses tmap package to display the distribution of the residuals on an interactive map.\n\ntmap_mode(\"view\")\n\ntm_shape(mpsz_svy21)+\n  tmap_options(check.and.fix = TRUE) +\n  tm_polygons(alpha = 0.4) +\ntm_shape(condo_resale.res.sf) +  \n  tm_dots(col = \"MLR_RES\",\n          alpha = 0.6,\n          style=\"quantile\") +\n  tm_view(set.zoom.limits = c(11,14))\n\n\n\n\n\n\nThe code chunk below changes R display to plot mode.\n\ntmap_mode(\"plot\")\n\nThe figure above reveal that there is sign of spatial autocorrelation. We use Moran’s I test to proof the observation.\nThe code chunk below uses dnearneigh() of spdep package to compute the distance-based weight matrix.\n\nnb <- dnearneigh(coordinates(condo_resale.sp), 0, 1500, longlat = FALSE)\nsummary(nb)\n\nNeighbour list object:\nNumber of regions: 1436 \nNumber of nonzero links: 66266 \nPercentage nonzero weights: 3.213526 \nAverage number of links: 46.14624 \nLink number distribution:\n\n  1   3   5   7   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24 \n  3   3   9   4   3  15  10  19  17  45  19   5  14  29  19   6  35  45  18  47 \n 25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44 \n 16  43  22  26  21  11   9  23  22  13  16  25  21  37  16  18   8  21   4  12 \n 45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64 \n  8  36  18  14  14  43  11  12   8  13  12  13   4   5   6  12  11  20  29  33 \n 65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84 \n 15  20  10  14  15  15  11  16  12  10   8  19  12  14   9   8   4  13  11   6 \n 85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 \n  4   9   4   4   4   6   2  16   9   4   5   9   3   9   4   2   1   2   1   1 \n105 106 107 108 109 110 112 116 125 \n  1   5   9   2   1   3   1   1   1 \n3 least connected regions:\n193 194 277 with 1 link\n1 most connected region:\n285 with 125 links\n\n\nThe code chunk below uses nb2listw() of spdep package to convert the output neighbor lists into a spatial weights.\n\nnb_lw <- nb2listw(nb, style = 'W')\nsummary(nb_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 1436 \nNumber of nonzero links: 66266 \nPercentage nonzero weights: 3.213526 \nAverage number of links: 46.14624 \nLink number distribution:\n\n  1   3   5   7   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24 \n  3   3   9   4   3  15  10  19  17  45  19   5  14  29  19   6  35  45  18  47 \n 25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44 \n 16  43  22  26  21  11   9  23  22  13  16  25  21  37  16  18   8  21   4  12 \n 45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64 \n  8  36  18  14  14  43  11  12   8  13  12  13   4   5   6  12  11  20  29  33 \n 65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84 \n 15  20  10  14  15  15  11  16  12  10   8  19  12  14   9   8   4  13  11   6 \n 85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 \n  4   9   4   4   4   6   2  16   9   4   5   9   3   9   4   2   1   2   1   1 \n105 106 107 108 109 110 112 116 125 \n  1   5   9   2   1   3   1   1   1 \n3 least connected regions:\n193 194 277 with 1 link\n1 most connected region:\n285 with 125 links\n\nWeights style: W \nWeights constants summary:\n     n      nn   S0       S1       S2\nW 1436 2062096 1436 94.81916 5798.341\n\n\nThe code chunk below uses lm.morantest() of spdep package to perform Moran’s I test for residual spatial autocorrelation.\n\nlm.morantest(condo.mlr1, nb_lw)\n\n\n    Global Moran I for regression residuals\n\ndata:  \nmodel: lm(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD +\nPROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + PROX_MRT +\nPROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_BUS_STOP +\nNO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, data = condo_resale.sf)\nweights: nb_lw\n\nMoran I statistic standard deviate = 24.366, p-value < 2.2e-16\nalternative hypothesis: greater\nsample estimates:\nObserved Moran I      Expectation         Variance \n    1.438876e-01    -5.487594e-03     3.758259e-05 \n\n\nThe Global Moran’s I test for residual spatial autocorrelation shows that it’s p-value is less than the alpha value of 0.05. Hence, we will reject the null hypothesis that the residuals are randomly distributed.\nSince the Observed Global Moran I = 0.1424418 which is greater than 0, we can infer that the residuals resemble cluster distribution."
  },
  {
    "objectID": "In-class_Ex4/In-class_Ex4.html#building-hedonic-pricing-models-using-gwmodel",
    "href": "In-class_Ex4/In-class_Ex4.html#building-hedonic-pricing-models-using-gwmodel",
    "title": "In-class Exercise 4: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "Building Hedonic Pricing Models using GWModel",
    "text": "Building Hedonic Pricing Models using GWModel\nIn this section, I learn how to model hedonic pricing using both the fixed and adaptive bandwidth schemes.\n\nBuilding fixed bandwidth GWR model\n\nComputing fixed bandwidth\nThe code chunk below uses bw.gwr() of GWModel package to determine the optimal fixed bandwidth. Notice that the argument adaptive is set to FALSE indicates that we are interested to compute the fixed bandwidth.\n\nbw.fixed <- bw.gwr(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n                     PROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + \n                     PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + \n                     PROX_SHOPPING_MALL + PROX_BUS_STOP + NO_Of_UNITS + \n                     FAMILY_FRIENDLY + FREEHOLD, \n                   data=condo_resale.sp, \n                   approach=\"CV\", \n                   kernel=\"gaussian\", \n                   adaptive=FALSE, \n                   longlat=FALSE)\n\nFixed bandwidth: 17660.96 CV score: 8.259118e+14 \nFixed bandwidth: 10917.26 CV score: 7.970454e+14 \nFixed bandwidth: 6749.419 CV score: 7.273273e+14 \nFixed bandwidth: 4173.553 CV score: 6.300006e+14 \nFixed bandwidth: 2581.58 CV score: 5.404958e+14 \nFixed bandwidth: 1597.687 CV score: 4.857515e+14 \nFixed bandwidth: 989.6077 CV score: 4.722431e+14 \nFixed bandwidth: 613.7939 CV score: 1.378294e+16 \nFixed bandwidth: 1221.873 CV score: 4.778717e+14 \nFixed bandwidth: 846.0596 CV score: 4.791629e+14 \nFixed bandwidth: 1078.325 CV score: 4.751406e+14 \nFixed bandwidth: 934.7772 CV score: 4.72518e+14 \nFixed bandwidth: 1023.495 CV score: 4.730305e+14 \nFixed bandwidth: 968.6643 CV score: 4.721317e+14 \nFixed bandwidth: 955.7206 CV score: 4.722072e+14 \nFixed bandwidth: 976.6639 CV score: 4.721387e+14 \nFixed bandwidth: 963.7202 CV score: 4.721484e+14 \nFixed bandwidth: 971.7199 CV score: 4.721293e+14 \nFixed bandwidth: 973.6083 CV score: 4.721309e+14 \nFixed bandwidth: 970.5527 CV score: 4.721295e+14 \nFixed bandwidth: 972.4412 CV score: 4.721296e+14 \nFixed bandwidth: 971.2741 CV score: 4.721292e+14 \nFixed bandwidth: 970.9985 CV score: 4.721293e+14 \nFixed bandwidth: 971.4443 CV score: 4.721292e+14 \nFixed bandwidth: 971.5496 CV score: 4.721293e+14 \nFixed bandwidth: 971.3793 CV score: 4.721292e+14 \nFixed bandwidth: 971.3391 CV score: 4.721292e+14 \nFixed bandwidth: 971.3143 CV score: 4.721292e+14 \nFixed bandwidth: 971.3545 CV score: 4.721292e+14 \nFixed bandwidth: 971.3296 CV score: 4.721292e+14 \nFixed bandwidth: 971.345 CV score: 4.721292e+14 \nFixed bandwidth: 971.3355 CV score: 4.721292e+14 \nFixed bandwidth: 971.3413 CV score: 4.721292e+14 \nFixed bandwidth: 971.3377 CV score: 4.721292e+14 \nFixed bandwidth: 971.34 CV score: 4.721292e+14 \nFixed bandwidth: 971.3405 CV score: 4.721292e+14 \nFixed bandwidth: 971.3408 CV score: 4.721292e+14 \nFixed bandwidth: 971.3403 CV score: 4.721292e+14 \nFixed bandwidth: 971.3406 CV score: 4.721292e+14 \nFixed bandwidth: 971.3404 CV score: 4.721292e+14 \nFixed bandwidth: 971.3405 CV score: 4.721292e+14 \nFixed bandwidth: 971.3405 CV score: 4.721292e+14 \n\n\nThe result shows that the recommended bandwidth is 971.3405 meters.\n\n\nGWModel method using fixed bandwidth\nThe code chunk below uses gwr.basic() of GWModel package to calibrate the GWR model using fixed bandwidth and Gaussian kernel.\nIf location data is already projected, set longlat = FALSE\n\ngwr.fixed <- gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n                         PROX_CHILDCARE + PROX_ELDERLYCARE +\n                         PROX_URA_GROWTH_AREA + PROX_MRT + PROX_PARK +\n                         PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_BUS_STOP +\n                         NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                       data=condo_resale.sp, \n                       bw=bw.fixed, \n                       kernel = 'gaussian', \n                       longlat = FALSE)\ngwr.fixed\n\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2022-12-10 11:39:08 \n   Call:\n   gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n    PROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + \n    PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sp, bw = bw.fixed, kernel = \"gaussian\", \n    longlat = FALSE)\n\n   Dependent (y) variable:  SELLING_PRICE\n   Independent variables:  AREA_SQM AGE PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE PROX_URA_GROWTH_AREA PROX_MRT PROX_PARK PROX_PRIMARY_SCH PROX_SHOPPING_MALL PROX_BUS_STOP NO_Of_UNITS FAMILY_FRIENDLY FREEHOLD\n   Number of data points: 1436\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n     Min       1Q   Median       3Q      Max \n-3470778  -298119   -23481   248917 12234210 \n\n   Coefficients:\n                          Estimate Std. Error t value Pr(>|t|)    \n   (Intercept)           527633.22  108183.22   4.877 1.20e-06 ***\n   AREA_SQM               12777.52     367.48  34.771  < 2e-16 ***\n   AGE                   -24687.74    2754.84  -8.962  < 2e-16 ***\n   PROX_CBD              -77131.32    5763.12 -13.384  < 2e-16 ***\n   PROX_CHILDCARE       -318472.75  107959.51  -2.950 0.003231 ** \n   PROX_ELDERLYCARE      185575.62   39901.86   4.651 3.61e-06 ***\n   PROX_URA_GROWTH_AREA   39163.25   11754.83   3.332 0.000885 ***\n   PROX_MRT             -294745.11   56916.37  -5.179 2.56e-07 ***\n   PROX_PARK             570504.81   65507.03   8.709  < 2e-16 ***\n   PROX_PRIMARY_SCH      159856.14   60234.60   2.654 0.008046 ** \n   PROX_SHOPPING_MALL   -220947.25   36561.83  -6.043 1.93e-09 ***\n   PROX_BUS_STOP         682482.22  134513.24   5.074 4.42e-07 ***\n   NO_Of_UNITS             -245.48      87.95  -2.791 0.005321 ** \n   FAMILY_FRIENDLY       146307.58   46893.02   3.120 0.001845 ** \n   FREEHOLD              350599.81   48506.48   7.228 7.98e-13 ***\n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 756000 on 1421 degrees of freedom\n   Multiple R-squared: 0.6507\n   Adjusted R-squared: 0.6472 \n   F-statistic: 189.1 on 14 and 1421 DF,  p-value: < 2.2e-16 \n   ***Extra Diagnostic information\n   Residual sum of squares: 8.120609e+14\n   Sigma(hat): 752522.9\n   AIC:  42966.76\n   AICc:  42967.14\n   BIC:  41731.39\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Fixed bandwidth: 971.3405 \n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                               Min.     1st Qu.      Median     3rd Qu.\n   Intercept            -3.5988e+07 -5.1998e+05  7.6780e+05  1.7412e+06\n   AREA_SQM              1.0003e+03  5.2758e+03  7.4740e+03  1.2301e+04\n   AGE                  -1.3475e+05 -2.0813e+04 -8.6260e+03 -3.7784e+03\n   PROX_CBD             -7.7047e+07 -2.3608e+05 -8.3600e+04  3.4646e+04\n   PROX_CHILDCARE       -6.0097e+06 -3.3667e+05 -9.7425e+04  2.9007e+05\n   PROX_ELDERLYCARE     -3.5000e+06 -1.5970e+05  3.1971e+04  1.9577e+05\n   PROX_URA_GROWTH_AREA -3.0170e+06 -8.2013e+04  7.0749e+04  2.2612e+05\n   PROX_MRT             -3.5282e+06 -6.5836e+05 -1.8833e+05  3.6922e+04\n   PROX_PARK            -1.2062e+06 -2.1732e+05  3.5383e+04  4.1335e+05\n   PROX_PRIMARY_SCH     -2.2695e+07 -1.7066e+05  4.8472e+04  5.1555e+05\n   PROX_SHOPPING_MALL   -7.2585e+06 -1.6684e+05 -1.0517e+04  1.5923e+05\n   PROX_BUS_STOP        -1.4676e+06 -4.5207e+04  3.7601e+05  1.1664e+06\n   NO_Of_UNITS          -1.3170e+03 -2.4822e+02 -3.0846e+01  2.5496e+02\n   FAMILY_FRIENDLY      -2.2749e+06 -1.1140e+05  7.6214e+03  1.6107e+05\n   FREEHOLD             -9.2067e+06  3.8073e+04  1.5169e+05  3.7528e+05\n                             Max.\n   Intercept            112793548\n   AREA_SQM                 21575\n   AGE                     434201\n   PROX_CBD               2704596\n   PROX_CHILDCARE         1654087\n   PROX_ELDERLYCARE      38867814\n   PROX_URA_GROWTH_AREA  78515730\n   PROX_MRT               3124316\n   PROX_PARK             18122425\n   PROX_PRIMARY_SCH       4637503\n   PROX_SHOPPING_MALL     1529952\n   PROX_BUS_STOP         11342182\n   NO_Of_UNITS              12907\n   FAMILY_FRIENDLY        1720744\n   FREEHOLD               6073636\n   ************************Diagnostic information*************************\n   Number of data points: 1436 \n   Effective number of parameters (2trace(S) - trace(S'S)): 438.3804 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 997.6196 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 42263.61 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 41632.36 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 42515.71 \n   Residual sum of squares: 2.53407e+14 \n   R-square value:  0.8909912 \n   Adjusted R-square value:  0.8430417 \n\n   ***********************************************************************\n   Program stops at: 2022-12-10 11:39:10 \n\n\nCompare AICc values of the two results table AICc: 42967.14 vs AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 42263.61.\nThe report shows that the adjusted R-square of the GWR is 0.8430 which is significantly better than the globel multiple linear regression model of 0.6472.\n\n\n\nBuilding adaptive bandwidth GWR model\n\nComputing adaptive bandwidth\nThe code chunk below uses bw.gwr() of GWModel package to determine the optimal adaptive bandwidth. Notice that the argument adaptive is set to TRUE indicates that we are interested to compute the adaptive bandwidth.\n\nbw.adaptive <- bw.gwr(formula = SELLING_PRICE ~ AREA_SQM + AGE  + \n                        PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE + \n                        PROX_URA_GROWTH_AREA + PROX_MRT + PROX_PARK + \n                        PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_BUS_STOP +\n                        NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                      data=condo_resale.sp, \n                      approach=\"CV\", \n                      kernel=\"gaussian\", \n                      adaptive=TRUE, \n                      longlat=FALSE)\n\nAdaptive bandwidth: 895 CV score: 7.952401e+14 \nAdaptive bandwidth: 561 CV score: 7.667364e+14 \nAdaptive bandwidth: 354 CV score: 6.953454e+14 \nAdaptive bandwidth: 226 CV score: 6.15223e+14 \nAdaptive bandwidth: 147 CV score: 5.674373e+14 \nAdaptive bandwidth: 98 CV score: 5.426745e+14 \nAdaptive bandwidth: 68 CV score: 5.168117e+14 \nAdaptive bandwidth: 49 CV score: 4.859631e+14 \nAdaptive bandwidth: 37 CV score: 4.646518e+14 \nAdaptive bandwidth: 30 CV score: 4.422088e+14 \nAdaptive bandwidth: 25 CV score: 4.430816e+14 \nAdaptive bandwidth: 32 CV score: 4.505602e+14 \nAdaptive bandwidth: 27 CV score: 4.462172e+14 \nAdaptive bandwidth: 30 CV score: 4.422088e+14 \n\n\nThe result shows that the 30 is the recommended data points to be used.\n\n\nGWModel method using adaptive bandwidth\nThe code chunk below uses gwr.basic() of GWModel package to calibrate the GWR model using adaptive bandwidth and Gaussian kernel.\n\ngwr.adaptive <- gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + \n                            PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE + \n                            PROX_URA_GROWTH_AREA + PROX_MRT + PROX_PARK + \n                            PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_BUS_STOP +\n                            NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                          data=condo_resale.sp, bw=bw.adaptive, \n                          kernel = 'gaussian', \n                          adaptive=TRUE, \n                          longlat = FALSE)\ngwr.adaptive\n\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2022-12-10 11:39:19 \n   Call:\n   gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n    PROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + \n    PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sp, bw = bw.adaptive, kernel = \"gaussian\", \n    adaptive = TRUE, longlat = FALSE)\n\n   Dependent (y) variable:  SELLING_PRICE\n   Independent variables:  AREA_SQM AGE PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE PROX_URA_GROWTH_AREA PROX_MRT PROX_PARK PROX_PRIMARY_SCH PROX_SHOPPING_MALL PROX_BUS_STOP NO_Of_UNITS FAMILY_FRIENDLY FREEHOLD\n   Number of data points: 1436\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n     Min       1Q   Median       3Q      Max \n-3470778  -298119   -23481   248917 12234210 \n\n   Coefficients:\n                          Estimate Std. Error t value Pr(>|t|)    \n   (Intercept)           527633.22  108183.22   4.877 1.20e-06 ***\n   AREA_SQM               12777.52     367.48  34.771  < 2e-16 ***\n   AGE                   -24687.74    2754.84  -8.962  < 2e-16 ***\n   PROX_CBD              -77131.32    5763.12 -13.384  < 2e-16 ***\n   PROX_CHILDCARE       -318472.75  107959.51  -2.950 0.003231 ** \n   PROX_ELDERLYCARE      185575.62   39901.86   4.651 3.61e-06 ***\n   PROX_URA_GROWTH_AREA   39163.25   11754.83   3.332 0.000885 ***\n   PROX_MRT             -294745.11   56916.37  -5.179 2.56e-07 ***\n   PROX_PARK             570504.81   65507.03   8.709  < 2e-16 ***\n   PROX_PRIMARY_SCH      159856.14   60234.60   2.654 0.008046 ** \n   PROX_SHOPPING_MALL   -220947.25   36561.83  -6.043 1.93e-09 ***\n   PROX_BUS_STOP         682482.22  134513.24   5.074 4.42e-07 ***\n   NO_Of_UNITS             -245.48      87.95  -2.791 0.005321 ** \n   FAMILY_FRIENDLY       146307.58   46893.02   3.120 0.001845 ** \n   FREEHOLD              350599.81   48506.48   7.228 7.98e-13 ***\n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 756000 on 1421 degrees of freedom\n   Multiple R-squared: 0.6507\n   Adjusted R-squared: 0.6472 \n   F-statistic: 189.1 on 14 and 1421 DF,  p-value: < 2.2e-16 \n   ***Extra Diagnostic information\n   Residual sum of squares: 8.120609e+14\n   Sigma(hat): 752522.9\n   AIC:  42966.76\n   AICc:  42967.14\n   BIC:  41731.39\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Adaptive bandwidth: 30 (number of nearest neighbours)\n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                               Min.     1st Qu.      Median     3rd Qu.\n   Intercept            -1.3487e+08 -2.4669e+05  7.7928e+05  1.6194e+06\n   AREA_SQM              3.3188e+03  5.6285e+03  7.7825e+03  1.2738e+04\n   AGE                  -9.6746e+04 -2.9288e+04 -1.4043e+04 -5.6119e+03\n   PROX_CBD             -2.5330e+06 -1.6256e+05 -7.7242e+04  2.6624e+03\n   PROX_CHILDCARE       -1.2790e+06 -2.0175e+05  8.7158e+03  3.7778e+05\n   PROX_ELDERLYCARE     -1.6212e+06 -9.2050e+04  6.1029e+04  2.8184e+05\n   PROX_URA_GROWTH_AREA -7.2686e+06 -3.0350e+04  4.5869e+04  2.4613e+05\n   PROX_MRT             -4.3781e+07 -6.7282e+05 -2.2115e+05 -7.4593e+04\n   PROX_PARK            -2.9020e+06 -1.6782e+05  1.1601e+05  4.6572e+05\n   PROX_PRIMARY_SCH     -8.6418e+05 -1.6627e+05 -7.7853e+03  4.3222e+05\n   PROX_SHOPPING_MALL   -1.8272e+06 -1.3175e+05 -1.4049e+04  1.3799e+05\n   PROX_BUS_STOP        -2.0579e+06 -7.1461e+04  4.1104e+05  1.2071e+06\n   NO_Of_UNITS          -2.1993e+03 -2.3685e+02 -3.4699e+01  1.1657e+02\n   FAMILY_FRIENDLY      -5.9879e+05 -5.0927e+04  2.6173e+04  2.2481e+05\n   FREEHOLD             -1.6340e+05  4.0765e+04  1.9023e+05  3.7960e+05\n                            Max.\n   Intercept            18758355\n   AREA_SQM                23064\n   AGE                     13303\n   PROX_CBD             11346650\n   PROX_CHILDCARE        2892127\n   PROX_ELDERLYCARE      2465671\n   PROX_URA_GROWTH_AREA  7384059\n   PROX_MRT              1186242\n   PROX_PARK             2588497\n   PROX_PRIMARY_SCH      3381462\n   PROX_SHOPPING_MALL   38038564\n   PROX_BUS_STOP        12081592\n   NO_Of_UNITS              1010\n   FAMILY_FRIENDLY       2072414\n   FREEHOLD              1813995\n   ************************Diagnostic information*************************\n   Number of data points: 1436 \n   Effective number of parameters (2trace(S) - trace(S'S)): 350.3088 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 1085.691 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 41982.22 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 41546.74 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 41914.08 \n   Residual sum of squares: 2.528227e+14 \n   R-square value:  0.8912425 \n   Adjusted R-square value:  0.8561185 \n\n   ***********************************************************************\n   Program stops at: 2022-12-10 11:39:20 \n\n\nThe report shows that the adjusted R-square of the GWR is 0.8561 which is significantly better than the global multiple linear regression model of 0.6472.\n\n\n\nVisualizing GWR output\n\nConverting SDF into sf data frame\nThe code chunk below converts SDF to sf data frame to visualize the fields in SDF.\n\ncondo_resale.sf.adaptive <- st_as_sf(gwr.adaptive$SDF) %>%\n  st_transform(crs=3414)\n\n\n# condo_resale.sf.adaptive.svy21 <- st_transform(condo_resale.sf.adaptive, 3414)\n# condo_resale.sf.adaptive.svy21  \n\n\n# gwr.adaptive.output <- as.data.frame(gwr.adaptive$SDF)\n# condo_resale.sf.adaptive <- cbind(condo_resale.res.sf, as.matrix(gwr.adaptive.output))\n\nThe code chunk below uses glimpse() and summary() to display the content and summary of condo_resale.sf.adaptive sf data frame.\n\nglimpse(condo_resale.sf.adaptive)\n\nRows: 1,436\nColumns: 52\n$ Intercept               <dbl> 2050011.67, 1633128.24, 3433608.17, 234358.91,…\n$ AREA_SQM                <dbl> 9561.892, 16576.853, 13091.861, 20730.601, 672…\n$ AGE                     <dbl> -9514.634, -58185.479, -26707.386, -93308.988,…\n$ PROX_CBD                <dbl> -120681.94, -149434.22, -259397.77, 2426853.66…\n$ PROX_CHILDCARE          <dbl> 319266.925, 441102.177, -120116.816, 480825.28…\n$ PROX_ELDERLYCARE        <dbl> -393417.795, 325188.741, 535855.806, 314783.72…\n$ PROX_URA_GROWTH_AREA    <dbl> -159980.203, -142290.389, -253621.206, -267929…\n$ PROX_MRT                <dbl> -299742.96, -2510522.23, -936853.28, -2039479.…\n$ PROX_PARK               <dbl> -172104.47, 523379.72, 209099.85, -759153.26, …\n$ PROX_PRIMARY_SCH        <dbl> 242668.03, 1106830.66, 571462.33, 3127477.21, …\n$ PROX_SHOPPING_MALL      <dbl> 300881.390, -87693.378, -126732.712, -29593.34…\n$ PROX_BUS_STOP           <dbl> 1210615.44, 1843587.22, 1411924.90, 7225577.51…\n$ NO_Of_UNITS             <dbl> 104.8290640, -288.3441183, -9.5532945, -161.35…\n$ FAMILY_FRIENDLY         <dbl> -9075.370, 310074.664, 5949.746, 1556178.531, …\n$ FREEHOLD                <dbl> 303955.61, 396221.27, 168821.75, 1212515.58, 3…\n$ y                       <dbl> 3000000, 3880000, 3325000, 4250000, 1400000, 1…\n$ yhat                    <dbl> 2886531.8, 3466801.5, 3616527.2, 5435481.6, 13…\n$ residual                <dbl> 113468.16, 413198.52, -291527.20, -1185481.63,…\n$ CV_Score                <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ Stud_residual           <dbl> 0.38207013, 1.01433140, -0.83780678, -2.846146…\n$ Intercept_SE            <dbl> 516105.5, 488083.5, 963711.4, 444185.5, 211962…\n$ AREA_SQM_SE             <dbl> 823.2860, 825.2380, 988.2240, 617.4007, 1376.2…\n$ AGE_SE                  <dbl> 5889.782, 6226.916, 6510.236, 6010.511, 8180.3…\n$ PROX_CBD_SE             <dbl> 37411.22, 23615.06, 56103.77, 469337.41, 41064…\n$ PROX_CHILDCARE_SE       <dbl> 319111.1, 299705.3, 349128.5, 304965.2, 698720…\n$ PROX_ELDERLYCARE_SE     <dbl> 120633.34, 84546.69, 129687.07, 127150.69, 327…\n$ PROX_URA_GROWTH_AREA_SE <dbl> 56207.39, 76956.50, 95774.60, 470762.12, 47433…\n$ PROX_MRT_SE             <dbl> 185181.3, 281133.9, 275483.7, 279877.1, 363830…\n$ PROX_PARK_SE            <dbl> 205499.6, 229358.7, 314124.3, 227249.4, 364580…\n$ PROX_PRIMARY_SCH_SE     <dbl> 152400.7, 165150.7, 196662.6, 240878.9, 249087…\n$ PROX_SHOPPING_MALL_SE   <dbl> 109268.8, 98906.8, 119913.3, 177104.1, 301032.…\n$ PROX_BUS_STOP_SE        <dbl> 600668.6, 410222.1, 464156.7, 562810.8, 740922…\n$ NO_Of_UNITS_SE          <dbl> 218.1258, 208.9410, 210.9828, 361.7767, 299.50…\n$ FAMILY_FRIENDLY_SE      <dbl> 131474.73, 114989.07, 146607.22, 108726.62, 16…\n$ FREEHOLD_SE             <dbl> 115954.0, 130110.0, 141031.5, 138239.1, 210641…\n$ Intercept_TV            <dbl> 3.9720784, 3.3460017, 3.5629010, 0.5276150, 1.…\n$ AREA_SQM_TV             <dbl> 11.614302, 20.087361, 13.247868, 33.577223, 4.…\n$ AGE_TV                  <dbl> -1.6154474, -9.3441881, -4.1023685, -15.524301…\n$ PROX_CBD_TV             <dbl> -3.22582173, -6.32792021, -4.62353528, 5.17080…\n$ PROX_CHILDCARE_TV       <dbl> 1.000488185, 1.471786337, -0.344047555, 1.5766…\n$ PROX_ELDERLYCARE_TV     <dbl> -3.26126929, 3.84626245, 4.13191383, 2.4756745…\n$ PROX_URA_GROWTH_AREA_TV <dbl> -2.846248368, -1.848971738, -2.648105057, -5.6…\n$ PROX_MRT_TV             <dbl> -1.61864578, -8.92998600, -3.40075727, -7.2870…\n$ PROX_PARK_TV            <dbl> -0.83749312, 2.28192684, 0.66565951, -3.340617…\n$ PROX_PRIMARY_SCH_TV     <dbl> 1.59230221, 6.70194543, 2.90580089, 12.9836104…\n$ PROX_SHOPPING_MALL_TV   <dbl> 2.753588422, -0.886626400, -1.056869486, -0.16…\n$ PROX_BUS_STOP_TV        <dbl> 2.0154464, 4.4941192, 3.0419145, 12.8383775, 0…\n$ NO_Of_UNITS_TV          <dbl> 0.480589953, -1.380026395, -0.045279967, -0.44…\n$ FAMILY_FRIENDLY_TV      <dbl> -0.06902748, 2.69655779, 0.04058290, 14.312764…\n$ FREEHOLD_TV             <dbl> 2.6213469, 3.0452799, 1.1970499, 8.7711485, 1.…\n$ Local_R2                <dbl> 0.8846744, 0.8899773, 0.8947007, 0.9073605, 0.…\n$ geometry                <POINT [m]> POINT (22085.12 29951.54), POINT (25656.…\n\n\n\nsummary(gwr.adaptive$SDF$yhat)\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n  171347  1102001  1385528  1751842  1982307 13887901 \n\n\n\n\n\nVisualizing local R2\nThe code chunk below uses tmap package to create an interactive point symbol map.\n\ntmap_mode(\"view\")\ntm_shape(mpsz_svy21)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(condo_resale.sf.adaptive) +  \n  tm_dots(col = \"Local_R2\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14)) #limit the zoom so not too far or too close\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\n\nThe code chunk below visualizes local R2 by URA planning region\n\ntm_shape(mpsz_svy21[mpsz_svy21$REGION_N==\"CENTRAL REGION\", ])+\n  tm_polygons()+\ntm_shape(condo_resale.sf.adaptive) + \n  tm_bubbles(col = \"Local_R2\",\n           size = 0.15,\n           border.col = \"gray60\",\n           border.lwd = 1)\n\n\n\n\n\n\nVisualizing coefficient estimates\nThe code chunk below creates an interactive point symbol map which compare AREA_SQM_SE and AREA_SQM_TV.\n\ntmap_mode(\"view\")\n\nAREA_SQM_SE <- tm_shape(mpsz_svy21)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(condo_resale.sf.adaptive) +  \n  tm_dots(col = \"AREA_SQM_SE\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\nAREA_SQM_TV <- tm_shape(mpsz_svy21)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(condo_resale.sf.adaptive) +  \n  tm_dots(col = \"AREA_SQM_TV\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\ntmap_arrange(AREA_SQM_SE, AREA_SQM_TV, \n             asp=1, ncol=2,\n             sync = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntmap_mode(\"plot\")"
  },
  {
    "objectID": "Take-home_Ex2/Take-home_Ex2.html",
    "href": "Take-home_Ex2/Take-home_Ex2.html",
    "title": "Take-home Exercise 2: Regionalisation of Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods",
    "section": "",
    "text": "In this take-home exercise, I will be regionalising Nigeria by using several measures. Regionalisation is to group observations which are similar in their statistical attributes and spatial location. The measures that are included in regionalisation are:\n\nTotal number of functional water points\nTotal number of nonfunctional water points\nPercentage of functional water points\nPercentage of non-functional water points\nPercentage of main water point technology (i.e. Hand Pump)\nPercentage of usage capacity (i.e. < 1000, >=1000)\nPercentage of rural water points"
  },
  {
    "objectID": "Take-home_Ex2/Take-home_Ex2.html#the-data",
    "href": "Take-home_Ex2/Take-home_Ex2.html#the-data",
    "title": "Take-home Exercise 2: Regionalisation of Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods",
    "section": "The Data",
    "text": "The Data\n\nAspatial data\nThe aspatial data includes the water point data that can be downloaded from WPdx+ Global Data Repository. For this analysis, Shapefile data format is downloaded. The shapefile includes global water point data, the Nigeria water point data which will be used in our analysis is filtered in data importing section. The files’ names are renamed to “geo_export” for easier use.\n\n\nGeospatial data\nThe geospatial data includes the Nigeria Level-2 Administratie Boundary (which is also known as Local Government Data LGA) polygon features GIS data which can be downloaded from geoBoundaries. In “Download geoBoundaries” section, key in “Nigeria” to Name, and download the ADM2 2020 data file. The files with name “geoBoundaries-NGA-ADM2” are used."
  },
  {
    "objectID": "Take-home_Ex2/Take-home_Ex2.html#getting-started",
    "href": "Take-home_Ex2/Take-home_Ex2.html#getting-started",
    "title": "Take-home Exercise 2: Regionalisation of Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods",
    "section": "Getting Started",
    "text": "Getting Started\nIn this exercise, the following R packages will be used:\n\nsf for importing, managing, and processing geospatial data\nspdep for computing spatial weights, global and local spatial autocorrelation statistics\nfunModeling for Exploratory Data Analysis (EDA)\nrgdal for providing bindings to the ‘Geospatial’ Data Abstraction Library (GDAL) and access to projection operation from the ‘PROJ’ library.\ntidyverse for importing, wrangling, and visualizing data\n\ntidyr for manipulating data\ndplyr for transforming data\nggplot2 for visualizing data\n\ntmap for plotting cartographic quality choropleth map\ncorrplot for providing a visual exploratory tool on correlation matrix that supports automatic variable reordering to help detect hidden patterns among variables\nggpubr for providing some easy-to-use functions for creating and customizing ggplot2\nheatmaply for visualizing high-dimensional data, in which a table of numbers are encoded as a grid of colored cells\ncluster and ClustGeo for cluster analysis\n\nThe code chunk below installs and launch the R packages into R environment.\n\npacman::p_load(rgdal, spdep, tmap, sf, ClustGeo, funModeling,\n               ggpubr, cluster, factoextra, NbClust,\n               heatmaply, corrplot, psych, tidyverse, GGally)"
  },
  {
    "objectID": "Take-home_Ex2/Take-home_Ex2.html#data-preparation",
    "href": "Take-home_Ex2/Take-home_Ex2.html#data-preparation",
    "title": "Take-home Exercise 2: Regionalisation of Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods",
    "section": "Data Preparation",
    "text": "Data Preparation\n\nImporting geospatial data into R environment\nThe code chunk below uses st_read() of sf package to import Nigeria Boundary GIS data shapefile geoBoundaries-NGA-ADM2 into R and save as simple feature data frame called nga.\nst_transform() of sf package is used to transform original geographic coordinate reference system (CRS) WGS84 to EPSG:26391 Minna/Nigeria West Belt, which is more appropriate for our analysis.\n\nnga <- st_read(dsn = \"data/geospatial\",\n               layer = \"geoBoundaries-NGA-ADM2\") %>%\n  st_transform(crs = 26391)\n\nThe code chunk below views the content of nga simple features data frame.\n\nnga\n\nThe code chunk below uses glimpse() to reveal the data type of fields.\n\nglimpse(nga)\n\n\n\nImporting water point shapefile into R environment\nThe code chunk below uses st_read() of sf package to import water point data geo_export shapefile into R and save as simple feature data frame called wp.\nst_transform() of sf package is used to transform original geographic coordinate reference system (CRS) WGS84 to EPSG:26391 Minna/Nigeria West Belt, which is more appropriate for our analysis.\nfilter() of dplyr package is used to extract water point records of Nigeria.\n\nwp <- st_read(dsn = \"data/aspatial\",\n              layer = \"geo_export\") %>%\n  st_transform(crs = 26391) %>%\n  filter(clean_coun == \"Nigeria\")\n\nThe code chunk below uses write_rds() of readr package to save the extracted sf data table wp into rds data format file called wp_nga and is saved in data folder.\n\nwp_nga <- write_rds(wp, \"data/wp_nga.rds\")"
  },
  {
    "objectID": "Take-home_Ex2/Take-home_Ex2.html#data-wrangling",
    "href": "Take-home_Ex2/Take-home_Ex2.html#data-wrangling",
    "title": "Take-home Exercise 2: Regionalisation of Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods",
    "section": "Data Wrangling",
    "text": "Data Wrangling\n\nRecording NA values into string\nThe code chunk below uses replace_na() to recode:\n\nAll NA values in status_cle field into Unknown\nAll NA values in water_te_2 field into Unknown\n\nmutate() of dplyr package is used to derive new variables called Unknown.\n\nwp_nga <- read_rds(\"data/wp_nga.rds\") %>%\n  mutate(status_cle = replace_na(status_cle, \"Unknown\")) %>%\n  mutate(water_te_2 = replace_na(water_te_2, \"Unknown\"))\n\n\n\nEDA\nThe code chunk below uses freq() of funModeling package to display the distribution of water points status status_cle field in wp_nga.\n\nfreq(data = wp_nga,\n     input = 'status_cle')\n\n\nAccording to the distribution diagram of each status, the proportion of functional water points includes Functional, Functional but not in use, and Functional but needs repair, which is 54.88% in total. The proportion of non-functional water points includes Non-Functional, Non-Functional due to dry season, Abandoned/Decommissioned, Abandoned, and Non functional due to dry season which is 33.9% in total.\nThe code chunk below uses freq() of funModeling package to display the distribution of water point technology water_te_2 field in wp_nga.\n\nfreq(data = wp_nga,\n     input = 'water_te_2')\n\n\nThe code chunk below uses freq() of funModeling package to display the distribution of usage capacity usage_cap field in wp_nga.\n\nfreq(data = wp_nga,\n     input = 'usage_cap')\n\n\nThe code chunk below uses freq() of funModeling package to display the distribution of urban/rural water points is_urban field in wp_nga.\n\nfreq(data = wp_nga,\n     input = 'is_urban')"
  },
  {
    "objectID": "Take-home_Ex2/Take-home_Ex2.html#extracting-water-point-data",
    "href": "Take-home_Ex2/Take-home_Ex2.html#extracting-water-point-data",
    "title": "Take-home Exercise 2: Regionalisation of Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods",
    "section": "Extracting Water Point Data",
    "text": "Extracting Water Point Data\nIn this section, I will use filter() to extract water point records by using classes in status_cle, water_te_2, usage_cap, is_rural field.\n\nExtracting functional water points\nThe code chunk below uses filter() to select functional water points from wp_nga and name as wp_functional.\n\nwp_functional <- wp_nga %>%\n  filter(status_cle %in%\n           c(\"Functional\",\n             \"Functional but not in use\",\n             \"Functional but needs repair\"))\n\n\n\nExtracting non-functional water points\nThe code chunk below uses filter() to select non-functional water points from wp_nga and name as wp_nonfunctional.\n\nwp_nonfunctional <- wp_nga %>%\n  filter(status_cle %in%\n           c(\"Non-Functional\",\n             \"Non-Functional due to dry season\",\n             \"Abandoned/Decommissioned\",\n             \"Abandoned\",\n             \"Non functional due to dry season\"))\n\n\n\nExtracting water points with Hand Pump technology\nThe code chunk below uses filter() to select Hand Pump water points from wp_nga and name as wp_handpump.\n\nwp_handpump <- wp_nga %>%\n  filter(water_te_2 %in%\n           c(\"Hand Pump\"))\n\n\n\nExtracting water points with Usage Capacity <1000\nThe code chunk below uses filter() to select water points with usage capacity < 1000 from wp_nga and name as wp_lowcap.\n\nwp_lowcap <- filter(wp_nga, usage_cap != 1000)\n\n\n\nExtracting water points with Usage Capacity >=1000\nThe code chunk below uses filter() to select water points with usage capacity >= 1000 from wp_nga and name as wp_highcap.\n\nwp_highcap <- filter(wp_nga, usage_cap == 1000)\n\n\n\nExtracting water points in rural area\nThe code chunk below uses filter() to select Hand Pump water points from wp_nga and name as wp_handpump.\n\nwp_rural <- wp_nga %>%\n  filter(is_urban %in%\n           c(\"False\"))"
  },
  {
    "objectID": "Take-home_Ex2/Take-home_Ex2.html#performing-point-in-polygon-count",
    "href": "Take-home_Ex2/Take-home_Ex2.html#performing-point-in-polygon-count",
    "title": "Take-home Exercise 2: Regionalisation of Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods",
    "section": "Performing Point-in-Polygon Count",
    "text": "Performing Point-in-Polygon Count\nIn this section, st_intersects() of sf package to identify the water points located in each region of Nigeria, length() of Base R is used to calculate the number of water points in each region.\nmutate() of dplyr package is used to derive new variables namely total wp, wp functional, wp non-functional, wp handpump, wp lowcap, wp highcap, wp rural.\n\nnga_wp <- nga %>% \n  mutate(`total wp` = lengths(st_intersects(nga, wp_nga))) %>%\n  mutate(`wp functional` = lengths(st_intersects(nga, wp_functional))) %>%\n  mutate(`wp non-functional` = lengths(st_intersects(nga, wp_nonfunctional))) %>%\n  mutate(`wp handpump` = lengths(st_intersects(nga, wp_handpump))) %>%\n  mutate(`wp lowcap` = lengths(st_intersects(nga, wp_lowcap))) %>%\n  mutate(`wp highcap` = lengths(st_intersects(nga, wp_highcap))) %>%\n  mutate(`wp rural` = lengths(st_intersects(nga, wp_rural)))"
  },
  {
    "objectID": "Take-home_Ex2/Take-home_Ex2.html#saving-the-analytical-data-table",
    "href": "Take-home_Ex2/Take-home_Ex2.html#saving-the-analytical-data-table",
    "title": "Take-home Exercise 2: Regionalisation of Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods",
    "section": "Saving the Analytical Data Table",
    "text": "Saving the Analytical Data Table\nThe code chunk below uses mutate() to derive 2 fields namely pct_functional, pct_non-functional, pct_handpump, pct_lowcap, pct_highcap, pct_rural which are the percentage of functional water points, non-functional water points, hand pump water points, usage capacity < 1000 water points, usage capacity >= 1000 water points and rural area water points in each region.\nreplace_na() is used to recode all NaN values which are caused by 0 in total wp field into 0.\n\nnga_wp <- nga_wp %>%\n  mutate(`pct_functional` = replace_na((`wp functional`/`total wp`),0)) %>%\n  mutate(`pct_non-functional` = replace_na((`wp non-functional`/`total wp`),0)) %>%\n  mutate(`pct_handpump` = replace_na((`wp handpump`/`total wp`),0)) %>%\n  mutate(`pct_lowcap` = replace_na((`wp lowcap`/`total wp`),0)) %>%\n  mutate(`pct_highcap` = replace_na((`wp highcap`/`total wp`),0)) %>%\n  mutate(`pct_rural` = replace_na((`wp rural`/`total wp`),0))\n\nThe code chunk below uses write_rds() of readr package to save the extracted sf data table nga_wp into rds data format file called wp_nga and is saved in data folder.\n\nwrite_rds(nga_wp, \"data/wp_nga.rds\")\n\nUpon completing the above sections, we achieve an rds data format file called wp_nga which has a file size of 2.1MB. This allows us to keep a small size data file and delete raw data files which occupy space of several gigabytes. In the following section, wp_nga.rds will be used for analysis. A RMarkdown code {r eval=FALSE} is used to skip evaluating previous code chunks and exclude their results so that the wp_nga.rds file will not be modified. If need to reproduce the previous sections, please change {r eval=FALSE} to {r} then proceed to run the code chunks.\nThe code chunk below uses read_rds() to load rds file wp_nga for the analysis.\n\nnga_wp <- read_rds(\"data/wp_nga.rds\")\nsummary(nga_wp)\n\n  shapeName            Level             shapeID           shapeGroup       \n Length:774         Length:774         Length:774         Length:774        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n  shapeType                  geometry      total wp     wp functional   \n Length:774         MULTIPOLYGON :774   Min.   :  0.0   Min.   :  0.00  \n Class :character   epsg:26391   :  0   1st Qu.: 45.0   1st Qu.: 17.00  \n Mode  :character   +proj=tmer...:  0   Median : 95.5   Median : 45.00  \n                                        Mean   :122.7   Mean   : 67.36  \n                                        3rd Qu.:169.0   3rd Qu.: 88.00  \n                                        Max.   :895.0   Max.   :754.00  \n wp non-functional  wp handpump       wp lowcap        wp highcap    \n Min.   :  0.0     Min.   :  0.00   Min.   :  0.00   Min.   :  0.00  \n 1st Qu.: 13.0     1st Qu.:  6.00   1st Qu.: 16.00   1st Qu.: 11.00  \n Median : 34.0     Median : 47.00   Median : 59.50   Median : 25.00  \n Mean   : 41.6     Mean   : 75.84   Mean   : 89.59   Mean   : 33.13  \n 3rd Qu.: 61.0     3rd Qu.:110.00   3rd Qu.:129.00   3rd Qu.: 46.00  \n Max.   :277.0     Max.   :761.00   Max.   :764.00   Max.   :247.00  \n    wp rural      pct_functional   pct_non-functional  pct_handpump   \n Min.   :  0.00   Min.   :0.0000   Min.   :0.0000     Min.   :0.0000  \n 1st Qu.: 23.00   1st Qu.:0.3311   1st Qu.:0.2105     1st Qu.:0.1621  \n Median : 64.00   Median :0.4741   Median :0.3534     Median :0.5079  \n Mean   : 97.45   Mean   :0.4983   Mean   :0.3592     Mean   :0.4864  \n 3rd Qu.:141.00   3rd Qu.:0.6712   3rd Qu.:0.5080     3rd Qu.:0.7778  \n Max.   :895.00   Max.   :1.0000   Max.   :1.0000     Max.   :1.0000  \n   pct_lowcap      pct_highcap       pct_rural     \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.3990   1st Qu.:0.1225   1st Qu.:0.5727  \n Median :0.6690   Median :0.3137   Median :0.8646  \n Mean   :0.6078   Mean   :0.3754   Mean   :0.7271  \n 3rd Qu.:0.8718   3rd Qu.:0.5787   3rd Qu.:1.0000  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000"
  }
]